(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{655:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("在学 Python OOP 之前，我在想，怎么还没到结构体，后来才恍然大悟，结构体是 C 的东西，C++ 有了类以后，（不考虑效率问题）就不需要结构体了，而 Python 也是这样，有了类，还需要结构体做什么呢？")]),t._v(" "),a("p",[t._v("该篇博客默认读者曾学过至少一门 OOP 语言。")]),t._v(" "),a("p",[t._v("Python 和 C++ 的对同一个概念的称呼的简单对照表：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Python")]),t._v(" "),a("th",[t._v("C++")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("类 "),a("code",[t._v("class")])]),t._v(" "),a("td",[t._v("类 "),a("code",[t._v("class")])])]),t._v(" "),a("tr",[a("td",[t._v("实例 "),a("code",[t._v("instance")])]),t._v(" "),a("td",[t._v("对象 "),a("code",[t._v("object")])])]),t._v(" "),a("tr",[a("td",[t._v("方法 "),a("code",[t._v("methods")])]),t._v(" "),a("td",[t._v("成员函数 "),a("code",[t._v("member functions")])])]),t._v(" "),a("tr",[a("td",[t._v("属性 "),a("code",[t._v("attributes")])]),t._v(" "),a("td",[t._v("成员变量 "),a("code",[t._v("member variables")])])])])]),t._v(" "),a("h2",{attrs:{id:"类和实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类和实例"}},[t._v("#")]),t._v(" 类和实例")]),t._v(" "),a("p",[t._v("类的定义：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# object 表示被继承的类，如果没有继承类，就写 object")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("score "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" score\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_score")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%s: %s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("由类生成的东西，在 C++ 中叫对象 "),a("code",[t._v("object")]),t._v("，但是在 Python 中叫实例 "),a("code",[t._v("instance")]),t._v("。可能是因为 Python 的对象被用来指代"),a("code",[t._v("东西")]),t._v("了吧，比如"),a("code",[t._v("类对象")]),t._v("、"),a("code",[t._v("方法对象")]),t._v("。")]),t._v(" "),a("p",[t._v("创建 "),a("code",[t._v("实例")]),t._v("，并调用实例对应的关联函数（关联函数被称为实例的方法 "),a("code",[t._v("Method")]),t._v("）：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("bart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bart Simpson'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("59")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlisa "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lisa Simpson'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("87")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlisa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("从第一段代码还可以看出，类的构造方法是 "),a("code",[t._v("__init__")]),t._v("。")]),t._v(" "),a("p",[t._v("另外，在定义类的时候，每个函数无论在声明、还是在使用时，都要写明第一个参数是 "),a("code",[t._v("self")]),t._v("（C++ 只在静态成员函数的时候需要写明）")]),t._v(" "),a("p",[t._v("和 C++ 不同的是，外部代码在使用对象的时候，Python 还可以创建成员：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("bart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("grade "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v("\n")])])]),a("h2",{attrs:{id:"类属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类属性"}},[t._v("#")]),t._v(" 类属性")]),t._v(" "),a("p",[t._v("由于 C++ 需要初始化变量，所以 C++ 类一般先是一堆变量声明，再是成员函数。")]),t._v(" "),a("p",[t._v("到了 Python 这里，不需要声明，直接就是几个方法，反而有点不习惯。")]),t._v(" "),a("p",[t._v("如果想要给类弄一个属性（类似于 C++ 的静态成员），也是可以的，而且方法也浅显易懂：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    course "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Chinese'")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("score "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" score\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_score")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%s: %s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("类属性是可以被实例属性覆盖的。并且，如果删除了示例的属性，会还原为类属性。")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("course"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 Chinese")]),t._v("\nbart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("95")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("course"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 Chinese")]),t._v("\nbart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("course "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Math'")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例属性覆盖类属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("course"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 Math")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("course"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 Chinese")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" bart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("course             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除示例实心")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("course"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 Math")]),t._v("\n")])])]),a("h2",{attrs:{id:"私有成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#私有成员"}},[t._v("#")]),t._v(" 私有成员")]),t._v(" "),a("p",[t._v("如上，Python 并没有 C++ 一样的，必须写明对象是 "),a("code",[t._v("public")]),t._v("，否则就是私有 "),a("code",[t._v("private")]),t._v(" 的。而 Python 如何在类中创造私有成员呢：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__score "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" score\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_score")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%s: %s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("此时能够正常执行 "),a("code",[t._v("print_score")]),t._v(" 函数，但无法访问 "),a("code",[t._v("__name")]),t._v(" 了：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Student"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("95")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("95")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name\nTraceback "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("most recent call last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  File "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<stdin>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nAttributeError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Student'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" has no attribute "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__name'")]),t._v("\n")])])]),a("p",[t._v("此时，如果需要获取 "),a("code",[t._v("name")]),t._v("、修改 "),a("code",[t._v("name")]),t._v(" 时，就需要在类里面添加 "),a("code",[t._v("getName")]),t._v(" 和 "),a("code",[t._v("setName")]),t._v("。这是面向对象编程的经典操作。")]),t._v(" "),a("p",[t._v("需要注意的是：")]),t._v(" "),a("ol",[a("li",[t._v("形如 "),a("code",[t._v("__xxx__")]),t._v(" 的变量名是特殊变量，可以直接访问；")]),t._v(" "),a("li",[t._v("其实也可以通过访问 "),a("code",[t._v("_Student__name")]),t._v(" 来访问 "),a("code",[t._v("__name")]),t._v("，Python 解释器也只是改了一个名字。仅限从一个对象内部访问的“私有”实例变量在 Python 中并不存在。当然还是强烈建议不要访问。")]),t._v(" "),a("li",[t._v("大多数 Python 代码还遵循这样一个约定：带有一个下划线的名称 (例如 "),a("code",[t._v("_spam")]),t._v(") 应该被当作是 API 的非公有部分 (无论它是函数、方法或是数据成员)。也就是说，不应该去访问它，虽然他并不是私有成员。")])]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("p",[t._v("继承：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Animal is running...'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Animal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Animal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\nDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出 Animal is running...")]),t._v("\n")])])]),a("p",[t._v("注意：如果基类定义在另一个模块中，可以使用：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DerivedClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BaseClassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),a("h3",{attrs:{id:"多继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多继承"}},[t._v("#")]),t._v(" 多继承")]),t._v(" "),a("p",[t._v("多继承的语法没什么好说的。")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DerivedClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Base1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Base2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Base3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("但是多继承涉及到的问题就挺麻烦了（C++ 对多继承问题的处理可以参考博客 "),a("RouterLink",{attrs:{to:"/posts/python/(/cpp/cpp-grammar/cpp-inheritance-derive-polymorphism/#多继承的二义性-虚基类)"}},[t._v("C++ 面向对象——继承、派生和多态")]),t._v("）：")],1),t._v(" "),a("ol",[a("li",[t._v("如果有两个不同父类有同一个属性")])]),t._v(" "),a("p",[t._v("你可以理解为 Python 的处理办法是深度优先、从左至右地搜索父类的属性，搜到了第一个，就不会管后面的同名属性了。简单粗暴。")]),t._v(" "),a("blockquote",[a("p",[t._v("真实情况比这个更复杂一些；方法解析顺序会动态改变以支持对 "),a("code",[t._v("super()")]),t._v(" 的协同调用。 这种方式在某些其他多重继承型语言中被称为后续方法调用，它比单继承型语言中的 "),a("code",[t._v("super")]),t._v(" 调用更强大。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果出现了菱形关联，如同在 C++ 那篇博客题到的下图左边的情况（右边是 C++ 默认的实现）：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/cpp/cpp-grammar/cpp-inheritance-derive-polymorphism/AMCar.svg",alt:"AMCar"}})]),t._v(" "),a("p",[t._v("但是 Python 的 "),a("code",[t._v("动态改变的方法解析顺序")]),t._v(" 可以保证只调用每个父类一次。（用 C++ 的话来说就是，所有基类都是虚基类 "),a("code",[t._v("virtual base")]),t._v("）")]),t._v(" "),a("blockquote",[a("p",[t._v("只调用每个父类一次，并且保持单调（即一个类可以被子类化而不影响其父类的优先顺序）")])]),t._v(" "),a("p",[t._v("后面这句不大明白。")]),t._v(" "),a("h2",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),a("p",[t._v("多态，即子类重载父类的同名方法：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Animal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Dog is running...'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nDog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出 Dog is running...")]),t._v("\n")])])]),a("p",[t._v("所有函数默认都是虚函数的。")]),t._v(" "),a("h2",{attrs:{id:"运算符重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载"}},[t._v("#")]),t._v(" 运算符重载")]),t._v(" "),a("p",[t._v("Python 也支持运算符重载，但是和 C++ 的不一样，C++ 可以对任意运算符进行重载，Python 只能通过重载系统给定的的对应的函数，来重载部分运算符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("重载说明")]),t._v(" "),a("th",[t._v("运算符调用方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("__init__")])]),t._v(" "),a("td",[t._v("构造函数")]),t._v(" "),a("td",[t._v("对象创建: "),a("code",[t._v("X = Class(args)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__del__")])]),t._v(" "),a("td",[t._v("析构函数")]),t._v(" "),a("td",[a("code",[t._v("X")]),t._v(" 对象收回")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__add__")]),t._v("/"),a("code",[t._v("__sub__")])]),t._v(" "),a("td",[t._v("加减运算")]),t._v(" "),a("td",[a("code",[t._v("X+Y")]),t._v("，"),a("code",[t._v("X+=Y/X-Y")]),t._v("，"),a("code",[t._v("X-=Y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__or__")])]),t._v(" "),a("td",[t._v("运算符"),a("code",[t._v("|")])]),t._v(" "),a("td",[a("code",[t._v("X|Y")]),t._v("，"),a("code",[t._v("X|=Y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("_repr__")]),t._v("／"),a("code",[t._v("__str__")])]),t._v(" "),a("td",[t._v("打印／转换")]),t._v(" "),a("td",[a("code",[t._v("print(X)")]),t._v("、"),a("code",[t._v("repr(X)")]),t._v("／"),a("code",[t._v("str(X)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__call__")])]),t._v(" "),a("td",[t._v("函数调用")]),t._v(" "),a("td",[a("code",[t._v("X(*args, **kwargs)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__getattr__")])]),t._v(" "),a("td",[t._v("属性引用")]),t._v(" "),a("td",[a("code",[t._v("X.undefined")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__setattr__")])]),t._v(" "),a("td",[t._v(",属性赋值")]),t._v(" "),a("td",[a("code",[t._v("X.any=value")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__delattr__")])]),t._v(" "),a("td",[t._v("属性删除")]),t._v(" "),a("td",[a("code",[t._v("del X.any")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__getattribute__")])]),t._v(" "),a("td",[t._v("属性获取")]),t._v(" "),a("td",[a("code",[t._v("X.any")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__getitem__")])]),t._v(" "),a("td",[t._v("索引运算")]),t._v(" "),a("td",[a("code",[t._v("X[key]")]),t._v("，"),a("code",[t._v("X[i:j]")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__setitem__")])]),t._v(" "),a("td",[t._v("索引赋值")]),t._v(" "),a("td",[a("code",[t._v("X[key]")]),t._v("，"),a("code",[t._v("X[i:j]=sequence")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__delitem__")])]),t._v(" "),a("td",[t._v("索引和分片删除")]),t._v(" "),a("td",[a("code",[t._v("del X[key]")]),t._v("，"),a("code",[t._v("del X[i:j]")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__len__")])]),t._v(" "),a("td",[t._v("长度")]),t._v(" "),a("td",[a("code",[t._v("len(X)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__bool__")])]),t._v(" "),a("td",[t._v("布尔测试")]),t._v(" "),a("td",[a("code",[t._v("bool(X)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__lt__")]),t._v("，"),a("code",[t._v("__gt__")])]),t._v(" "),a("td",[t._v("特定的比较")]),t._v(" "),a("td",[t._v("依次为"),a("code",[t._v("X<Y")]),t._v("，"),a("code",[t._v("X>Y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__le__")]),t._v("，"),a("code",[t._v("__ge__")])]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("X<=Y")]),t._v("，"),a("code",[t._v("X>=Y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__eq__")]),t._v("，"),a("code",[t._v("__ne__")])]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("X==Y")]),t._v("，"),a("code",[t._v("X!=Y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__radd__")])]),t._v(" "),a("td",[t._v("右侧加法")]),t._v(" "),a("td",[a("code",[t._v("other+X")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__iadd__")])]),t._v(" "),a("td",[t._v("实地（增强的）加法")]),t._v(" "),a("td",[a("code",[t._v("X+=Y")]),t._v("(or else "),a("code",[t._v("__add__")]),t._v(")")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__iter__")]),t._v("，"),a("code",[t._v("__next__")])]),t._v(" "),a("td",[t._v("迭代")]),t._v(" "),a("td",[a("code",[t._v("I=iter(X)")]),t._v("，"),a("code",[t._v("next()")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__contains__")])]),t._v(" "),a("td",[t._v("成员关系测试")]),t._v(" "),a("td",[a("code",[t._v("item in X")]),t._v("(X为任何可迭代对象)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__index__")])]),t._v(" "),a("td",[t._v("整数值")]),t._v(" "),a("td",[a("code",[t._v("hex(X)")]),t._v("，"),a("code",[t._v("bin(X)")]),t._v(",  "),a("code",[t._v("oct(X)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__enter__")]),t._v("，"),a("code",[t._v("__exit__")])]),t._v(" "),a("td",[t._v("环境管理器")]),t._v(" "),a("td",[a("code",[t._v("with obj as var:")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__get__")]),t._v("，"),a("code",[t._v("__set__")]),t._v("，"),a("code",[t._v("__delete__")])]),t._v(" "),a("td",[t._v("描述符属性")]),t._v(" "),a("td",[a("code",[t._v("X.attr")]),t._v("，"),a("code",[t._v("X.attr=value")]),t._v("，"),a("code",[t._v("del X.attr")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("__new__")])]),t._v(" "),a("td",[t._v("创建")]),t._v(" "),a("td",[t._v("在"),a("code",[t._v("__init__")]),t._v("之前创建对象")])])])]),t._v(" "),a("p",[t._v("更多的数学符号重载请看 "),a("a",{attrs:{href:"https://docs.python.org/zh-cn/3.7/reference/datamodel.html#emulating-numeric-types",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 文档|模拟数字类型"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=e.exports}}]);