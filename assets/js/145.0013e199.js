(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{500:function(e,a,t){"use strict";t.r(a);var s=t(3),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"cheatsheet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cheatsheet"}},[e._v("#")]),e._v(" CheatSheet")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("操作")]),e._v(" "),t("th",[e._v("参数")]),e._v(" "),t("th",[e._v("示例")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("基本命令")]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -i <输入> <输出>")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -i input.mp4 output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("自动覆盖/自动不覆盖")]),e._v(" "),t("td",[t("code",[e._v("-y")]),e._v(" / "),t("code",[e._v("-n")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -y -i input.mp4 output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("裁剪视频")]),e._v(" "),t("td",[t("code",[e._v("-ss <开始时间> -to <结束时间>")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -i input.mp4 -ss 00:01:00 -to 01:01:00 -c copy output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("改变视频码率、分辨率")]),e._v(" "),t("td",[t("code",[e._v("-b <码率> -vf scale=<宽>:<高>")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -i input.mp4 -b:v 2M -vf scale=1280:720 output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("添加字幕流")]),e._v(" "),t("td",[t("code",[e._v("-i <字幕>.srt -c:s mov_text")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -i input.mp4 -i infile.srt -c:v copy -c:s mov_text output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("将字幕编码进视频")]),e._v(" "),t("td",[t("code",[e._v("-vf subtitles=<字幕>.srt")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -i input.mp4 -vf subtitles=infile.srt output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("查询当前 ffmpeg 支持的硬件加速")]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -hwaccels")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("查询编码格式和解码、编器")]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -codecs")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("不重新编码")]),e._v(" "),t("td",[t("code",[e._v("-c copy")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -i input.mp4 -ss 00:01:00 -to 01:00:00 -c copy output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("使用 Nvidia 显卡加速，编码为 H.265")]),e._v(" "),t("td",[t("code",[e._v("-hwaccel cuda -c:v hevc_nvenc")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -hwaccel cuda -i input.mp4 -b 2M -c:v hevc_nvenc -vf 'scale=-1:720' output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("使用 AMD 显卡加速，编码为 H.265（Windows）")]),e._v(" "),t("td",[t("code",[e._v("-hwaccel amf -c:v hevc_amf")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -hwaccel amf -i input.mp4 -b 2M -c:v hevc_amf -vf 'scale=-1:720' output.mp4")])])]),e._v(" "),t("tr",[t("td",[e._v("使用 AMD 显卡加速，编码为 H.265（Linux）")]),e._v(" "),t("td",[t("code",[e._v("-hwaccel vaapi -c:v hevc_vaapi -vf 'format=nv12, hwupload'")])]),e._v(" "),t("td",[t("code",[e._v("ffmpeg -hwaccel vaapi -i input.mp4 -b:v 2M -c:v hevc_vaapi -vf 'scale=-1:720, format=nv12, hwupload' output.mp4")])])])])]),e._v(" "),t("h2",{attrs:{id:"视频处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频处理"}},[e._v("#")]),e._v(" 视频处理")]),e._v(" "),t("h3",{attrs:{id:"裁剪视频-不重新编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#裁剪视频-不重新编码"}},[e._v("#")]),e._v(" 裁剪视频（不重新编码）")]),e._v(" "),t("p",[e._v("开始接触 ffmpeg 就是在裁剪视频长度的时候。Premier、格式工厂、Windows 照片自带的裁剪等软件都需要对视频进行重新编码。而 ffmpeg 则可以通过设置参数 "),t("code",[e._v("-c copy")]),e._v("，在创建视频流的时候不重新编码，这样的好处是"),t("strong",[e._v("裁剪的过程基本就是文件复制的过程")]),e._v("，CPU 不再成为性能瓶颈，SSD 上速度是真滴快。")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("ffmpeg -i input.mp4 -ss 00:01:00 -to 01:01:00 -c copy output.mp4\n")])])]),t("p",[t("code",[e._v("-i")]),e._v(" 参数指定输入文件，"),t("code",[e._v("-ss")]),e._v(" 指定开始裁剪的时间，"),t("code",[e._v("-to")]),e._v(" 指定结束裁剪的时间（也可以使用 "),t("code",[e._v("-t")]),e._v(" 指定裁剪总长度），"),t("code",[e._v("-c")]),e._v(" 指定编码格式。")]),e._v(" "),t("h3",{attrs:{id:"改变码率和分辨率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#改变码率和分辨率"}},[e._v("#")]),e._v(" 改变码率和分辨率")]),e._v(" "),t("ul",[t("li",[e._v("限制码率：使用参数 "),t("code",[e._v("-b 2M")]),e._v(" 将视频和音频的总平均码率限制在 2Mbps。")]),e._v(" "),t("li",[e._v("修改视频分辨率：使用参数 "),t("code",[e._v("-vf scale=640:480")]),e._v("，或省略一个参数 "),t("code",[e._v("-vf scale=-1:480")]),e._v("，程序将自动按比例缩放。")])]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("ffmpeg -i input.mp4 -b 2M -vf "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("scale")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("-1:720 output.mp4\n")])])]),t("p",[e._v("需要注意的是，高分辨率对应低码率，会导致画质变低，甚至出现花屏（b 站现状）。")]),e._v(" "),t("h3",{attrs:{id:"添加字幕"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加字幕"}},[e._v("#")]),e._v(" 添加字幕")]),e._v(" "),t("p",[e._v("添加字幕有两种方案。")]),e._v(" "),t("p",[e._v("一种是把将字幕作为视频流、音频流以外的第三种流：字幕流，传进去。这种方案的兼容性完全取决于播放器能否支持，不过好处是可以不重新编码视频。")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("ffmpeg -i infile.mp4 -i infile.srt -c copy -c:s mov_text outfile.mp4\n")])])]),t("p",[e._v("第二种方案是将字幕写到视频上，这种兼容性好，不过默认的字体似乎比较丑。")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("ffmpeg -i infile.mp4 -vf "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("subtitles")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("infile.srt outfile.mp4\n")])])]),t("p",[e._v("调整字幕的格式可以参考"),t("a",{attrs:{href:"https://ffmpeg.org/ffmpeg-all.html#subtitles-1",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("如果不支持非 srt 格式的字幕，ffmpeg 也提供了将 ass 字幕转换为 srt 的命令：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("ffmpeg -i subs.ass -c:s srt output.srt\n")])])]),t("h2",{attrs:{id:"加速-ffmpeg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加速-ffmpeg"}},[e._v("#")]),e._v(" 加速 ffmpeg")]),e._v(" "),t("h3",{attrs:{id:"不重新编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不重新编码"}},[e._v("#")]),e._v(" 不重新编码")]),e._v(" "),t("p",[e._v("ffmpeg 则可以通过设置参数 "),t("code",[e._v("-c copy")]),e._v("，在创建视频流的时候不重新编码，这样的好处是"),t("strong",[e._v("裁剪的过程基本就是文件复制的过程")]),e._v("，CPU 不再成为性能瓶颈，SSD 上速度是真滴快。")]),e._v(" "),t("p",[e._v("当然这里仅适用于于不改变视频编码格式和内容的情况（如修改音频流、字幕流、裁剪视频），如果要修改视频分辨率、码率等，当然需要重新编码。")]),e._v(" "),t("p",[e._v("下面是裁剪视频的例子：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("ffmpeg -i input.mp4 -ss 00:01:00 -to 01:00:00 -c copy output.mp4\n")])])]),t("h3",{attrs:{id:"使用-gpu-加速-ffmpeg-编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-gpu-加速-ffmpeg-编码"}},[e._v("#")]),e._v(" 使用 GPU 加速 ffmpeg 编码")]),e._v(" "),t("h4",{attrs:{id:"理论知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理论知识"}},[e._v("#")]),e._v(" 理论知识")]),e._v(" "),t("p",[e._v("ffmpeg 有"),t("a",{attrs:{href:"https://trac.ffmpeg.org/wiki/HWAccelIntro",target:"_blank",rel:"noopener noreferrer"}},[e._v("介绍硬件加速的 wiki"),t("OutboundLink")],1),e._v("，包括各方法在平台上的兼容性、各方法支持的功能等。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/1b4899f4d614f1dee1f4c357560ebc2169b38a22103e4b6a1bd1c5dfce89494b.png",alt:"各方法在平台上的兼容性（字典序）"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/38e4449ffdc6a093a33303a5b6740d7e8db4be5f88798917f034934274343c25.png",alt:"ffmpeg 使用各方法实现的 API 完整度"}})]),e._v(" "),t("p",[e._v("可以看到虽然 OpenCL 在各平台上的兼容性非常好，但是它压根不支持编、解码。"),t("code",[e._v("Direct3D 11")]),e._v(" 和 "),t("code",[e._v("Direct3D 9")]),e._v(" 虽然支持 Windows 平台的所有显卡，但同样不支持编、解码。")]),e._v(" "),t("p",[e._v("总结下来，根据显卡和操作系统，推荐如下：")]),e._v(" "),t("ul",[t("li",[e._v("Nvidia 显卡 -> 无脑 "),t("code",[e._v("CUDA (NVENC/NVDEC/CUVID)")]),e._v("；")]),e._v(" "),t("li",[e._v("Intel 显卡 -> "),t("code",[e._v("libmfx")]),e._v("；")]),e._v(" "),t("li",[e._v("AMD 显卡 + Windows -> "),t("code",[e._v("AMF")]),e._v("；")]),e._v(" "),t("li",[e._v("AMD 显卡 + Linux -> "),t("code",[e._v("VAAPI")]),e._v("；")]),e._v(" "),t("li",[e._v("macOS / iOS -> "),t("code",[e._v("VideoToolbox")]),e._v("。")])]),e._v(" "),t("h4",{attrs:{id:"实践-nvidia-windows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践-nvidia-windows"}},[e._v("#")]),e._v(" 实践：Nvidia + Windows")]),e._v(" "),t("p",[e._v("查看当前 ffmpeg 支持的硬件加速方法：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ffmpeg -hwaccels\nffmpeg version "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5.0")]),e._v(".1-essentials_build-www.gyan.dev Copyright "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2000")]),e._v("-2022 the FFmpeg developers\n  built with gcc "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11.2")]),e._v(".0 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Rev7, Built by MSYS2 project"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  configuration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-lzma --enable-zlib --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-sdl2 --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-libaom --enable-libopenjpeg --enable-libvpx --enable-libass --enable-libfreetype --enable-libfribidi --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libmfx --enable-libgme --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libtheora --enable-libvo-amrwbenc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-librubberband\n  libavutil      "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("57")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("17.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("57")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("17.100")]),e._v("\n  libavcodec     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("18.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("18.100")]),e._v("\n  libavformat    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.100")]),e._v("\n  libavdevice    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v("\n  libavfilter     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("24.100")]),e._v(" /  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("24.100")]),e._v("\n  libswscale      "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v(" /  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v("\n  libswresample   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v(" /  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v("\n  libpostproc    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("56")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("56")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v("\nHardware acceleration methods:\ncuda\ndxva2\nqsv\nd3d11va\n")])])]),t("p",[e._v("这里由于使用的是 N 卡，于是确定使用 "),t("code",[e._v("cuda")]),e._v("。")]),e._v(" "),t("p",[e._v("选择编码格式和对应的编码器：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ffmpeg -codecs\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 略过一堆输出")]),e._v("\n DEV.L. h261                 H.261\n DEV.L. h263                 H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n D.V.L. h263i                Intel H.263\n DEV.L. h263p                H.263+ / H.263-1998 / H.263 version "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n DEV.LS h264                 H.264 / AVC / MPEG-4 AVC / MPEG-4 part "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("decoders: h264 h264_qsv h264_cuvid "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("encoders: libx264 libx264rgb h264_amf h264_nvenc h264_qsv "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n D.VIL. hap                  Vidvox Hap\n DEV.L. hevc                 H.265 / HEVC "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("High Efficiency Video Coding"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("decoders: hevc hevc_qsv hevc_cuvid "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("encoders: libx265 hevc_amf hevc_nvenc hevc_qsv "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("我们使用 "),t("code",[e._v("H.265")]),e._v("("),t("code",[e._v("HEVC")]),e._v(") 格式编码，用 CUDA 加速编码过程。对应的编码器为 "),t("code",[e._v("hevc_nvenc")]),e._v("。（解码器似乎会根据硬件加速 + 输入文件格式自动选择，不需要指定）")]),e._v(" "),t("p",[e._v("最后写命令：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("ffmpeg -hwaccel cuda -i input.mp4 -c:v hevc_nvenc -c:a copy output.mp4\n")])])]),t("p",[e._v("其中 "),t("code",[e._v("-c")]),e._v(" 参数放在 "),t("code",[e._v("-i")]),e._v(" 后，表示修改编码格式（在 "),t("code",[e._v("-i")]),e._v(" 前则是解码格式）；"),t("code",[e._v("-c:v")]),e._v(" 是修改视频编码格式，"),t("code",[e._v("-c:a")]),e._v(" 是修改音频编码格式。")]),e._v(" "),t("p",[e._v("如果提示 Nvidia 驱动版本太低，需要更新驱动。")]),e._v(" "),t("h4",{attrs:{id:"实践-amd-linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践-amd-linux"}},[e._v("#")]),e._v(" 实践：AMD + Linux")]),e._v(" "),t("p",[e._v("这里使用的是 AMD Ryzen 4600U 的核显。")]),e._v(" "),t("p",[e._v("查看当前 ffmpeg 支持的硬件加速方法：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ffmpeg -hwaccels\nffmpeg version n5.0 Copyright "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2000")]),e._v("-2022 the FFmpeg developers\n  built with gcc "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11.2")]),e._v(".0 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("GCC"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  configuration: --prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr --disable-debug --disable-static --disable-stripping --enable-amf --enable-avisynth --enable-cuda-llvm --enable-lto --enable-fontconfig --enable-gmp --enable-gnutls --enable-gpl --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libdav1d --enable-libdrm --enable-libfreetype --enable-libfribidi --enable-libgsm --enable-libiec61883 --enable-libjack --enable-libmfx --enable-libmodplug --enable-libmp3lame --enable-libopencore_amrnb --enable-libopencore_amrwb --enable-libopenjpeg --enable-libopus --enable-libpulse --enable-librav1e --enable-librsvg --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libsvtav1 --enable-libtheora --enable-libv4l2 --enable-libvidstab --enable-libvmaf --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxcb --enable-libxml2 --enable-libxvid --enable-libzimg --enable-nvdec --enable-nvenc --enable-shared --enable-version3\n  libavutil      "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("57")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("17.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("57")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("17.100")]),e._v("\n  libavcodec     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("18.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("18.100")]),e._v("\n  libavformat    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16.100")]),e._v("\n  libavdevice    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("59")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v("\n  libavfilter     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("24.100")]),e._v(" /  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("24.100")]),e._v("\n  libswscale      "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v(" /  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.100")]),e._v("\n  libswresample   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v(" /  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v("\n  libpostproc    "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("56")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v(" / "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("56")]),e._v(".  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.100")]),e._v("\nHardware acceleration methods:\nvdpau\ncuda\nvaapi\nqsv\ndrm\n")])])]),t("p",[e._v("这里由于使用的是 A 卡，于是确定使用 "),t("code",[e._v("vaapi")]),e._v("。")]),e._v(" "),t("p",[e._v("选择编码格式和对应的编码器：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ffmpeg -codecs\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 略过一堆输出")]),e._v("\n DEV.L. h261                 H.261\n DEV.L. h263                 H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("decoders: h263 h263_v4l2m2m "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("encoders: h263 h263_v4l2m2m "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n D.V.L. h263i                Intel H.263\n DEV.L. h263p                H.263+ / H.263-1998 / H.263 version "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n DEV.LS h264                 H.264 / AVC / MPEG-4 AVC / MPEG-4 part "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("decoders: h264 h264_v4l2m2m h264_qsv h264_cuvid "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("encoders: libx264 libx264rgb h264_amf h264_nvenc h264_qsv h264_v4l2m2m h264_vaapi "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n D.VIL. hap                  Vidvox Hap\n DEV.L. hevc                 H.265 / HEVC "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("High Efficiency Video Coding"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("decoders: hevc hevc_qsv hevc_v4l2m2m hevc_cuvid "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("encoders: libx265 hevc_amf hevc_nvenc hevc_qsv hevc_v4l2m2m hevc_vaapi "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("我们使用 "),t("code",[e._v("H.265")]),e._v("("),t("code",[e._v("HEVC")]),e._v(") 格式编码，用 CUDA 加速编码过程。对应的编码器为 "),t("code",[e._v("hevc_vaapi")]),e._v("。（解码器似乎会根据硬件加速 + 输入文件格式自动选择，不需要指定）")]),e._v(" "),t("p",[e._v("最后写命令，但是报错了：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ffmpeg -hwaccel vaapi -i input.mp4 -c:v hevc_vaapi output.mp4\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 略过一堆输出")]),e._v("\nImpossible to convert between the formats supported by the filter "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Parsed_null_0'")]),e._v(" and the filter "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'auto_scale_0'")]),e._v("\nError reinitializing filters"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\nFailed to inject frame into filter network: Function not implemented\nError "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" processing the decoded data "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" stream "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#0:0")]),e._v("\n")])])]),t("p",[e._v("搜索"),t("a",{attrs:{href:"https://superuser.com/questions/1633883/ffmpeg-hevc-vaapi-impossible-to-convert-between-the-formats-supported-by-the-fi",target:"_blank",rel:"noopener noreferrer"}},[e._v("相关回答"),t("OutboundLink")],1),e._v("以后，加入 "),t("code",[e._v("-vf 'format=nv12,hwupload'")]),e._v("，成功解决。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('> ffmpeg -hwaccel vaapi -i input.mp4 -c:v hevc_vaapi -vf "format=nv12, hwupload" output.mp4\n')])])]),t("p",[e._v("核显相较 CPU 还是能有一倍的提升。不过看 "),t("code",[e._v("radeontop")]),e._v(" 还是没有占满，估计瓶颈是在内存速度上。")]),e._v(" "),t("h2",{attrs:{id:"其他魔法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他魔法"}},[e._v("#")]),e._v(" 其他魔法")]),e._v(" "),t("h3",{attrs:{id:"下载-m3u8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下载-m3u8"}},[e._v("#")]),e._v(" 下载 m3u8")]),e._v(" "),t("blockquote",[t("p",[e._v("省流：ffmpeg 自带的有 bug，可以使用封装过的 "),t("a",{attrs:{href:"https://github.com/HeiSir2014/M3U8-Downloader",target:"_blank",rel:"noopener noreferrer"}},[e._v("HeiSir2014/M3U8-Downloader"),t("OutboundLink")],1),e._v("。")])]),e._v(" "),t("p",[e._v("m3u8 是一种流媒体格式，常用于在线观看、直播等。如腾讯课堂的回看就是以这个格式提供的。")]),e._v(" "),t("p",[e._v("网上有不少 m3u8 下载器，我一直使用的是 "),t("a",{attrs:{href:"https://github.com/nilaoda/M3U8-Downloader",target:"_blank",rel:"noopener noreferrer"}},[e._v("nilaoda/M3U8-Downloader"),t("OutboundLink")],1),e._v("。我也知道它用到了 "),t("code",[e._v("ffmpeg")]),e._v("，不过一直以为它只是做了视频合并。")]),e._v(" "),t("p",[e._v("今天使用某 APP 时，刚开始没有找到现成的将加密 m3u8 转为 mp4 的轮子，于是自己想按照"),t("a",{attrs:{href:"https://www.jianshu.com/p/1b0adcc7b426",target:"_blank",rel:"noopener noreferrer"}},[e._v("博客"),t("OutboundLink")],1),e._v(" 手写一个 shell 脚本实现。但看到最后，没想到 ffmpeg 还能一行（从网络或从本地）下载 m3u8 并转为单文件！nb！")]),e._v(" "),t("p",[e._v("下面给出三个版本的用法（一般采用第一个就行，最快）：")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 不重新编码")]),e._v("\nffmpeg -allowed_extensions ALL -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"URL"')]),e._v(" -c:v copy output.mp4\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 使用默认编码进行编码（应该是 h264 吧）")]),e._v("\nffmpeg -allowed_extensions ALL -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"URL"')]),e._v(" output.mp4\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 使用 CUDA 编码为 h265")]),e._v("\nffmpeg -allowed_extensions ALL -hwaccel cuda -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"URL"')]),e._v(" -c:v hevc_nvenc output.mp4\n")])])]),t("ul",[t("li",[t("code",[e._v("-allowed_extensions ALL")]),e._v("：m3u8 可能涉及到加密，需要读取 "),t("code",[e._v(".key")]),e._v(" 秘钥文件；而 "),t("code",[e._v("ffmpeg")]),e._v(" 默认不让读取媒体格式以外的格式，所以需要加这个参数允许读取所有格式；")]),e._v(" "),t("li",[t("code",[e._v('"URL"')]),e._v("：替换为本地路径或 HTTP URL 均可。也可以用 "),t("code",[e._v("wget")]),e._v(" 或 "),t("code",[e._v("curl")]),e._v(" 将 URL 中的 m3u8 源文件下载下来，再运行 "),t("code",[e._v("ffmpeg")]),e._v("；")]),e._v(" "),t("li",[t("code",[e._v("output.mp4")]),e._v("：输出文件，没什么好说的。")])]),e._v(" "),t("p",[e._v("但是如果下载片段中有失败的，ffmpeg 不会重复请求，而是直接忽略错误，导致下载下来效果不是很好。可以使用 "),t("a",{attrs:{href:"https://github.com/HeiSir2014/M3U8-Downloader",target:"_blank",rel:"noopener noreferrer"}},[e._v("HeiSir2014/M3U8-Downloader"),t("OutboundLink")],1),e._v(" 来替代，这个插件是下载和合并分开实现，因此不会出现这个问题。")])])}),[],!1,null,null,null);a.default=n.exports}}]);