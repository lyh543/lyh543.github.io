(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{419:function(a,s,t){"use strict";t.r(s);var e=t(3),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("ul",[s("li",[a._v("授课老师：廖建明老师")]),a._v(" "),s("li",[a._v("教材：《微机原理与接口技术》(第4版). 吴宁,乔亚男主编. 清华大学出版社")]),a._v(" "),s("li",[a._v("参考教材:《汇编语言程序设计》. 廖建明主编.清华大学出版社")])]),a._v(" "),s("h2",{attrs:{id:"第一章-微型计算机基础概论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一章-微型计算机基础概论"}},[a._v("#")]),a._v(" 第一章 微型计算机基础概论")]),a._v(" "),s("h3",{attrs:{id:"计算机的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机的工作原理"}},[a._v("#")]),a._v(" 计算机的工作原理")]),a._v(" "),s("p",[a._v("计算机中的指令执行过程：取指令 -> 指令译码 -> 读取操作数 -> 执行命令 -> 存放结果")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/2b125ce6885b6eddbe43b0c1b94ea20d5b0f18a475587854d4bda793f548e73f.png",alt:"计算机基本组成结构"}})]),a._v(" "),s("p",[a._v("指令的顺序工作方式和并行流水线工作方式")]),a._v(" "),s("ul",[s("li",[a._v("冯 • 诺依曼计算机的工作原理：\n"),s("ul",[s("li",[a._v("存储程序工作方式")]),a._v(" "),s("li",[a._v("运算器为核心")])])]),a._v(" "),s("li",[a._v("特点：\n"),s("ul",[s("li",[a._v("存储程序，共享数据，顺序执行；")]),a._v(" "),s("li",[a._v("属于顺序处理机，适于确定的算法和数值处理。")])])]),a._v(" "),s("li",[a._v("不足：\n"),s("ul",[s("li",[a._v("与存储器间有大量数据交互，对总线要求很高；")]),a._v(" "),s("li",[a._v("执行顺序由程序决定，对大型复杂任务较难处理；")]),a._v(" "),s("li",[a._v("以运算器为核心，处理效率较低；\n由PC控制执行顺序，难以进行真正的并行处理。")])])])]),a._v(" "),s("p",[a._v("非冯 • 诺依曼计算机：并行性")]),a._v(" "),s("h3",{attrs:{id:"微机系统组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微机系统组成"}},[a._v("#")]),a._v(" 微机系统组成")]),a._v(" "),s("ul",[s("li",[a._v("微处理器："),s("strong",[a._v("运算器单元+控制器单元+寄存器单元+内部总线")]),a._v("，具有CPU全部功能的大规模集成电路芯片。")]),a._v(" "),s("li",[a._v("微型机："),s("strong",[a._v("微处理器+内存+I/O接口+系统总线+电源+输入/输出设备+外存设备")])]),a._v(" "),s("li",[a._v("微机系统："),s("strong",[a._v("微型机+系统软件+应用软件")])])]),a._v(" "),s("h2",{attrs:{id:"第二章-微处理器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二章-微处理器"}},[a._v("#")]),a._v(" 第二章 微处理器")]),a._v(" "),s("h3",{attrs:{id:"_8086-8088-特点、工作模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8086-8088-特点、工作模式"}},[a._v("#")]),a._v(" 8086/8088 特点、工作模式")]),a._v(" "),s("p",[a._v("特点：并行流水线、内存空间分段管理、多处理器系统")]),a._v(" "),s("p",[a._v("工作模式：最小（单处理器，不必接总线控制器）/最大（多处理器，需总线控制器）")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/7ad14e65b5c37de1842d043b016c76a8d3bd32ce0a7851e280bdc84c13ebcb99.png",alt:"最小模式下的总线连接示意图"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/155a118f5171dbabacdf915d12b68eaa987f1b740a9d36ddda8463d00aebb92e.png",alt:"最大模式下的总线连接示意图"}})]),a._v(" "),s("p",[a._v("工作模式选择："),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("M")]),s("mi",[a._v("N")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("M")]),s("mi",[a._v("X")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("MN/\\overline{MX}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("X")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("引脚")],1),a._v(" "),s("ul",[s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("M")]),s("mi",[a._v("N")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("M")]),s("mi",[a._v("X")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1),s("mo",[a._v("=")]),s("mn",[a._v("0")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("MN/\\overline{MX}=0")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("X")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[a._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[a._v("0")])])])])]),a._v("：最大模式")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("M")]),s("mi",[a._v("N")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("M")]),s("mi",[a._v("X")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1),s("mo",[a._v("=")]),s("mn",[a._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("MN/\\overline{MX}=1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("X")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[a._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[a._v("1")])])])])]),a._v("：最小模式")],1)]),a._v(" "),s("h3",{attrs:{id:"_8086-8088-引线及功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8086-8088-引线及功能"}},[a._v("#")]),a._v(" 8086/8088 引线及功能")]),a._v(" "),s("h4",{attrs:{id:"地址线和数据线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#地址线和数据线"}},[a._v("#")]),a._v(" 地址线和数据线")]),a._v(" "),s("ul",[s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("A")]),s("mi",[a._v("D")]),s("mn",[a._v("0")]),s("mo",[a._v("−")]),s("mi",[a._v("A")]),s("mi",[a._v("D")]),s("mn",[a._v("7")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("AD0-AD7")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord"},[a._v("0")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[a._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord"},[a._v("7")])])])])]),a._v("：低 8 位地址和低 8 位数据信号（分时复用）。传送地址时单向，传送数据时双")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("A")]),s("mn",[a._v("8")]),s("mo",[a._v("−")]),s("mi",[a._v("A")]),s("mn",[a._v("15")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("A8-A15")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord"},[a._v("8")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[a._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord"},[a._v("1")]),s("span",{staticClass:"mord"},[a._v("5")])])])])]),a._v("：8位地址信号")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("A")]),s("mn",[a._v("16")]),s("mo",[a._v("−")]),s("mi",[a._v("A")]),s("mn",[a._v("19")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mi",[a._v("S")]),s("mn",[a._v("3")]),s("mo",[a._v("−")]),s("mi",[a._v("S")]),s("mn",[a._v("6")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("A16-A19/S3-S6")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.76666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord"},[a._v("1")]),s("span",{staticClass:"mord"},[a._v("6")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[a._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord"},[a._v("1")]),s("span",{staticClass:"mord"},[a._v("9")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("S")]),s("span",{staticClass:"mord"},[a._v("3")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[a._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("S")]),s("span",{staticClass:"mord"},[a._v("6")])])])])]),a._v("：高4位地址信号，与状态信号分时复用")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("W")]),s("mi",[a._v("R")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{WR}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("W")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("：写信号")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("R")]),s("mi",[a._v("D")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{RD}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("：读信号")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("O")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mi",[a._v("M")]),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("IO/\\overline{M}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("：访问内存/访问接口")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("D")]),s("mi",[a._v("E")]),s("mi",[a._v("N")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{DEN}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("E")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("：低电平有效时，数据总线上数据有效，允许进行读/写操作")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("D")]),s("mi",[a._v("T")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mi",[a._v("R")]),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("DT/\\overline{R}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("(Data Transmit/ Receive)：为“1”时 CPU 向存储器或 I/O 传送，否则为反向")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("A")]),s("mi",[a._v("L")]),s("mi",[a._v("E")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("ALE")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord mathdefault"},[a._v("L")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("E")])])])])]),a._v("：地址锁存信号，当其为高时表示地址线上地址有效。一般用它将地址锁存到一个锁存器中")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("R")]),s("mi",[a._v("E")]),s("mi",[a._v("S")]),s("mi",[a._v("E")]),s("mi",[a._v("T")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("RESET")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("E")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("S")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("E")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")])])])])]),a._v("：复位信号。当其为高时将完成CPU内部复位。复位后CPU内部寄存器的值如下表")],1)]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/6496134227c8788122f9189f659d55960174a1226f8bdb7595368e5b24ee7f3d.png",alt:"复位后 CPU 的内部寄存器状态"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/400c11160d21c24a4001d80071e2fef1906a764604fe8d687d74affc03defa92.png",alt:"例题"}})]),a._v(" "),s("ul",[s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("R")]),s("mi",[a._v("E")]),s("mi",[a._v("A")]),s("mi",[a._v("D")]),s("mi",[a._v("Y")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("READY")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("E")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.22222em"}},[a._v("Y")])])])])]),a._v("：外部同步控制输入信号，高电平有效（8088 与内存/外设之间在一个总线周期内的时钟配合信号）")],1)]),a._v(" "),s("h4",{attrs:{id:"中断请求和响应信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断请求和响应信号"}},[a._v("#")]),a._v(" 中断请求和响应信号")]),a._v(" "),s("ul",[s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("N")]),s("mi",[a._v("T")]),s("mi",[a._v("R")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("INTR")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")])])])])]),a._v("：可屏蔽中断请求输入端")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("N")]),s("mi",[a._v("M")]),s("mi",[a._v("I")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("NMI")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")])])])])]),a._v("： 非屏蔽中断请求输入端")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("N")]),s("mi",[a._v("T")]),s("mi",[a._v("A")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{INTA}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("：中断响应输出端")],1)]),a._v(" "),s("h4",{attrs:{id:"总线保持信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总线保持信号"}},[a._v("#")]),a._v(" 总线保持信号")]),a._v(" "),s("ul",[s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("H")]),s("mi",[a._v("O")]),s("mi",[a._v("L")]),s("mi",[a._v("D")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("HOLD")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.08125em"}},[a._v("H")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")]),s("span",{staticClass:"mord mathdefault"},[a._v("L")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")])])])])]),a._v("：总线保持请求信号输入端。当 CPU 以外的其他设备要求占用总线时，通过该引脚向 CPU 发出请求（外设 -> CPU）")],1),a._v(" "),s("li",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("H")]),s("mi",[a._v("L")]),s("mi",[a._v("D")]),s("mi",[a._v("A")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("HLDA")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.08125em"}},[a._v("H")]),s("span",{staticClass:"mord mathdefault"},[a._v("L")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")])])])])]),a._v("：总线保持响应信号输出端。CPU 对 HOLD 信号的响应信号（CPU -> 外设）")],1)]),a._v(" "),s("h3",{attrs:{id:"_8088-和-8086-cpu-引线的差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088-和-8086-cpu-引线的差异"}},[a._v("#")]),a._v(" 8088 和 8086 CPU 引线的差异")]),a._v(" "),s("ul",[s("li",[a._v("数据总线宽度不同\n"),s("ul",[s("li",[a._v("8088的外部总线宽度是8位，8086为16位。")])])]),a._v(" "),s("li",[a._v("访问存储器和I/O控制的信号含义不同\n"),s("ul",[s("li",[a._v("8088——"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("O")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mi",[a._v("M")]),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1),s("mo",[a._v("=")]),s("mn",[a._v("0")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("IO/\\overline{M}=0")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[a._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[a._v("0")])])])])]),a._v(" 表示访问内存；")],1),a._v(" "),s("li",[a._v("8086——"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("O")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mi",[a._v("M")]),s("mo",[a._v("=")]),s("mn",[a._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{IO}/M=1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[a._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[a._v("1")])])])])]),a._v(" 表示访问内存。")],1)])])]),a._v(" "),s("h3",{attrs:{id:"_8088-8086-内部结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088-8086-内部结构"}},[a._v("#")]),a._v(" 8088/8086 内部结构")]),a._v(" "),s("ul",[s("li",[a._v("执行单元 EU")]),a._v(" "),s("li",[a._v("总线接口单元 BIU")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/cafe7330e111a3f1db574ccbf7a1fcd0f4a47c03fd9cb14a0f846ce6a3066737.png",alt:"8086CPU结构"}})]),a._v(" "),s("p",[a._v("执行单元 EU")]),a._v(" "),s("ul",[s("li",[a._v("组成：\n"),s("ul",[s("li",[a._v("ALU")]),a._v(" "),s("li",[a._v("8 个通用寄存器")]),a._v(" "),s("li",[a._v("1 个标志寄存器")]),a._v(" "),s("li",[a._v("EU 部分的控制电路")])])]),a._v(" "),s("li",[a._v("功能：\n"),s("ul",[s("li",[a._v("指令译码")]),a._v(" "),s("li",[a._v("指令执行")]),a._v(" "),s("li",[a._v("暂存中间运算结果")]),a._v(" "),s("li",[a._v("保存运算结果特征")])])])]),a._v(" "),s("p",[a._v("总线接口单元 BIU")]),a._v(" "),s("ul",[s("li",[a._v("组成：\n"),s("ul",[s("li",[a._v("地址加法器")]),a._v(" "),s("li",[a._v("4 个段寄存器")]),a._v(" "),s("li",[a._v("指令指针 IP")]),a._v(" "),s("li",[a._v("总线控制逻辑")])])]),a._v(" "),s("li",[a._v("功能：\n"),s("ul",[s("li",[a._v("从内存中取指令到指令队列（指令队列是并行流水线工作的基础）")]),a._v(" "),s("li",[a._v("负责与内存或 I/O 接口之间的数据传送")]),a._v(" "),s("li",[a._v("在执行转移程序时，BIU 清除指令队列，从指定的新地址取指令，并立即传给执行单元执行")])])])]),a._v(" "),s("h3",{attrs:{id:"_8088-8086-内部寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088-8086-内部寄存器"}},[a._v("#")]),a._v(" 8088/8086 内部寄存器")]),a._v(" "),s("ul",[s("li",[a._v("16 位寄存器\n"),s("ul",[s("li",[a._v("8个通用寄存器")]),a._v(" "),s("li",[a._v("4个段寄存器")]),a._v(" "),s("li",[a._v("2个控制寄存器")])])])]),a._v(" "),s("h4",{attrs:{id:"通用寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用寄存器"}},[a._v("#")]),a._v(" 通用寄存器")]),a._v(" "),s("ul",[s("li",[a._v("数据寄存器：AX、BX、CX、DX\n"),s("ul",[s("li",[a._v("AX 分为 "),s("code",[a._v("AH:AL")]),a._v("，以此类推")]),a._v(" "),s("li",[a._v("AX: Add")]),a._v(" "),s("li",[a._v("BX: Base 基址寄存器")]),a._v(" "),s("li",[a._v("CX: Count 计数")]),a._v(" "),s("li",[a._v("DX: Data\n"),s("ul",[s("li",[a._v("在间接寻址的 I/O 指令中存放 I/O 端口地址")]),a._v(" "),s("li",[a._v("在 32 位乘除法运算时，存高 16 位数")])])])])]),a._v(" "),s("li",[a._v("地址指针寄存器：SP、BP\n"),s("ul",[s("li",[a._v("SP: Stack Pointer 栈顶的偏移地址")]),a._v(" "),s("li",[a._v("BP: Base Pointer 基址指针寄存器，访问内存时存放内存单元的偏移地址\n"),s("ul",[s("li",[a._v("BX BP 作为通用寄存器，二者均可用于存放数据")]),a._v(" "),s("li",[a._v("作为基址寄存器，用 BX 表示所寻找的数据在数据段；用 BP 则表示数据在堆栈段")])])])])]),a._v(" "),s("li",[a._v("变址寄存器 "),s("code",[a._v("Index Register")]),a._v("：SI、DI 存放数据在内存中的地址\n"),s("ul",[s("li",[a._v("SI (Source Index)：源")]),a._v(" "),s("li",[a._v("DI (Destination Index)：目标")])])])]),a._v(" "),s("h4",{attrs:{id:"控制寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制寄存器"}},[a._v("#")]),a._v(" 控制寄存器")]),a._v(" "),s("ul",[s("li",[a._v("IP (Instruction Pointer)：指令指针寄存器，其内容为下一条要执行指令的偏移地址")]),a._v(" "),s("li",[a._v("FLAGS：CF、SF、AF、PF、OF、ZF、IF、TF、DF\n"),s("ul",[s("li",[a._v("CF (Carry Flag)：进位标志位")]),a._v(" "),s("li",[a._v("SF (Signal Flag)：符号标志位")]),a._v(" "),s("li",[a._v("AF (Auxility Flag)：辅助 CF。若 Bit3 向 Bit4 有进位(借位)，"),s("code",[a._v("AF=1")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("Bit 号从 0 开始，用中文描述就是第四位向第五位有进位。")])]),a._v(" "),s("li",[a._v("**在 16 位加法中，AF 仍然是 Bit3 向 Bit4 进位的结果。**详见 "),s("a",{attrs:{href:"https://stackoverflow.com/questions/36492553/how-to-set-auxiliary-flag-for-16bits-binary-addition",target:"_blank",rel:"noopener noreferrer"}},[a._v("assembly - how to set auxiliary flag for 16bits binary addition - Stack Overflow"),s("OutboundLink")],1)])])]),a._v(" "),s("li",[a._v("PF (Parity Flag)：奇偶标志位，运算结果的低 8 位中 "),s("code",[a._v("1")]),a._v(" 的个数为偶数时 "),s("code",[a._v("PF=1")])]),a._v(" "),s("li",[a._v("OF (Overflow Flag)：溢出标志位")]),a._v(" "),s("li",[a._v("ZF (Zero Flag)：零标志位")]),a._v(" "),s("li",[a._v("TF (Trap Flag)：陷阱标志位，"),s("code",[a._v("TF=1")]),a._v(" 使 CPU 处于单步执行指令")]),a._v(" "),s("li",[a._v("IF (Interrupt Flag)：允许中断标志位")]),a._v(" "),s("li",[a._v("DF (Direction Flag)：方向标志位。在数据串操作时确定操作的方向。")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/a52f6b563d277084286fabdc71037dc19a5d732c34de36e070670376d34ef179.png",alt:"例题"}})]),a._v(" "),s("h4",{attrs:{id:"段寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段寄存器"}},[a._v("#")]),a._v(" 段寄存器")]),a._v(" "),s("ul",[s("li",[a._v("作用：用于存放相应逻辑段的段基地址")]),a._v(" "),s("li",[a._v("8086/8088 内存中逻辑段的类型：代码段、数据段、附加段、堆栈段")]),a._v(" "),s("li",[a._v("8086/8088 内存中逻辑段的数量\n"),s("ul",[s("li",[a._v("最多为 64K 个")]),a._v(" "),s("li",[a._v("程序中同时可以使用4个段，分别由CS、DS、ES和SS四个段寄存器指示。")])])]),a._v(" "),s("li",[a._v("CS (Code Segment)：代码段寄存器，存放代码段的段基地址。")]),a._v(" "),s("li",[a._v("DS (Data Segment)：数据段寄存器，存放数据段的段基地址。")]),a._v(" "),s("li",[a._v("ES (Extended Segment)：附加段寄存器，存放数据段的段基地址。")]),a._v(" "),s("li",[a._v("SS (Stack Segment)：堆栈段寄存器，存放堆栈段的段基地址。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/98680035b5a29445842f7489e2f5bfc56cebba8a27c8b951523eca8fae9fcf61.png",alt:"段寄存器"}})]),a._v(" "),s("h3",{attrs:{id:"_8088-8086-存储器组织"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088-8086-存储器组织"}},[a._v("#")]),a._v(" 8088/8086 存储器组织")]),a._v(" "),s("p",[a._v("内存地址分为物理地址、逻辑地址。")]),a._v(" "),s("p",[a._v("物理地址：8086/8088 CPU有 20 根地址线，它可以产生 20 位的地址码，寻址范围为 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msup",[s("mn",[a._v("2")]),s("mn",[a._v("2")])],1),s("mn",[a._v("0")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("2^20")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8141079999999999em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[a._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[a._v("2")])])])])])])])]),s("span",{staticClass:"mord"},[a._v("0")])])])])]),a._v("，即 1 兆字节空间。")],1),a._v(" "),s("p",[a._v("字单元：任何两个相邻字节单元构成，16 bits")]),a._v(" "),s("ul",[s("li",[a._v("子单元地址：字节较小地址")]),a._v(" "),s("li",[a._v("存放规则："),s("strong",[a._v("小端")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/0b6da650308dced8aadba7cd9c0fed64fd1c1ec9ee3231a82918654770f4a920.png",alt:"例题"}})]),a._v(" "),s("ul",[s("li",[a._v("32-bit 逻辑地址 = 16-bit 段基地址 "),s("code",[a._v(":")]),a._v("（拼接） 16-bit 段内地址")]),a._v(" "),s("li",[a._v("20-bit 物理地址：16-bit 段基地址 "),s("code",[a._v("*16+")]),a._v(" 16-bit 偏移地址\n"),s("ul",[s("li",[a._v("段首的偏移地址 = "),s("code",[a._v("0000H")])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/468d81f9a1623be2e0ff52fa5f0910af4f05b6e3ec0bf0d92df5611edcdad93c.png",alt:"例题"}})]),a._v(" "),s("h4",{attrs:{id:"_8086-8088-的存储器段结构的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8086-8088-的存储器段结构的特点"}},[a._v("#")]),a._v(" 8086/8088 的存储器段结构的特点")]),a._v(" "),s("ol",[s("li",[a._v("段大小 <= 64KB")]),a._v(" "),s("li",[a._v("段首地址为一个小节的首地址")])]),a._v(" "),s("ul",[s("li",[a._v("小节：每 16 Bytes 为一小节")]),a._v(" "),s("li",[a._v("小节的首地址最低位为 "),s("code",[a._v("0000")])])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("逻辑段在物理上可能是：可邻接的、间隔的、部分重叠的或完全重叠的")]),a._v(" "),s("li",[a._v("在任一时刻，一个程序只能访问4个"),s("a",{attrs:{href:"#%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8"}},[a._v("当前段")]),a._v("中的内容")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/637600cc1fa7d7355b08efe783b6db99f560352a79bdad2cc637429962eeecfe.png",alt:"例题"}})]),a._v(" "),s("h4",{attrs:{id:"逻辑地址、物理地址转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑地址、物理地址转换"}},[a._v("#")]),a._v(" 逻辑地址、物理地址转换")]),a._v(" "),s("p",[s("strong",[a._v("物理地址 = 段基地址 << 4 + 偏移地址")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/5f6126651c2f92a12a399a23042e32e90604a3789775ee239e68fd6f8b9ef288.png",alt:"例题"}})]),a._v(" "),s("h4",{attrs:{id:"堆栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈"}},[a._v("#")]),a._v(" 堆栈")]),a._v(" "),s("p",[a._v("堆栈：")]),a._v(" "),s("ul",[s("li",[a._v("特定的存储区，访问该存储区一般需要按照专门的规则进行操作")]),a._v(" "),s("li",[a._v("主要用于暂存数据以及在过程调用或处理中断时保存断点信息")]),a._v(" "),s("li",[a._v("一般分为"),s("strong",[a._v("专用堆栈存储器")]),a._v("和"),s("strong",[a._v("软件堆栈")]),a._v(" "),s("ul",[s("li",[a._v("专用堆栈存储器：按堆栈的工作方式专门设计的存储器")]),a._v(" "),s("li",[a._v("软件堆栈：由程序设计人员用软件在内存中划出的一块存储区作为堆栈来使用。8086/8088采用这种方式。\n堆栈组成：")])])]),a._v(" "),s("li",[s("strong",[a._v("栈底")]),a._v("：固定，是"),s("strong",[a._v("堆栈存储区最大地址单元")])]),a._v(" "),s("li",[s("strong",[a._v("栈顶")]),a._v("：浮动，是"),s("strong",[a._v("最后存入信息的存储单元")])]),a._v(" "),s("li",[a._v("栈顶指针 SP：指示栈顶单元")]),a._v(" "),s("li",[a._v("数据在堆栈中以字（16 bits）为单位小端存放")]),a._v(" "),s("li",[s("strong",[a._v("初始化时，SP = 栈底 + 2 = 堆栈长度")])]),a._v(" "),s("li",[a._v("堆栈长度 <= 64KB")]),a._v(" "),s("li",[a._v("SP 始终表示堆栈段基址与栈顶之间的距离")]),a._v(" "),s("li",[a._v("程序设置多个堆栈段")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/64c036d835f462697d02fab06b3524811e1605b5cd80c872d5aef524a496b8e4.png",alt:"堆栈"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/3232f210c17ae3c8dcf5384bf31e3a457ab22a7a88caa61a1c862f07d3c62488.png",alt:"例题"}})]),a._v(" "),s("h3",{attrs:{id:"_8088-系统总线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088-系统总线"}},[a._v("#")]),a._v(" 8088 系统总线")]),a._v(" "),s("p",[a._v("总线 "),s("code",[a._v("Bus")]),a._v("：是一组"),s("strong",[a._v("导线")]),a._v("和相关的"),s("strong",[a._v("控制、驱动电路")]),a._v("的集合，它是计算机系统各部件之间"),s("strong",[a._v("传输地址、数据和控制信息")]),a._v("的通道。")]),a._v(" "),s("p",[a._v("分类：")]),a._v(" "),s("ul",[s("li",[a._v("地址总线 AB")]),a._v(" "),s("li",[a._v("数据总线 DB")]),a._v(" "),s("li",[a._v("控制总线 CB")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/77fefbfe1c701322f95e03a68a9212d17f7de87ad156678cc4add7ee1d9b6665.png",alt:"最小模式下的系统总线"}})]),a._v(" "),s("p",[a._v("最小模式下不需要 8288 总线控制器，而最大模式下需要。")]),a._v(" "),s("ul",[s("li",[a._v("8282：锁存器，连接地址线（因为要和数据线复用，所以要配合 ALE 将地址存进锁存器）")]),a._v(" "),s("li",[a._v("8284：时钟发生器")]),a._v(" "),s("li",[a._v("8286：双向总线驱动器，连接（内外部的）数据总线")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/99150753542d61ed4eb265a6a2dd0cd31be1d9d30ddc3bbfbf4ed264a76d7563.png",alt:"最大模式下的系统总线"}})]),a._v(" "),s("ul",[s("li",[a._v("8288：总线控制器，支持 CPU")])]),a._v(" "),s("h4",{attrs:{id:"总线时序、总线周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总线时序、总线周期"}},[a._v("#")]),a._v(" *****总线时序、总线周期")]),a._v(" "),s("ul",[s("li",[a._v("时序：CPU各引脚信号在时间上的关系")]),a._v(" "),s("li",[a._v("总线周期：CPU 完成一次访问内存(或I/O接口)操作所需要的时间\n"),s("ul",[s("li",[a._v("一个总线周期至少包括 4 个时钟周期")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/64806a8d406e61c0d8767705627eb3d62880eb95146547c02b9069fa3f1e3081.png",alt:"8088最小模式下的读周期"}})]),a._v(" "),s("ul",[s("li",[a._v("T1上 输出地址")]),a._v(" "),s("li",[a._v("T1下 锁地址")]),a._v(" "),s("li",[a._v("T2 输出状态，设置 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("R")]),s("mi",[a._v("D")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{RD}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("、"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("D")]),s("mi",[a._v("E")]),s("mi",[a._v("N")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{DEN}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[a._v("E")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])])],1),a._v(" "),s("li",[a._v("T3 输入数据")]),a._v(" "),s("li",[a._v("T4 复位，关状态输出")])]),a._v(" "),s("p",[a._v("但这个状态在最小模式中没有用，在最大模式中才会用到（")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/b548bde2652a6b919ff10a3ca85fbe324b33efbaf64d64fe059b59982ee3c548.png",alt:"8088最小模式下的写周期"}})]),a._v(" "),s("p",[a._v("写的区别除了 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("W")]),s("mi",[a._v("R")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{WR}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("W")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("、"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("D")]),s("mi",[a._v("T")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mi",[a._v("R")]),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("DT/\\overline{R}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("D")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v("、外，还有 AD 线在地址输出结束后必须立即进行数据输出。")],1),a._v(" "),s("h3",{attrs:{id:"ia-32-微处理器和工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32-微处理器和工作方式"}},[a._v("#")]),a._v(" IA-32 微处理器和工作方式")]),a._v(" "),s("p",[a._v("Intel公司将 80286 之后的 80X86 32 位微处理器称为 IA(Intel Architecture)-32 结构（现在是 AMD64）")]),a._v(" "),s("h4",{attrs:{id:"ia-32-微处理器历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32-微处理器历史"}},[a._v("#")]),a._v(" IA-32 微处理器历史")]),a._v(" "),s("p",[a._v("应该不是重点，所以就比较略了。")]),a._v(" "),s("h5",{attrs:{id:"_80286"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_80286"}},[a._v("#")]),a._v(" 80286")]),a._v(" "),s("ul",[s("li",[a._v("实地址模式、虚地址保护模式")]),a._v(" "),s("li",[a._v("CPU 被分为：\n"),s("ul",[s("li",[a._v("总线部件 "),s("code",[a._v("BU")])]),a._v(" "),s("li",[a._v("地址部件 "),s("code",[a._v("AU")])]),a._v(" "),s("li",[a._v("执行部件 "),s("code",[a._v("EU")])]),a._v(" "),s("li",[a._v("指令部件 "),s("code",[a._v("IU")])])])])]),a._v(" "),s("h5",{attrs:{id:"_80386"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_80386"}},[a._v("#")]),a._v(" 80386")]),a._v(" "),s("ul",[s("li",[a._v("实地址模式、保护模式和虚拟 8086 模式")]),a._v(" "),s("li",[a._v("CPU 被分为：\n"),s("ul",[s("li",[a._v("总线接口单元 "),s("code",[a._v("BIU")])]),a._v(" "),s("li",[a._v("指令预取单元 "),s("code",[a._v("IPU")])]),a._v(" "),s("li",[a._v("指令译码单元 "),s("code",[a._v("IDU")])]),a._v(" "),s("li",[a._v("执行单元 "),s("code",[a._v("EU")])]),a._v(" "),s("li",[a._v("分段单元 "),s("code",[a._v("SU")])]),a._v(" "),s("li",[a._v("分页单元 "),s("code",[a._v("PU")])])])]),a._v(" "),s("li",[a._v("分页存储")])]),a._v(" "),s("h5",{attrs:{id:"_80486"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_80486"}},[a._v("#")]),a._v(" 80486")]),a._v(" "),s("ul",[s("li",[a._v("突发传送方式（成块数据传送）")])]),a._v(" "),s("h5",{attrs:{id:"pentium"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pentium"}},[a._v("#")]),a._v(" Pentium")]),a._v(" "),s("ul",[s("li",[a._v("与80X86系列微处理器兼容")]),a._v(" "),s("li",[a._v("RISC型超标量结构（处理器包含多个指令单元和指令流水线）")]),a._v(" "),s("li",[a._v("高性能浮点运算器")]),a._v(" "),s("li",[a._v("双重分离式高速缓存（分离指令缓存和数据缓存）")]),a._v(" "),s("li",[a._v("64位数据总线")]),a._v(" "),s("li",[a._v("分支指令预测")]),a._v(" "),s("li",[a._v("常用指令固化与微代码改进（把常用的指令改用硬件实现，而不使用微程序方式）")]),a._v(" "),s("li",[a._v("系统管理方式程序 "),s("code",[a._v("SMM")]),a._v("（电源管理、为操作系统和正在运行的程序提供安全性）")])]),a._v(" "),s("h4",{attrs:{id:"ia-32-主要寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32-主要寄存器"}},[a._v("#")]),a._v(" IA-32 主要寄存器")]),a._v(" "),s("p",[a._v("通用寄存器：8 个 32 位通用寄存器")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/053fb371fb6454e749e0b163a18e8e20a4f10f5ceb7a3dd32f021e19c821f50f.png",alt:"通用寄存器"}})]),a._v(" "),s("p",[a._v("指令指针和标志寄存器：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/48c324c8082d27de0d88346a4f03c24cb3b9da3e5e30b1b3f1a265a52aeb198c.png",alt:"指令指针和标志寄存器"}})]),a._v(" "),s("p",[a._v("段寄存器和系统地址寄存器：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/185bcf860d26194ac5ff1dcc95bc396fdec6ee583de45f5150c77e8e38bfd9f5.png",alt:"段寄存器和系统地址寄存器"}})]),a._v(" "),s("p",[a._v("控制寄存器：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/97454c165ea943f277fbbf346f091226dd54d155a0678fdd453919ae592e4780.png",alt:"控制寄存器"}})]),a._v(" "),s("h4",{attrs:{id:"ia-32-处理器工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32-处理器工作方式"}},[a._v("#")]),a._v(" IA-32 处理器工作方式")]),a._v(" "),s("h5",{attrs:{id:"实模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实模式"}},[a._v("#")]),a._v(" 实模式")]),a._v(" "),s("ul",[s("li",[a._v("兼容 8086")]),a._v(" "),s("li",[a._v("32条地址线中只有低20条地址线起作用，可寻址1MB的物理地址空间")]),a._v(" "),s("li",[a._v("无多任务处理")])]),a._v(" "),s("h5",{attrs:{id:"保护模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保护模式"}},[a._v("#")]),a._v(" 保护模式")]),a._v(" "),s("ul",[s("li",[a._v("32条地址可寻址4GB的物理存储器空间")]),a._v(" "),s("li",[a._v("支持虚拟存储器功能。每个任务运行可以有16K个段，每个段最大为4GB，一个任务最大可使用64TB虚拟地址空间")]),a._v(" "),s("li",[a._v("程序运行分为4个特权等级，操作系统核心运行在最高特权级0，用户程序运行在最低特权级3")])]),a._v(" "),s("h5",{attrs:{id:"虚拟-8086-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-8086-模式"}},[a._v("#")]),a._v(" 虚拟 8086 模式")]),a._v(" "),s("ul",[s("li",[a._v("在虚拟8086方式下，IA-32微处理器总体上是工作在保护虚地址方式，支持多用户多任务操作系统。其中，有的任务可以工作在虚拟8086方式，运行DOS应用程序。")])]),a._v(" "),s("h5",{attrs:{id:"保护模式下的存储器访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保护模式下的存储器访问"}},[a._v("#")]),a._v(" 保护模式下的存储器访问")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/2fbb6ff64908cc7b0d609d1ba77d9a3353734cdcb4e49274614eceb091f15273.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/d857aaca3e3dff84edbd0a230fe994898971b8d736b5cf940ef3848e12988443.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/9b4089dedd698d5d3c336282839346d84df2928f47f32a7e9eec7da59bfed41d.png",alt:""}}),a._v("\n![]](/images/aa43a063892450e1db26d246ecfdcb8633f71176b8c300c906f4fc07370f17d3.png)\n"),s("img",{attrs:{src:"/images/a4d3d11ebac6286de0ea91217c9941d71fce115a37ebc3c65a91302fe8cda623.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/c298ac75a7755956f0b65e0222ade4838590cb5b0a50fbe9c0f103803996a4c7.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/313ab77109d17290d961fac8dab9a4dca36e1ab3282568bcecea8c4949e1b12f.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/9d6ae3513ebf9224b7268780a93e05b6b4a1d70762be0212b6e991f7934fc20a.png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"本章小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本章小结"}},[a._v("#")]),a._v(" 本章小结")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/f7908757260263ea785a2ea08addf225754d8b67ea31c51c5dd02b93306dce11.png",alt:"本章小结"}})]),a._v(" "),s("p",[a._v("8088 相关知识：")]),a._v(" "),s("ul",[s("li",[a._v("地址线、数据线、控制线若干")]),a._v(" "),s("li",[a._v("16 位寄存器（各个的中文？）\n"),s("ul",[s("li",[a._v("8个通用寄存器：AX、BX、CX、DX、SP、BP、SI、DI")]),a._v(" "),s("li",[a._v("4个段寄存器：CS、DS、ES、SS")]),a._v(" "),s("li",[a._v("2个控制寄存器：IP、FLAGS (CF、SF、AF、PF、OF、ZF、IF、TF、DF)")])])]),a._v(" "),s("li",[a._v("存储器\n"),s("ul",[s("li",[a._v("32-bit 逻辑地址 = 16-bit 段基地址 "),s("code",[a._v("拼接")]),a._v(" 16-bit 段内地址")]),a._v(" "),s("li",[a._v("20-bit 物理地址：16-bit 段基地址 "),s("code",[a._v("*16+")]),a._v(" 16-bit 偏移地址")])])]),a._v(" "),s("li",[a._v("堆栈：栈底固定，为地址最大值；以字为单位")])]),a._v(" "),s("h2",{attrs:{id:"第三章-指令系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三章-指令系统"}},[a._v("#")]),a._v(" 第三章 指令系统")]),a._v(" "),s("h3",{attrs:{id:"概述-略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述-略"}},[a._v("#")]),a._v(" 概述（略）")]),a._v(" "),s("h3",{attrs:{id:"寻址方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寻址方式"}},[a._v("#")]),a._v(" 寻址方式")]),a._v(" "),s("p",[a._v("这里讲的是 8086 的寻址方式，《计算机组成原理》讲的是 MIPS 的，因此会有区别。")]),a._v(" "),s("p",[a._v("除了立即寻址、寄存器寻址、隐含寻址，其余寻址方式都是得到 "),s("code",[a._v("偏移地址")]),a._v(" 以后 "),s("code",[a._v("+16*段地址")]),a._v(" 得出，并且这些方式都会加 "),s("code",[a._v("[ ]")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"立即寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#立即寻址"}},[a._v("#")]),a._v(" 立即寻址")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/81aee00541b6ed26f57a285dfca95ed8bfc39ea105dbbbebf22a990d8eb52243.png",alt:"立即寻址"}})]),a._v(" "),s("h4",{attrs:{id:"寄存器寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寄存器寻址"}},[a._v("#")]),a._v(" 寄存器寻址")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/080823908581cf98753c95657c5977caa9527af6badf435488b8a85f259ebf59.png",alt:"寄存器寻址"}})]),a._v(" "),s("h4",{attrs:{id:"直接寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接寻址"}},[a._v("#")]),a._v(" 直接寻址")]),a._v(" "),s("p",[a._v("偏移地址 = 立即数")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/cd909019497371be41e17abadc1a7d8a5d78f524873fe4445d3ecb2ddea1148d.png",alt:"直接寻址"}})]),a._v(" "),s("ul",[s("li",[a._v("直接寻址下，存储器操作数的长度由指令中另一个操作数的长度决定。如 "),s("code",[a._v("MOV [1234H], CX")]),a._v(" "),s("code",[a._v("MOV CL, [1234H]")])]),a._v(" "),s("li",[a._v("直接寻址方式下，操作数的段地址默认为数据段\n"),s("ul",[s("li",[a._v("但允许段重设，即由指令定义段，说明数据存放在其他逻辑段中")]),a._v(" "),s("li",[s("code",[a._v("MOV AX, ES:[1200H]")]),a._v(" 指令将 "),s("code",[a._v("ES:[1200H]")]),a._v(" 的数存入 "),s("code",[a._v("AX")])]),a._v(" "),s("li",[a._v("这种情况称为段超越，所加的段寄存器叫段前缀")])])])]),a._v(" "),s("h4",{attrs:{id:"寄存器间接寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寄存器间接寻址"}},[a._v("#")]),a._v(" 寄存器间接寻址")]),a._v(" "),s("p",[a._v("偏移地址 = 寄存器值")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/4a158b764ea4be17e2ce448671ea8b29a4fcf7f42685e7e20c2466b98e9c7bab.png",alt:"寄存器间接寻址"}})]),a._v(" "),s("ul",[s("li",[a._v("“偏移地址”只能来自于间址寄存器(BX, BP, SI, DI)\n"),s("ul",[s("li",[a._v("间址寄存器必须为 16-bit registers")])])]),a._v(" "),s("li",[a._v("“段地址”取决于基址寄存器\n"),s("ul",[s("li",[s("strong",[a._v("BX, SI, DI -> DS")])]),a._v(" "),s("li",[s("strong",[a._v("BP -> SS")])]),a._v(" "),s("li",[a._v("但允许段超越")])])])]),a._v(" "),s("p",[a._v("记忆上，就记 BP "),s("code",[a._v("base pointer")]),a._v(" 作用类似于 SP "),s("code",[a._v("stack pointer")]),a._v("，都是用来指栈的某个位置。其余都是指 DS。")]),a._v(" "),s("h4",{attrs:{id:"寄存器相对寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寄存器相对寻址"}},[a._v("#")]),a._v(" 寄存器相对寻址")]),a._v(" "),s("p",[a._v("偏移地址 = 寄存器值 + 立即数")]),a._v(" "),s("ul",[s("li",[a._v("寄存器值同样来自于 BX、BP、SI 或 DI")])]),a._v(" "),s("h4",{attrs:{id:"基址-变址寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基址-变址寻址"}},[a._v("#")]),a._v(" 基址-变址寻址")]),a._v(" "),s("p",[a._v("偏移地址 = 基址寄存器值 + 变址寄存器值")]),a._v(" "),s("ul",[s("li",[a._v("“段地址”取决于基址寄存器\n"),s("ul",[s("li",[s("strong",[a._v("BX -> DS")])]),a._v(" "),s("li",[s("strong",[a._v("BP -> SS")]),a._v("（在计算题中，不要无脑使用 "),s("code",[a._v("DS")]),a._v(" 作段地址！！！BP 需要使用 SS）")])])]),a._v(" "),s("li",[a._v("常用于一维数组")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/81f301c50d50d3cab2d8782fbef2224215544487edc8c2f1a6b1ba875d45eef0.png",alt:"例"}})]),a._v(" "),s("h4",{attrs:{id:"基址-变址-相对寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基址-变址-相对寻址"}},[a._v("#")]),a._v(" 基址-变址-相对寻址")]),a._v(" "),s("p",[a._v("偏移地址 = 基址寄存器值 + 变址寄存器值 + 立即数")]),a._v(" "),s("ul",[s("li",[a._v("段地址同上")]),a._v(" "),s("li",[a._v("常用于二维数组")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/50517c34007f40bc1e32bd967274f7cae5a7056bc92b41a514d7ae2edecea51e.png",alt:"例"}})]),a._v(" "),s("h4",{attrs:{id:"五种寻址方式的总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五种寻址方式的总结"}},[a._v("#")]),a._v(" 五种寻址方式的总结")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/9495b586ce3ba38f7e4915566d352552ccdb4f13299c0f77c495008bc6e56b58.png",alt:"五种寻址方式的总结"}})]),a._v(" "),s("p",[a._v("除立即寻址、寄存器寻址、隐含寻址外，其余都是计算得到偏移地址，然后在 "),s("strong",[a._v("BIU 中的地址加法器")]),a._v("运算（"),s("code",[a._v("+16*基地址")]),a._v("）得到物理地址。")]),a._v(" "),s("h4",{attrs:{id:"隐含寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐含寻址"}},[a._v("#")]),a._v(" 隐含寻址")]),a._v(" "),s("p",[a._v("指令中隐含了一个或两个操作数的地址，即操作数在默认的地址中。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MUL "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AX = AL * BL")]),a._v("\n")])])]),s("h3",{attrs:{id:"数据传送指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据传送指令"}},[a._v("#")]),a._v(" 数据传送指令")]),a._v(" "),s("h4",{attrs:{id:"通用数据传送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用数据传送"}},[a._v("#")]),a._v(" 通用数据传送")]),a._v(" "),s("p",[a._v("注意："),s("strong",[a._v("该类指令的执行对标志位不产生影响")])]),a._v(" "),s("h5",{attrs:{id:"一般数据传送指令-mov"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一般数据传送指令-mov"}},[a._v("#")]),a._v(" 一般数据传送指令 MOV")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV dest, src\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 读取 src 并保存到 dest")]),a._v("\n")])])]),s("p",[a._v("注意事项：")]),a._v(" "),s("ul",[s("li",[a._v("各 FLAGS 一般不作为操作数在指令中出现")]),a._v(" "),s("li",[a._v("两操作数长度必须相同")]),a._v(" "),s("li",[s("a",{attrs:{href:"#offset-%E8%BF%90%E7%AE%97%E7%AC%A6"}},[s("code",[a._v("OFFSET")])]),a._v("、"),s("a",{attrs:{href:"#seg-%E8%BF%90%E7%AE%97%E7%AC%A6"}},[s("code",[a._v("SEG")])]),a._v(" 等运算符得到的值可视为立即数")]),a._v(" "),s("li",[a._v("某些方向是不能传输数据的，具体看图")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/19dd0bb079591ffd2724c014246374d23fbad8fd1a3863a1d2d895ca61b35062.png",alt:"MOV指令的传送方向示意图"}})]),a._v(" "),s("p",[a._v("可以用两条记忆：")]),a._v(" "),s("ol",[s("li",[a._v("立即数和 "),s("code",[a._v("CS")]),a._v(" 不能做 "),s("code",[a._v("dest")]),a._v("（显然）")]),a._v(" "),s("li",[a._v("立即数和段寄存器如果想传送到别的段寄存器，必须经过通用寄存器中转。")])]),a._v(" "),s("p",[a._v("顺便一提，立即数可以不经过寄存器、直接传入存储器。但由于立即数的长度不定，可能需要显式指明存储器的长度，如 "),s("code",[a._v("MOV BYTE PTR[BX], 233H")]),a._v("。参见 "),s("a",{attrs:{href:"#PTR-%E8%BF%90%E7%AE%97%E7%AC%A6"}},[a._v("PTR 运算符")]),a._v("。")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("例题：判断下列指令的正确性：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误，长度不一致")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("05H")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 对")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误，同时使用两个基址寄存器")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000H")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误，常数不能直接送段寄存器")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("09H")]),a._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 对，立即数位数不够，会自动补齐")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1200H")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误，dst 和 src 不能同时为存储器")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 对")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误，段寄存器之间不能传送")]),a._v("\n")])])]),s("p",[a._v("例：将符号“*”的ASCII码2AH送入内存数据段中以变址指针DI所指的单元再偏移100个字节单元中：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'*'")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n")])])]),s("h5",{attrs:{id:"堆栈操作指令-push-pop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈操作指令-push-pop"}},[a._v("#")]),a._v(" 堆栈操作指令 PUSH POP")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("PUSH OPRD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 压栈")]),a._v("\nPOP OPRD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 出栈")]),a._v("\n")])])]),s("p",[a._v("注意事项：")]),a._v(" "),s("ul",[s("li",[a._v("堆栈操作以字为单位，"),s("strong",[a._v("故操作数必为 16 位")])]),a._v(" "),s("li",[a._v("操作数不能是立即数")]),a._v(" "),s("li",[a._v("操作数可以来自寄存器或存储器\n"),s("ul",[s("li",[a._v("若为存储器操作数，需要声明为字存储单元")])])]),a._v(" "),s("li",[a._v("不能 POP 到 CS，这是上面的知识")]),a._v(" "),s("li",[a._v("PUSH 顺序是从高地址向低地址，看下图")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/4cdfa19a2e508875f011987428fe17c8a5942632dc0454993f043e233e66c906.png",alt:"压栈过程"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/3e47c7ad9897cd201bca3cb98b632a54d0726fed5bf6e84033770d34eaeb9f3d.png",alt:"出栈过程"}})]),a._v(" "),s("h5",{attrs:{id:"交换指令-xchg"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交换指令-xchg"}},[a._v("#")]),a._v(" 交换指令 XCHG")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; XCHG REG/MEM, REG/MEM")]),a._v("\nXCHG  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("\nXCHG  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n")])])]),s("p",[a._v("注意事项：")]),a._v(" "),s("ul",[s("li",[a._v("两操作数至少有一个是寄存器操作数")]),a._v(" "),s("li",[a._v("不允许使用段寄存器")])]),a._v(" "),s("h5",{attrs:{id:"字位扩展指令-cbw-cwd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字位扩展指令-cbw-cwd"}},[a._v("#")]),a._v(" 字位扩展指令 CBW CWD")]),a._v(" "),s("ul",[s("li",[a._v("将带符号数的符号位 (0/1) 扩展 "),s("code",[a._v("Convert")]),a._v(" 到高位；")]),a._v(" "),s("li",[a._v("零操作数指令，采用隐含寻址，隐含的操作数为 AX 或者 “AX与DX”")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CBW\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将 AL 的符号位扩展到 AH (Convert Byte to Word)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 若 AL 最高位=1，则执行后 AH = FFH")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 若 AL 最高位=0，则执行后 AH = 00H")]),a._v("\n")])])]),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CWD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将 AX 符号位扩展到 DX (Convert Word to Doubleword)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 若 AX 最高位=1，则执行后 DX = FFFFH")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 若 AX 最高位=0，则执行后 DX = 0000H")]),a._v("\n")])])]),s("p",[a._v("判断以下指令执行结果：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("44H")]),a._v("\nCBW\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AX = 0044H")]),a._v("\n\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0AFDEH")]),a._v("\nCWD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DX = 0000H")]),a._v("\n\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("86H")]),a._v("\nCBW\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AX = FF86H")]),a._v("\n")])])]),s("h4",{attrs:{id:"输入输出指令-in-out"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入输出指令-in-out"}},[a._v("#")]),a._v(" 输入输出指令 IN OUT")]),a._v(" "),s("ul",[s("li",[a._v("专门面向I/O端口操作的指令")]),a._v(" "),s("li",[a._v("输入指令："),s("code",[a._v("IN acc, PORT")])]),a._v(" "),s("li",[a._v("输出指令："),s("code",[a._v("OUT PORT, acc")])]),a._v(" "),s("li",[s("code",[a._v("PORT")]),a._v(" 为端口地址，"),s("code",[a._v("acc")]),a._v(" 为累加寄存器 AL 或 AX")])]),a._v(" "),s("p",[a._v("可以认为指令的第一个参数是目的地址 "),s("code",[a._v("dest")]),a._v("，这和 "),s("code",[a._v("MOV")]),a._v(" 保持一致。")]),a._v(" "),s("p",[s("code",[a._v("PORT")]),a._v(" 的寻址方式：")]),a._v(" "),s("ul",[s("li",[a._v("直接寻址\n"),s("ul",[s("li",[a._v("端口地址为 8 位时，指令中直接给出 8 位端口地址")]),a._v(" "),s("li",[a._v("可寻址 256 个端口")])])]),a._v(" "),s("li",[a._v("间接寻址\n"),s("ul",[s("li",[a._v("端口地址为 16 位时，指令中的端口地址必须由 DX 指定")]),a._v(" "),s("li",[a._v("可寻址 64K 个端口")])])])]),a._v(" "),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("IN "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80H")]),a._v("\n\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2400H")]),a._v("\nIN "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v("\n\nOUT "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("35H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n")])])]),s("h4",{attrs:{id:"地址传送指令-lea-lds-les"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#地址传送指令-lea-lds-les"}},[a._v("#")]),a._v(" 地址传送指令 LEA LDS LES")]),a._v(" "),s("h5",{attrs:{id:"取偏移地址指令-lea"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取偏移地址指令-lea"}},[a._v("#")]),a._v(" 取偏移地址指令 LEA")]),a._v(" "),s("p",[a._v("LEA (Load Effective Address)：将一个存储单元的 16 位偏移地址取出送 16 位通用寄存器（常为间址寄存器）。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("LEA REG, MEM\n")])])]),s("p",[a._v("类似于 "),s("code",[a._v("MOV")]),a._v("，但 "),s("code",[a._v("MOV")]),a._v(" 取的是存储器值，而 "),s("code",[a._v("LEA")]),a._v(" 取的是存储器的偏移地址。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/8fe69e6b5caee4cf1b7ed605fa1c7c1173a0d5ab42f9bf0526e616fa68d19ee9.png",alt:"MOV 和 LEA 对比"}})]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", DATA1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 这里的 DATA1 是变量")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; SI = DATA1 中的内容")]),a._v("\n\nLEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", DATA1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; SI = DATA1 的偏移地址")]),a._v("\n\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BX = BX 作为偏移地址对应的值")]),a._v("\n\nLEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BX 不变")]),a._v("\n")])])]),s("p",[a._v("变量的知识见"),s("a",{attrs:{href:"#%E5%8F%98%E9%87%8F"}},[a._v("变量")]),a._v("。")]),a._v(" "),s("p",[a._v("看起来 "),s("code",[a._v("LEA")]),a._v(" 有点蠢，但其是有存在意义的：当寻址方式比较复杂（如"),s("a",{attrs:{href:"#%E5%9F%BA%E5%9D%80-%E5%8F%98%E5%9D%80-%E7%9B%B8%E5%AF%B9%E5%AF%BB%E5%9D%80"}},[a._v("基址-变址-相对寻址")]),a._v("），"),s("code",[a._v("LEA")]),a._v(" 能一行获取其地址，但 "),s("code",[a._v("MOV")]),a._v(" 指令则不行，因为 "),s("code",[a._v("MOV")]),a._v(" "),s("a",{attrs:{href:"https://stackoverflow.com/questions/1658294/whats-the-purpose-of-the-lea-instruction",target:"_blank",rel:"noopener noreferrer"}},[a._v("What's the purpose of the LEA instruction? - Stack Overflow"),s("OutboundLink")],1),a._v("。")]),a._v(" "),s("p",[a._v("一道简单的例题：将数据段中首地址为 MEM1 的 50 字节的数据传送到同一逻辑段首地址为 MEM2 的区域存放。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/d28ed269b600f75c3d3596cf6fd508f4d27b6668606c7e3ca96cbdec4290ecd3.png",alt:"流程图"}})]),a._v(" "),s("p",[a._v("代码如下：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", MEM1\n      LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(", MEM2\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("50")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT:")]),a._v(" MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n      INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\n      INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("\n      DEC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n      JNZ NEXT\n      HLT           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; halt，暂停执行")]),a._v("\n")])])]),s("p",[s("s",[a._v("眼睛：我没学会")]),a._v(" "),s("s",[a._v("脑子：我也没学会")])]),a._v(" "),s("p",[a._v("看不懂就下来再看看。")]),a._v(" "),s("p",[s("code",[a._v("LEA")]),a._v(" 不访问存储器，而下面的 "),s("code",[a._v("LDS")]),a._v("、"),s("code",[a._v("LES")]),a._v(" 要访问存储器。")]),a._v(" "),s("h5",{attrs:{id:"装入地址指针指令-lds-les"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装入地址指针指令-lds-les"}},[a._v("#")]),a._v(" 装入地址指针指令 LDS LES")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("LDS DEST, SRC\nLES DEST, SRC\n")])])]),s("p",[a._v("作用：把 "),s("code",[a._v("SRC")]),a._v(" 存储单元开始的 4 个字节单元的内容送入 "),s("code",[a._v("DEST")]),a._v(" 通用寄存器和段寄存器 "),s("code",[a._v("DS")]),a._v("（LDS指令）或 "),s("code",[a._v("ES")]),a._v("（LES指令）")]),a._v(" "),s("ul",[s("li",[a._v("低 16 位送 "),s("code",[a._v("DEST")]),a._v("，一般是送 "),s("code",[a._v("SI")]),a._v(" 或 "),s("code",[a._v("DI")])]),a._v(" "),s("li",[a._v("高 15 位送 "),s("code",[a._v("DS")]),a._v("/"),s("code",[a._v("ES")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/ffe42aec65bbfba62190672930bf7d56bc382215b41cbbd5cd4b2e2d22ea5c62.png",alt:"例题"}})]),a._v(" "),s("p",[a._v("执行后，"),s("code",[a._v("SI=0020H")]),a._v("，"),s("code",[a._v("DS=5030H")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"标志位操作指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标志位操作指令"}},[a._v("#")]),a._v(" 标志位操作指令")]),a._v(" "),s("h5",{attrs:{id:"lahf-sahf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lahf-sahf"}},[a._v("#")]),a._v(" LAHF SAHF")]),a._v(" "),s("ul",[s("li",[a._v("LAHF (Load Flags to AH)：将 FLAGS 的低 8 位装入 AH")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/b5c6d77b0f09db79bc86f1f25cb8cb26b0528094b205b42684cc7b04bbe67b2a.png",alt:"LAHF"}})]),a._v(" "),s("ul",[s("li",[a._v("SAHF (Save Flags to AH)：执行与LAHF相反的操作")])]),a._v(" "),s("h5",{attrs:{id:"pushf-popf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pushf-popf"}},[a._v("#")]),a._v(" PUSHF POPF")]),a._v(" "),s("ul",[s("li",[a._v("PUSHF：将 FLAGS 压栈")]),a._v(" "),s("li",[a._v("POPF：将栈顶弹出给 FLAGS")])]),a._v(" "),s("h3",{attrs:{id:"算术运算类指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术运算类指令"}},[a._v("#")]),a._v(" 算术运算类指令")]),a._v(" "),s("h4",{attrs:{id:"标志位影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标志位影响"}},[a._v("#")]),a._v(" 标志位影响")]),a._v(" "),s("p",[a._v("这类指令的执行大多对状态标志位会产生影响。")]),a._v(" "),s("blockquote",[s("p",[a._v("参考：http://www5.zzu.edu.cn/qwfw/info/1044/2483.htm"),s("br"),a._v("\n教材上并没有写 "),s("code",[a._v("AND")]),a._v(" 指令会改变 "),s("code",[a._v("SF")]),a._v(" 等，然后练习题考了hhhhh，真离谱")])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("影响标志位")]),a._v(" "),s("th",[a._v("影响六个 ("),s("code",[a._v("CF")]),a._v(", "),s("code",[a._v("SF")]),a._v(", "),s("code",[a._v("AF")]),a._v(", "),s("code",[a._v("ZF")]),a._v(", "),s("code",[a._v("PF")]),a._v(", "),s("code",[a._v("OF")]),a._v(")")]),a._v(" "),s("th",[a._v("影响五个 (不影响 "),s("code",[a._v("CF")]),a._v(")")]),a._v(" "),s("th",[a._v("影响五个 (不影响 "),s("code",[a._v("AF")]),a._v(")")]),a._v(" "),s("th",[a._v("影响两个 ("),s("code",[a._v("CF")]),a._v(", "),s("code",[a._v("OF")]),a._v(")")]),a._v(" "),s("th",[a._v("影响一个 ("),s("code",[a._v("CF")]),a._v(")")]),a._v(" "),s("th",[a._v("不影响")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("指令")]),a._v(" "),s("td",[s("code",[a._v("ADD/ADC/SUB/SBB/NEG/CMP")]),a._v(", "),s("code",[a._v("CMPS/SCAS")])]),a._v(" "),s("td",[s("code",[a._v("INC/DEC")])]),a._v(" "),s("td",[s("code",[a._v("AND/OR/XOR/TEST")]),a._v(", "),s("code",[a._v("SAL/SAR/SHL/SHR")])]),a._v(" "),s("td",[s("code",[a._v("MUL/IMUL")])]),a._v(" "),s("td",[s("code",[a._v("ROL/ROR/RCL/RCR")])]),a._v(" "),s("td",[s("code",[a._v("DIV/IDIV")]),a._v(" "),s("code",[a._v("NOT")]),a._v(", "),s("code",[a._v("MOV")]),a._v(", "),s("code",[a._v("IN/OUT")])])])])]),a._v(" "),s("h4",{attrs:{id:"加法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加法"}},[a._v("#")]),a._v(" 加法")]),a._v(" "),s("p",[a._v("加法指令对操作数的要求与 MOV 指令基本相同：")]),a._v(" "),s("blockquote",[s("ol",[s("li",[a._v("源操作数可以是通用寄存器、存储单元或立即数")]),a._v(" "),s("li",[a._v("目的操作数只能是通用寄存器或存储单元，不能是立即数")]),a._v(" "),s("li",[a._v("二者不能同时来自存储器。")])])]),a._v(" "),s("h5",{attrs:{id:"带符号加法-add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带符号加法-add"}},[a._v("#")]),a._v(" 带符号加法 ADD")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("ADD OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; OPRD1 = OPRD1 + OPRD2")]),a._v("\n")])])]),s("p",[a._v("目的地址依旧是第一个，类似于 "),s("code",[a._v("MOV")]),a._v("。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("ADD")]),a._v(" 指令的执行对全部 6 个状态标志位都产生影响")])]),a._v(" "),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("78H")]),a._v("\nADD "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("99H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 试写出指令执行后的结果")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"/images/d9203225ce9f68a97b811f0b7a0036e74a9aa84c55827106925f29e9ffe02b03.png",alt:"结果及标志位"}})]),a._v(" "),s("h5",{attrs:{id:"带进位加法-adc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带进位加法-adc"}},[a._v("#")]),a._v(" 带进位加法 ADC")]),a._v(" "),s("p",[a._v("ADC (ADd with Carry) 可用于实现多字节数（大数）相加。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("ADC OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; OPRD1 = CF + OPRD1 + OPRD2")]),a._v("\n")])])]),s("p",[a._v("例：求两个大数的和，两个数的长度为 20 字节，首地址为 "),s("code",[a._v("M1")]),a._v(" 和 "),s("code",[a._v("M2")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", M1\n      LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(", M2\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v("\n      CLC           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 使 CF = 0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT:")]),a._v(" MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      ADC "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n      INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; SI、DI 自增")]),a._v("\n      INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("\n      DEC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CX 自减")]),a._v("\n      JNZ NEXT      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; Jump if（当运算结果） Not Zero")]),a._v("\n      HLT\n")])])]),s("h5",{attrs:{id:"自增-inc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自增-inc"}},[a._v("#")]),a._v(" 自增 INC")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("INC OPRD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; OPRD = OPRD + 1")]),a._v("\n")])])]),s("ul",[s("li",[s("code",[a._v("OPRD")]),a._v(" 可以来自存储器，不能来自段寄存器或立即数")]),a._v(" "),s("li",[s("code",[a._v("INC")]),a._v(" 指令执行不影响 "),s("code",[a._v("CF")]),a._v(" 标志，只影响其他五个")])]),a._v(" "),s("p",[a._v("为什么 "),s("code",[a._v("INC")]),a._v("（以及 "),s("code",[a._v("DEC")]),a._v("）不影响 "),s("code",[a._v("CF")]),a._v(" 标志呢？据 "),s("a",{attrs:{href:"https://stackoverflow.com/questions/13435142/why-do-the-inc-and-dec-instructions-not-affect-the-carry-flag-cf",target:"_blank",rel:"noopener noreferrer"}},[a._v("Stack Overflow"),s("OutboundLink")],1),a._v("，这并不是为了节省成本，而是为了循环的 "),s("code",[a._v("i++")]),a._v(" 等不会影响到 "),s("code",[a._v("CF")]),a._v(" 标志位。上段 "),s("code",[a._v("ADC")]),a._v(" 处举的例子就很好的说明了这一点：如果 "),s("code",[a._v("INC")]),a._v(" 改变了 "),s("code",[a._v("CF")]),a._v("，程序必须在每次完成 "),s("code",[a._v("ADC")]),a._v(" 后存储 "),s("code",[a._v("CF")]),a._v(" 的状态，否则就会被 "),s("code",[a._v("INC")]),a._v(" 覆盖，代码会麻烦得多。")]),a._v(" "),s("h4",{attrs:{id:"减法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减法"}},[a._v("#")]),a._v(" 减法")]),a._v(" "),s("h5",{attrs:{id:"带符号减法-sub"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带符号减法-sub"}},[a._v("#")]),a._v(" 带符号减法 SUB")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("SUB OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; OPRD1 = OPRD1 - OPRD2")]),a._v("\n")])])]),s("ul",[s("li",[s("code",[a._v("SUB")]),a._v(" 指令的执行对全部 6 个状态标志位都产生影响（同 "),s("code",[a._v("ADD")]),a._v("）")])]),a._v(" "),s("h5",{attrs:{id:"带借位减法-sbb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带借位减法-sbb"}},[a._v("#")]),a._v(" 带借位减法 SBB")]),a._v(" "),s("p",[a._v("类似于 "),s("code",[a._v("ADC")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("SBB OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; OPRD1 = OPRD1 - OPRD2 - CF")]),a._v("\n")])])]),s("p",[a._v("SBB (SuBtraction with Borrow)：指令格式、对操作数的要求、对标志位的影响与 "),s("code",[a._v("SUB")]),a._v(" 指令完全一样")]),a._v(" "),s("h5",{attrs:{id:"自减-dec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自减-dec"}},[a._v("#")]),a._v(" 自减 DEC")]),a._v(" "),s("p",[a._v("类似于 "),s("code",[a._v("INC")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DEC OPRD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; OPRD = OPRD-1")]),a._v("\n")])])]),s("ul",[s("li",[s("code",[a._v("OPRD")]),a._v(" 不能是段寄存器或立即数")]),a._v(" "),s("li",[s("code",[a._v("DEC")]),a._v(" 不影响 "),s("code",[a._v("CF")])])]),a._v(" "),s("p",[a._v("例 1：实现一个计数循环程序，下面的代码正确吗？")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("     MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LOP:")]),a._v(" DEC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n     JNC LOP "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; Jump if Not CF")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误！ DEC 不影响 CF")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 程序会执行一次后停止（如果原来 CF = 1）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 或死循环 （如果原来 CF = 0）")]),a._v("\n")])])]),s("p",[a._v("例 2 是一个两层的嵌套循环：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("       MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT1:")]),a._v(" MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FFFFH")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT2:")]),a._v(" DEC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("\n       JNZ NEXT2\n       DEC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v("\n       JNZ NEXT1\n       HLT\n")])])]),s("h5",{attrs:{id:"求补-neg"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#求补-neg"}},[a._v("#")]),a._v(" 求补 NEG")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("NEG")]),a._v(" 将影响六个标志位")]),a._v(" "),s("li",[a._v("当且仅当操作数为 0 时，"),s("code",[a._v("CF")]),a._v(" = 0，结果不变（仍为 0）")]),a._v(" "),s("li",[a._v("当且仅当字节操作数为 -128 (80H) 或字操作数为 -32768 (8000H) 时，OF = 1，结果不变（仍为 -128 或 -32768）")])]),a._v(" "),s("h5",{attrs:{id:"比较-cmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较-cmp"}},[a._v("#")]),a._v(" 比较 CMP")]),a._v(" "),s("p",[a._v("只影响六个标志位，不会存储结果。常接 "),s("code",[a._v("JNZ")]),a._v(" "),s("code",[a._v("JNC")]),a._v(" 等语句实现条件跳转。")]),a._v(" "),s("p",[a._v("两个数大小比较：")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("code",[a._v("CMP AX, BX")])]),a._v(" "),s("th",[a._v("无符号数")]),a._v(" "),s("th",[a._v("有符号数")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("AX=BX")])]),a._v(" "),s("td",[s("code",[a._v("ZF=0")])]),a._v(" "),s("td",[s("code",[a._v("ZF=0")])])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("AX>BX")])]),a._v(" "),s("td",[s("code",[a._v("CF=0, ZF=0")])]),a._v(" "),s("td",[s("code",[a._v("OF=SF, ZF=0")])])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("AX<BX")])]),a._v(" "),s("td",[s("code",[a._v("CF=1, ZF=0")])]),a._v(" "),s("td",[s("code",[a._v("OF!=SF, ZF=0")])])]),a._v(" "),s("tr",[s("td",[a._v("可相关判断指令")]),a._v(" "),s("td",[s("code",[a._v("JA")]),a._v(" "),s("code",[a._v("JAE")]),a._v(" "),s("code",[a._v("JB")]),a._v(" "),s("code",[a._v("JBE")])]),a._v(" "),s("td",[s("code",[a._v("JG")]),a._v(" "),s("code",[a._v("JGE")]),a._v(" "),s("code",[a._v("JL")]),a._v(" "),s("code",[a._v("JLE")])])])])]),a._v(" "),s("p",[a._v("例题：在 20 个无符号数中找出最大的数，并将其存放在 MAX 单元中。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", MAX\n      LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", BUF\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AL 保存目前的最大值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT:")]),a._v(" INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\n      CMP "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("Al")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      JNC GOON       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CF=0 转移")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将更大的 [SI] 放进 AL")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("GOON:")]),a._v(" DEC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n      JNZ NEXT\n      MOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n      HLT\n")])])]),s("h4",{attrs:{id:"乘法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乘法"}},[a._v("#")]),a._v(" 乘法")]),a._v(" "),s("ul",[s("li",[a._v("运算结果长度是乘数的两倍，即 "),s("code",[a._v("8位->16位")]),a._v("，"),s("code",[a._v("16位->32位")])]),a._v(" "),s("li",[a._v("一个乘数和计算结果使用隐含寻址，隐含的是存放被乘数的累加寄存器 "),s("code",[a._v("AL")]),a._v(" 或 "),s("code",[a._v("AX")]),a._v("，及存放结果的 "),s("code",[a._v("AX")]),a._v(" 或 "),s("code",[a._v("DX")])]),a._v(" "),s("li",[a._v("乘法只影响 "),s("code",[a._v("OF")]),a._v("、"),s("code",[a._v("CF")]),a._v("；若运算结果的高半部分是无效数值，则 "),s("code",[a._v("OF=CF=0")]),a._v("，否则 "),s("code",[a._v("OF=CF=1")]),a._v(" "),s("ul",[s("li",[a._v("考虑 8 位乘 8 位，结果仍可以用 8 位存储的情况，此时 "),s("code",[a._v("OF=CF=0")])]),a._v(" "),s("li",[a._v("对于无符号乘法，当且仅当高半部分为全 0， "),s("code",[a._v("OF=CF=1")])]),a._v(" "),s("li",[a._v("对于有符号乘法，当且仅当高半部分为低半部分的符号扩展，"),s("code",[a._v("OF=CF=1")])]),a._v(" "),s("li",[a._v("若有符号乘法结果为 "),s("code",[a._v("00000000 11111111")]),a._v("，高半部分不是符号扩展，"),s("code",[a._v("CF=OF=0")]),a._v("。若在后续步骤只看后半部分，会导致原来的正值被（错误地）识别为负值")])])])]),a._v(" "),s("h5",{attrs:{id:"无符号乘法-mul"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无符号乘法-mul"}},[a._v("#")]),a._v(" 无符号乘法 MUL")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MUL OPRD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 字节运算：AX = AL * OPRD")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 字运算：  DX:AX = AX * OPRD")]),a._v("\n")])])]),s("ul",[s("li",[s("code",[a._v("OPRD")]),a._v(" 不能是立即数")]),a._v(" "),s("li",[a._v("若结果高半部（"),s("code",[a._v("AH")]),a._v(" 或 "),s("code",[a._v("DX")]),a._v("）是全 0（不是有效数值），则 "),s("code",[a._v("CF=OF=0")]),a._v("，否则 "),s("code",[a._v("CF=OF=1")])])]),a._v(" "),s("h5",{attrs:{id:"带符号乘法-imul"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带符号乘法-imul"}},[a._v("#")]),a._v(" 带符号乘法 IMUL")]),a._v(" "),s("p",[s("code",[a._v("IMUL")]),a._v(" (sIgned MULtiply) 除了操作数是带符号外，其余与 "),s("code",[a._v("MUL")]),a._v(" 指令相同。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("IMUL OPRD\n")])])]),s("ul",[s("li",[a._v("若结果高半部（"),s("code",[a._v("AH")]),a._v(" 或 "),s("code",[a._v("DX")]),a._v("）是低半部的符号扩展（不是有效数值），则 "),s("code",[a._v("CF=OF=0")]),a._v("，否则 "),s("code",[a._v("CF=OF=1")])])]),a._v(" "),s("h4",{attrs:{id:"除法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#除法"}},[a._v("#")]),a._v(" 除法")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 无符号除法   ")]),a._v("\nDIV OPRD\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 有符号除法")]),a._v("\nIDIV OPRD\n")])])]),s("ul",[s("li",[a._v("指令要求被除数是除数的双倍字长")]),a._v(" "),s("li",[a._v("若 "),s("code",[a._v("OPRD")]),a._v(" 是 8 bits\n"),s("ul",[s("li",[a._v("执行："),s("code",[a._v("AX/OPRD")])]),a._v(" "),s("li",[s("code",[a._v("AL")]),a._v(" = 商")]),a._v(" "),s("li",[s("code",[a._v("AH")]),a._v(" = 余数")])])]),a._v(" "),s("li",[a._v("若 "),s("code",[a._v("OPRD")]),a._v(" 是 16 bits\n"),s("ul",[s("li",[a._v("执行："),s("code",[a._v("DX:AX/OPRD")])]),a._v(" "),s("li",[s("code",[a._v("AX")]),a._v(" = 商")]),a._v(" "),s("li",[s("code",[a._v("DX")]),a._v(" = 余数")])])])]),a._v(" "),s("p",[a._v("简而言之，就是高位存余数，低位存商。记忆的方法，可以想：平时更常用除法而不是求模，低位存储的结果就可以直接进行下一步运算。")]),a._v(" "),s("p",[a._v("除法指令常和 "),s("code",[a._v("CBW")]),a._v(" 或 "),s("code",[a._v("CWD")]),a._v(" 配合使用。")]),a._v(" "),s("h4",{attrs:{id:"bcd-码调整指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bcd-码调整指令"}},[a._v("#")]),a._v(" BCD 码调整指令")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/6939376970e09f4138063eaf1684ec0cbc84518c32bc2a5ddd5887720210c590.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/f07b55addce64725145a23c41700eebda4947fd3721354d4acc6add68c3dd409.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/1adbd5c08e7d6d1bda5ecb588ec10f9b5336c76828a436559717805bc257daa2.png",alt:""}}),a._v(" "),s("img",{attrs:{src:"/images/94be973a6bca8a5c4e9684c58647f5c8fcd2fedd3c59edb4e74313467885cc6a.png",alt:""}})]),a._v(" "),s("h5",{attrs:{id:"六条指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六条指令"}},[a._v("#")]),a._v(" 六条指令")]),a._v(" "),s("ul",[s("li",[a._v("DAA "),s("code",[a._v("Decimal Adjust after Addition")]),a._v("，"),s("code",[a._v("Decimal")]),a._v(" 即每四位表示一个 BCD 码，又称压缩型、组合型")]),a._v(" "),s("li",[a._v("AAA "),s("code",[a._v("ASCII Adjust after Addition")]),a._v("，"),s("code",[a._v("ASCII")]),a._v(" 即每八位表示一个 BCD 码，又称非压缩型、非组合型")])]),a._v(" "),s("p",[a._v("剩下的就自己看 PPT 吧。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/bd0316766dff088131e68526c6658ead27fded89940d1a7c47c07c92997b7cb9.png",alt:"AAA"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/3849fdd05eb1310ef96832659f42117a2362526db23505a9de8c4c85d484a986.png",alt:"DAA"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/6f8e1b39a294933b0e68842cb8dc194101e0882ea306bf8e143aef5010fdfbdc.png",alt:"AAS"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/b15ffa24b50b4f9c459af9d08005db823240d56561f862202c7a2eb2c98e4020.png",alt:"DAS"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/da6d82146b31d23b717d154aa8e7ed05a0dcf6f6bf83a75d18f7f33bbb73b2a3.png",alt:"AAM"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/f7fccda5f91e455fe65b190e30756a698a4cd77a49b8289e2c7568ff5b7a338a.png",alt:"AAD"}})]),a._v(" "),s("h3",{attrs:{id:"逻辑运算和移位指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算和移位指令"}},[a._v("#")]),a._v(" 逻辑运算和移位指令")]),a._v(" "),s("h4",{attrs:{id:"逻辑运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算"}},[a._v("#")]),a._v(" 逻辑运算")]),a._v(" "),s("ul",[s("li",[a._v("逻辑运算指令对操作数的要求大多与MOV指令相同")]),a._v(" "),s("li",[s("code",[a._v("NOT")]),a._v(" 运算指令要求操作数不能是立即数")]),a._v(" "),s("li",[a._v("除 "),s("code",[a._v("NOT")]),a._v(" 运算指令外，其余指令的执行都只会影响 "),s("code",[a._v("OF")]),a._v(" 和 "),s("code",[a._v("CF")]),a._v("（使 "),s("code",[a._v("OF=CF=0")]),a._v("）。"),s("code",[a._v("NOT")]),a._v(" 指令不不影响标志位")])]),a._v(" "),s("h5",{attrs:{id:"与-and"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与-and"}},[a._v("#")]),a._v(" 与 AND")]),a._v(" "),s("p",[a._v("语法上类似于 "),s("code",[a._v("ADD")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("AND  OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 两操作数按位相“与”，结果送目标地址 OPRD1")]),a._v("\n")])])]),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 实现两操作数按位相与的运算")]),a._v("\nAND  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 使目标操作数的某些位不变，某些位清零")]),a._v("\nAND  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FH")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 在操作数不变的 情况下使 CF 和 OF 清零")]),a._v("\nAND  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n")])])]),s("p",[a._v("例 2：从地址为 "),s("code",[a._v("3F8H")]),a._v(" 端口中读入一个字节数，如果该数 bit1 位为 1，则将 "),s("code",[a._v("DATA")]),a._v(" 为首地址的一个字输出到 "),s("code",[a._v("38FH")]),a._v(" 端口，否则就不能进行数据传送。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", DATA\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3F8H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("WAIT:")]),a._v(" IN "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v("\n      AND "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("02H")]),a._v("\n      JZ WAIT       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ZF=1转移")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("38FH")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      OUT "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n")])])]),s("h5",{attrs:{id:"或-or"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#或-or"}},[a._v("#")]),a._v(" 或 OR")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("OR OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 两操作数按位相“或”，结果送目标地址 OPRD1")]),a._v("\n")])])]),s("p",[a._v("例题：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 实现两操作数 相“或”的运算")]),a._v("\nOR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 使某些位不变，某些位置“1”")]),a._v("\nOR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FH")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 在不改变操作数的情况下使 OF=CF=0")]),a._v("\nOR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n")])])]),s("h5",{attrs:{id:"非-not"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非-not"}},[a._v("#")]),a._v(" 非 NOT")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("NOT OPRD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 操作数按位取反再送回原地址")]),a._v("\n")])])]),s("ul",[s("li",[a._v("操作数不能是立即数")]),a._v(" "),s("li",[a._v("对标志位无影响")])]),a._v(" "),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("NOT BYTE PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("这里的 "),s("code",[a._v("BYTE PTR")]),a._v(" 是强制转换，见"),s("a",{attrs:{href:"#PTR-%E8%BF%90%E7%AE%97%E7%AC%A6"}},[a._v("PTR 运算符")]),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"异或-xor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异或-xor"}},[a._v("#")]),a._v(" 异或 XOR")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("XOR OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 两操作数按位相“异或”，结果送目标地址 OPRD1")]),a._v("\n")])])]),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("XOR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80H")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将 BL 的最高位变反")]),a._v("\nXOR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将 AX 清零")]),a._v("\n")])])]),s("p",[a._v("注意，"),s("code",[a._v("XOR AX, AX")]),a._v(" 的效果等价于 "),s("code",[a._v("MOV AX, 0")]),a._v("，但：")]),a._v(" "),s("ul",[s("li",[a._v("前者会使 "),s("code",[a._v("OF")]),a._v("="),s("code",[a._v("CF")]),a._v("=0")]),a._v(" "),s("li",[a._v("前者的字节码更短")]),a._v(" "),s("li",[a._v("前者在旧的架构上速度会更快（新架构就没必要了）")]),a._v(" "),s("li",[a._v("参见 "),s("a",{attrs:{href:"https://stackoverflow.com/questions/26645676/xor-ax-ax-when-loading-segment-register",target:"_blank",rel:"noopener noreferrer"}},[a._v("xor ax, ax when loading segment register - Stack Overflow"),s("OutboundLink")],1)])]),a._v(" "),s("h5",{attrs:{id:"测试-与-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-与-test"}},[a._v("#")]),a._v(" 测试（与） TEST")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("TEST OPRD1, OPRD2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 执行“与”运算，运算的结果影响标志位，但不送回目标地址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 常用于测试某些位的状态")]),a._v("\n")])])]),s("p",[a._v("例题：从地址为 "),s("code",[a._v("3F8H")]),a._v(" 的端口中读入一个字节数，当该数的 bit1， bit3， bit5 位同时为 1 时，则从 "),s("code",[a._v("38FH")]),a._v(" 端口将 DATA 为首地址的一个字输出，否则就从端口重新输入。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      LEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", DATA\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3F8H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("WAIT:")]),a._v(" IN  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("38FH")]),a._v("\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      OUT  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n")])])]),s("p",[s("code",[a._v("; ...")]),a._v(" 部分的代码可以有三个版本：")]),a._v(" "),s("p",[a._v("使用三次 "),s("code",[a._v("TEST")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("TEST "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("02H")]),a._v("\nJZ WAIT       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ZF=1转移")]),a._v("\nTEST "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("08H")]),a._v("\nJZ WAIT\nTEST "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("\nJZ WAIT\n")])])]),s("p",[a._v("使用 "),s("code",[a._v("AND")]),a._v(" 后 "),s("code",[a._v("CMP")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("AND "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2AH")]),a._v("\nCMP "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2AH")]),a._v("\nJNZ WAIT\n")])])]),s("p",[a._v("使用 "),s("code",[a._v("AND")]),a._v(" 后 "),s("code",[a._v("XOR")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("AND "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2AH")]),a._v("\nXOR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2AH")]),a._v("\nJNZ WAIT\n")])])]),s("h4",{attrs:{id:"移位指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移位指令"}},[a._v("#")]),a._v(" 移位指令")]),a._v(" "),s("h5",{attrs:{id:"算术左移-sal-逻辑左移-shl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术左移-sal-逻辑左移-shl"}},[a._v("#")]),a._v(" 算术左移 SAL 逻辑左移 SHL")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 算术左移 (Shift Arithmetic Left) 指令，视为有符号数")]),a._v("\nSAL OPRD, "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nSAL OPRD, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 逻辑左移指令，视为无符号数")]),a._v("\nSHL OPRD, "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nSHL OPRD, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n")])])]),s("p",[s("code",[a._v("CL")]),a._v(" 是 "),s("code",[a._v("CX")]),a._v(" 寄存器的低 8 位。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/5d244f81043fbffb79a752c98e4480efa41ab9585c8cd0e27c0e7f3fe3e7ca20.png",alt:"SAL 和 SHL"}})]),a._v(" "),s("p",[a._v("二者实际上就是一条指令，都是最低位补 0，最高位移到 "),s("code",[a._v("CF")]),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"算术右移-sar-逻辑右移-shr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术右移-sar-逻辑右移-shr"}},[a._v("#")]),a._v(" 算术右移 SAR 逻辑右移 SHR")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 算术右移指令，视为有符号数")]),a._v("\nSAR OPRD, "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nSAR OPRD, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 逻辑右移指令，视为无符号数   ")]),a._v("\nSHR OPRD, "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nSHR OPRD, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"/images/46007672f8e2139fa723af128b6b5f41941975311881900e46d6e8d2926b7d9f.png",alt:"SAR 和 SHR"}})]),a._v(" "),s("p",[a._v("移出的数送 CF，移入 0 （算术右移）或符号位（逻辑右移）。")]),a._v(" "),s("h5",{attrs:{id:"不带-cf-的循环移位-rol-ror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不带-cf-的循环移位-rol-ror"}},[a._v("#")]),a._v(" 不带 CF 的循环移位 ROL ROR")]),a._v(" "),s("p",[s("code",[a._v("RO")]),a._v(" 取自 "),s("code",[a._v("Rotate")]),a._v("。")]),a._v(" "),s("p",[a._v("二者都是在原数上循环移位，同时移出的数送 CF。见下。")]),a._v(" "),s("h5",{attrs:{id:"带-cf-的循环移位-rcl-rcr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带-cf-的循环移位-rcl-rcr"}},[a._v("#")]),a._v(" 带 CF 的循环移位 RCL RCR")]),a._v(" "),s("p",[a._v("二者都是 CF 作为移入的数，移出的数再送 CF。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/71d57c3c15f9f63ab17f8b1613b7570bac1fd1a32e057d04e2d545424d0c86d1.png",alt:"循环移位"}})]),a._v(" "),s("p",[a._v("循环移位可用于：")]),a._v(" "),s("ul",[s("li",[a._v("用于对某些位状态的测试")]),a._v(" "),s("li",[a._v("高位部分和低位部分的交换")]),a._v(" "),s("li",[a._v("与非循环移位指令一起组成32位或更长字长数的移位")])]),a._v(" "),s("p",[a._v("例：对从存储单元 M 开始的三字数据执行左移一位。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("SAL M, "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nRCL M"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nRCL M"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"/images/5cc3b593d59435947e0ba5e9ffee706d873d9e7a0031d7f506015b64c36384cf.png",alt:"示例"}})]),a._v(" "),s("p",[a._v("例 2：将 1000H 开始存放的 4 个压缩 BCD 码转换为 ASCII 码存放到 3000H 开始的单元中去。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000H")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3000H")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("Next:")]),a._v(" MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 由于每个字节有 2 个 BCD 码，需处理两次，故备份一个在 BL")]),a._v("\n      AND "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FH")]),a._v("\n      OR  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 处理 AL 的后四位")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n      INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 目的地地址 ++")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v("\n      PUSH "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 对 CX （用于计数剩余字节）备份")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 此处的 CL 为右移次数")]),a._v("\n      SHR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 处理 AL 的前四位")]),a._v("\n      OR  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("\n      MOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n      INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 目的地地址 ++")]),a._v("\n      INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 源地址 ++")]),a._v("\n      POP "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("\n      DEC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("\n      JNZ Next\n      HLT\n")])])]),s("h3",{attrs:{id:"串操作指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串操作指令"}},[a._v("#")]),a._v(" 串操作指令")]),a._v(" "),s("ul",[s("li",[a._v("针对数据块或字符串的操作")]),a._v(" "),s("li",[a._v("实现存储器到存储器的数据传送（前面的所有命令都不能）")])]),a._v(" "),s("p",[a._v("串操作指令及其功能：（"),s("code",[a._v("<=>")]),a._v("表示比较，"),s("code",[a._v("<-")]),a._v(" 表示数据存储）")]),a._v(" "),s("ul",[s("li",[a._v("串传送 "),s("code",[a._v("MOVS")]),a._v("：存储器  -> 存储器")]),a._v(" "),s("li",[a._v("串比较 "),s("code",[a._v("CMPS")]),a._v("：存储器 <=> 存储器")]),a._v(" "),s("li",[a._v("串扫描 "),s("code",[a._v("SCAS")]),a._v("：存储器 <=> AL/AX")]),a._v(" "),s("li",[a._v("串装入 "),s("code",[a._v("LODS")]),a._v("：存储器  -> AL/AX")]),a._v(" "),s("li",[a._v("串送存 "),s("code",[a._v("STOS")]),a._v("：存储器 <-  AL/AX")])]),a._v(" "),s("h4",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),s("ul",[s("li",[a._v("源串地址由 "),s("code",[a._v("DS:[SI]")]),a._v(" 提供，目的串由 "),s("code",[a._v("ES:[DI]")]),a._v(" 提供")]),a._v(" "),s("li",[a._v("源串允许段（DS）重设，目的串不允许段（ES）重设。")]),a._v(" "),s("li",[a._v("每次：\n"),s("ol",[s("li",[a._v("只处理串中的一个单元(字或字节)")]),a._v(" "),s("li",[a._v("这些指令执行结束后，都会按 "),s("code",[a._v("DF")]),a._v(" 决定的方向自动修改 "),s("code",[a._v("SI")]),a._v(" 和/或 "),s("code",[a._v("DI")]),a._v("，使其指向下一个单元（按指令可分别处理字单元和字节单元）")])])]),a._v(" "),s("li",[a._v("地址修改方向由 DF 标志位决定：\n"),s("ul",[s("li",[s("code",[a._v("DF = 0")]),a._v(" => 增地址方向")]),a._v(" "),s("li",[s("code",[a._v("DF = 1")]),a._v(" => 减地址方向")])])]),a._v(" "),s("li",[a._v("指令前面可加上"),s("a",{attrs:{href:"#%E9%87%8D%E5%A4%8D%E5%89%8D%E7%BC%80"}},[a._v("自动重复前缀")]),a._v("，实现自动重复执行串操作，重复执行次数由 "),s("code",[a._v("CX")]),a._v(" 指定")])]),a._v(" "),s("h4",{attrs:{id:"重复前缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重复前缀"}},[a._v("#")]),a._v(" 重复前缀")]),a._v(" "),s("p",[a._v("重复前缀：重复执行给定指令，每执行一次后，自动使 "),s("code",[a._v("CX-1=>CX")]),a._v("，直至 "),s("code",[a._v("CX=0")]),a._v(" 或其他条件")]),a._v(" "),s("ul",[s("li",[a._v("无条件重复\n"),s("ul",[s("li",[s("code",[a._v("REP")]),a._v(" => 若 "),s("code",[a._v("CX≠0")]),a._v(" 则重复")])])]),a._v(" "),s("li",[a._v("条件重复\n"),s("ul",[s("li",[s("code",[a._v("REPE")]),a._v("  相等重复 => 若 "),s("code",[a._v("CX≠0")]),a._v(" 且 "),s("code",[a._v("ZF=0")]),a._v(" 则重复")]),a._v(" "),s("li",[s("code",[a._v("REPZ")]),a._v("  为零重复（上一指令的别名）")]),a._v(" "),s("li",[s("code",[a._v("REPNE")]),a._v(" 不相等重复 => 若 "),s("code",[a._v("CX≠0")]),a._v(" 且 "),s("code",[a._v("ZF≠0")]),a._v(" 则重复")]),a._v(" "),s("li",[s("code",[a._v("REPNZ")]),a._v(" 不为零重复（上一指令的别名）\n注意："),s("strong",[a._v("重复前缀本身不改变标志位")])])])])]),a._v(" "),s("h4",{attrs:{id:"串操作指令流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串操作指令流程"}},[a._v("#")]),a._v(" 串操作指令流程")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/3ece5bd5b42862946c6175223499ee3b77fdc6cc7916ee57a572ceee0267d1bc.png",alt:"串操作指令流程(以传送操作为例)"}})]),a._v(" "),s("p",[a._v("左边部分是串操作的初始化，右边的虚线框部分由串操作指令完成。")]),a._v(" "),s("h4",{attrs:{id:"串传送指令-movs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串传送指令-movs"}},[a._v("#")]),a._v(" 串传送指令 MOVS")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOVS OPRD1("),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("), OPRD2("),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(")\nMOVSB\nMOVSW\n")])])]),s("ul",[s("li",[a._v("第一种格式中，"),s("code",[a._v("OPRD1")]),a._v(" 为目标串地址，"),s("code",[a._v("OPRD2")]),a._v(" 为源串地址（类似于 "),s("code",[a._v("MOV")]),a._v("）。两串的段地址允许使用默认值（"),s("code",[a._v("ES")]),a._v("、"),s("code",[a._v("DS")]),a._v("），"),s("strong",[a._v("源串")]),a._v("也允许段重设")]),a._v(" "),s("li",[a._v("二、三种格式下隐含了操作数地址（目标串 "),s("code",[a._v("ES:DI")]),a._v("、源串 "),s("code",[a._v("DS:SI")]),a._v("）")]),a._v(" "),s("li",[s("code",[a._v("MOVSB")]),a._v(" 一次完成一个 Byte 的传送，"),s("code",[a._v("MOVSW")]),a._v(" 一次完成一个 Word 的传送")]),a._v(" "),s("li",[a._v("执行结束后，按 "),s("code",[a._v("DF")]),a._v(" 决定的方向自动修改 "),s("code",[a._v("SI")]),a._v(" 和 "),s("code",[a._v("DI")]),a._v("，使其指向下一个单元")])]),a._v(" "),s("p",[a._v("例题：用串传送指令实现200个字节数据的传送：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("LEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", MEM1\nLEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(", MEM2\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),a._v("\nCLD              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; Clear Direction Flag: DF = 0")]),a._v("\nREP  MOVSB\nHLT\n")])])]),s("h4",{attrs:{id:"串比较指令-cmps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串比较指令-cmps"}},[a._v("#")]),a._v(" 串比较指令 CMPS")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CMPS OPRD1("),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("), OPRD2("),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(")\nCMPSB\nCMPSW\n")])])]),s("ul",[s("li",[a._v("和 "),s("code",[a._v("MOVS")]),a._v(" 相同的是，后两个命令默认目标串 "),s("code",[a._v("ES:DI")]),a._v("、源串 "),s("code",[a._v("DS:SI")])]),a._v(" "),s("li",[a._v("和 "),s("code",[a._v("MOVS")]),a._v(" 不同的是，"),s("code",[a._v("OPRD1")]),a._v(" 为源串，"),s("code",[a._v("OPRD2")]),a._v(" 为目标串（这和 "),s("code",[a._v("SUB")]),a._v("、"),s("code",[a._v("CMP")]),a._v(" 相同）")]),a._v(" "),s("li",[a._v("和 "),s("code",[a._v("CMP")]),a._v(" 相同的是，执行 "),s("code",[a._v("OPRD1-OPRD2")]),a._v("，不改变操作数， 只改变标志位")]),a._v(" "),s("li",[a._v("串比较指令常与条件重复前缀连用")]),a._v(" "),s("li",[a._v("指令的执行不改变操作数，仅影响标志位")]),a._v(" "),s("li",[a._v("执行结束后，按 "),s("code",[a._v("DF")]),a._v(" 决定的方向自动修改 "),s("code",[a._v("SI")]),a._v(" 和 "),s("code",[a._v("DI")]),a._v("，使其指向下一个单元")])]),a._v(" "),s("p",[a._v("例：比较两组（200个字节）对应数据，找出第一个不同数据放入AL，其地址放入BX")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      LEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", MEM1\n      LEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(", MEM2\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),a._v("\n      CLD\n      REPE CMPSB     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 指令执行结束，可能是找到不同，也可能是完全相同")]),a._v("\n      JZ   STOP\n      DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 注意！")]),a._v("\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("STOP:")]),a._v(" HLT\n")])])]),s("p",[a._v("上述第 7 行的 "),s("code",[a._v("DEC SI")]),a._v(" 说明："),s("strong",[a._v("当前 "),s("code",[a._v("REPE CMPSB")]),a._v(" 条件不满足时，也会执行 "),s("code",[a._v("SI++")]),a._v(" "),s("code",[a._v("DI++")]),a._v(" "),s("code",[a._v("CX--")]),a._v("，然后停止执行指令。")])]),a._v(" "),s("h4",{attrs:{id:"串扫描指令-scas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串扫描指令-scas"}},[a._v("#")]),a._v(" 串扫描指令 SCAS")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("SCAS  OPRD("),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(")\nSCASB\nSCASW\n")])])]),s("ul",[s("li",[a._v("执行 "),s("code",[a._v("AX")]),a._v(" （或 "),s("code",[a._v("AL")]),a._v("） - "),s("code",[a._v("OPRD")]),a._v("，结果不保存，只影响标志寄存器")]),a._v(" "),s("li",[a._v("常用于在指定存储区域中寻找关键字")]),a._v(" "),s("li",[s("code",[a._v("OPRD")]),a._v(" 为目标串，默认为 "),s("code",[a._v("ES:SI")])]),a._v(" "),s("li",[a._v("执行结束后，按 "),s("code",[a._v("DF")]),a._v(" 决定的方向自动修改 "),s("code",[a._v("DI")]),a._v("，使其指向下一个单元")])]),a._v(" "),s("h4",{attrs:{id:"串装入指令-lods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串装入指令-lods"}},[a._v("#")]),a._v(" 串装入指令 LODS")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("LODS  OPRD("),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(")\nLODSB              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 存入 AL")]),a._v("\nLODSW              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 存入 AX")]),a._v("\n")])])]),s("ul",[s("li",[a._v("用于将内存某个区域的数据串依次装入累加寄存器  AX/AL，以便进行处理")]),a._v(" "),s("li",[a._v("不影响标志位")]),a._v(" "),s("li",[s("code",[a._v("LODS")]),a._v(" 指令加重复前缀无意义（等价于 "),s("code",[a._v("LOAD")]),a._v(" 最后一个有效值）")]),a._v(" "),s("li",[a._v("执行结束后，按 "),s("code",[a._v("DF")]),a._v(" 决定的方向自动修改 "),s("code",[a._v("SI")]),a._v("，使其指向下一个单元（这即是和 "),s("code",[a._v("MOV AL, [SI]")]),a._v(" 的最大区别）")])]),a._v(" "),s("h4",{attrs:{id:"串存储指令-stos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串存储指令-stos"}},[a._v("#")]),a._v(" 串存储指令 STOS")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("STOS  OPRD("),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(")\nSTOSB              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将 AL 存入内存")]),a._v("\nSTOSW              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将 AX 存入内存")]),a._v("\n")])])]),s("p",[a._v("配合重复前缀，常用于将内存某个区域置同样的值。")]),a._v(" "),s("h4",{attrs:{id:"串操作指令注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串操作指令注意事项"}},[a._v("#")]),a._v(" 串操作指令注意事项")]),a._v(" "),s("p",[a._v("注意事项：")]),a._v(" "),s("ul",[s("li",[a._v("需要定义附加段\n"),s("ul",[s("li",[a._v("目标操作数必须在附加段")])])]),a._v(" "),s("li",[a._v("需要设置数据的操作方向\n"),s("ul",[s("li",[a._v("确定 "),s("code",[a._v("DF")]),a._v(" 的状态")])])]),a._v(" "),s("li",[a._v("源串和目标串指针分别为 "),s("code",[a._v("SI")]),a._v(" 和 "),s("code",[a._v("DI")])]),a._v(" "),s("li",[a._v("串长度值必须由 "),s("code",[a._v("CX")]),a._v(" 给出")]),a._v(" "),s("li",[a._v("注意重复前缀的使用方法\n"),s("ul",[s("li",[a._v("传送类指令前加无条件重复前缀")]),a._v(" "),s("li",[a._v("串比较类指令前加条件重复前缀，但前缀不影响 "),s("code",[a._v("ZF")]),a._v(" 状态")])])])]),a._v(" "),s("h3",{attrs:{id:"程序控制指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序控制指令"}},[a._v("#")]),a._v(" 程序控制指令")]),a._v(" "),s("h4",{attrs:{id:"程序的执行方向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序的执行方向"}},[a._v("#")]),a._v(" 程序的执行方向")]),a._v(" "),s("ul",[s("li",[a._v("程序控制类指令的本质："),s("strong",[a._v("控制程序的执行顺序")])]),a._v(" "),s("li",[a._v("决定程序执行方向的因素："),s("code",[a._v("CS")]),a._v("，"),s("code",[a._v("IP")])]),a._v(" "),s("li",[a._v("下条指令地址："),s("code",[a._v("CS:[IP]")])]),a._v(" "),s("li",[a._v("修改 "),s("code",[a._v("CS")]),a._v("，程序转向另一个代码段执行")]),a._v(" "),s("li",[a._v("修改 "),s("code",[a._v("IP")]),a._v("，程序转向本代码段内另一处执行")])]),a._v(" "),s("h4",{attrs:{id:"转移指令-jmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转移指令-jmp"}},[a._v("#")]),a._v(" 转移指令 JMP")]),a._v(" "),s("ul",[s("li",[a._v("转移指令修改 "),s("code",[a._v("CS")]),a._v(" 和 "),s("code",[a._v("IP")]),a._v(" 的值，实现程序转移")]),a._v(" "),s("li",[a._v("分为无条件转移指令和有条件转移指令")])]),a._v(" "),s("h5",{attrs:{id:"无条件转移指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无条件转移指令"}},[a._v("#")]),a._v(" 无条件转移指令")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("JMP  OPRD\n")])])]),s("h6",{attrs:{id:"段内转移"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段内转移"}},[a._v("#")]),a._v(" 段内转移")]),a._v(" "),s("ul",[s("li",[a._v("段内转移：目标地址为 16 位，赋值给 "),s("code",[a._v("IP")])]),a._v(" "),s("li",[a._v("段内直接转移："),s("code",[a._v("OPRD/Label")]),a._v(" 为"),s("strong",[a._v("立即数")]),a._v("，"),s("strong",[s("code",[a._v("IP <= IP + Label")])]),a._v("（"),s("code",[a._v("Label")]),a._v(" 被汇编为 8/16 位位移量）")]),a._v(" "),s("li",[a._v("段内间接转移："),s("code",[a._v("OPRD")]),a._v(" 为"),s("strong",[a._v("寄存器或存储器")]),a._v("，"),s("strong",[s("code",[a._v("IP <= OPRD")])])])]),a._v(" "),s("p",[a._v("例题：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("JMP  Next        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; Next 为标号")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 执行后 IP 到 Next 所在指令的地址")]),a._v("\n\nJMP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";  BX  = 1200H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 执行后 IP = 1200H")]),a._v("\n\nJMP  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; [BX] = 4312H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 执行后 IP = 4312H。")]),a._v("\n")])])]),s("p",[a._v("关于 Label 的详细介绍可见"),s("a",{attrs:{href:"#%E6%A0%87%E5%8F%B7"}},[a._v("标号")]),a._v("。")]),a._v(" "),s("h6",{attrs:{id:"段间转移-jmp-far"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段间转移-jmp-far"}},[a._v("#")]),a._v(" 段间转移 JMP FAR")]),a._v(" "),s("ul",[s("li",[a._v("段间转移：目标地址为 32 位，赋值给 "),s("code",[a._v("CS:IP")])]),a._v(" "),s("li",[a._v("段内直接转移："),s("code",[a._v("OPRD/Label")]),a._v(" 为"),s("strong",[a._v("立即数")]),a._v("，"),s("code",[a._v("CS:IP = Label")]),a._v("（"),s("code",[a._v("Label")]),a._v(" 被汇编为 32 位地址）")]),a._v(" "),s("li",[a._v("段间间接寻址：转移的目标地址由指令中的 32 位"),s("strong",[a._v("存储器")]),a._v("单元给出")])]),a._v(" "),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("JMP  FAR Label      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 段内直接转移")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CS:IP = Label")]),a._v("\n\nJMP  DWORD PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 段内间接寻址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; IP = [BX]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CS = [BX+1]")]),a._v("\n")])])]),s("p",[a._v("例 2：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1122H")]),a._v("\nMOV  WORD PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0120H")]),a._v("\nADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nMOV  WORD PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0122H")]),a._v("\nJMP DWORD PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CS = 0122H, IP = 0120H")]),a._v("\n")])])]),s("p",[a._v("注意第二行，将立即数存入 "),s("code",[a._v("[SI]")]),a._v(" 指明的内存时，必须使用 "),s("code",[a._v("BYTE/WORD PTR")]),a._v(" 显式指明立即数的长度是 8 位还是 16 位，因为立即数和 "),s("code",[a._v("[SI]")]),a._v(" 的长度都是不一定的。寄存器值存入内存则不需要，因为寄存器隐式地给出了长度。参见 "),s("a",{attrs:{href:"#PTR-%E8%BF%90%E7%AE%97%E7%AC%A6"}},[a._v("PTR 运算符")]),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"条件转移指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件转移指令"}},[a._v("#")]),a._v(" 条件转移指令")]),a._v(" "),s("ul",[s("li",[a._v("在满足一定条件下，程序转移到目标地址继续执行")]),a._v(" "),s("li",[a._v("条件转移指令均为"),s("strong",[a._v("直接寻址的段内短转移")]),a._v("，即转移的位移量为 8 位补码表示，范围为："),s("strong",[a._v("-128~+127")]),a._v("\nIP=IP+位移量")])]),a._v(" "),s("p",[a._v("常见条件指令的应用：")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("指令")]),a._v(" "),s("th",[a._v("条件")]),a._v(" "),s("th",[a._v("应用")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("JC/JNC")])]),a._v(" "),s("td",[a._v("判断"),s("code",[a._v("CF")]),a._v("的状态")]),a._v(" "),s("td",[a._v("常用于比大小")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("JZ/JNZ")])]),a._v(" "),s("td",[a._v("判断"),s("code",[a._v("ZF")]),a._v("的状态")]),a._v(" "),s("td",[a._v("常用于循环体的结束判断")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("JO/JNO")])]),a._v(" "),s("td",[a._v("判断"),s("code",[a._v("OF")]),a._v("的状态")]),a._v(" "),s("td",[a._v("常用于有符号数溢出的判断")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("JS/JNS")])]),a._v(" "),s("td",[a._v("判断"),s("code",[a._v("SF")]),a._v("的状态")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[s("code",[a._v("JP/JNP")])]),a._v(" "),s("td",[a._v("判断"),s("code",[a._v("PF")]),a._v("的状态")]),a._v(" "),s("td",[a._v("用于判断运算结果低8位中1的个数是否为偶数")])]),a._v(" "),s("tr",[s("td",[a._v("没有类似指令判断 "),s("code",[a._v("AF")]),a._v(" 或 "),s("code",[a._v("DF")]),a._v(" 的状态，只有上面五个")]),a._v(" "),s("td"),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[s("code",[a._v("JA/JAE/JB/JBE")])]),a._v(" "),s("td",[a._v("判断"),s("code",[a._v("CF")]),a._v("或"),s("code",[a._v("CF+ZF")]),a._v("的状态")]),a._v(" "),s("td",[a._v("常用于无符号数的大小比较")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("JG/JGE/JL/JLE")])]),a._v(" "),s("td",[a._v("判断"),s("code",[a._v("SF")]),a._v("、"),s("code",[a._v("OF")]),a._v("和"),s("code",[a._v("ZF")]),a._v("的状态")]),a._v(" "),s("td",[a._v("常用于带符号数的大小比较")])])])]),a._v(" "),s("p",[a._v("有关 "),s("code",[a._v("JA")]),a._v(" "),s("code",[a._v("JG")]),a._v(" 等的含义和用法请读者自行百度 / Google。")]),a._v(" "),s("p",[a._v("例题：统计内存数据段中以 TABLE 为首地址的 100 个 8 位有符号数中正数、负数和零的个数。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/282107de057cb912c39b1e4280688ca798324e448b4123a35dec7d4355b2ddd1.png",alt:"例题程序"}})]),a._v(" "),s("h4",{attrs:{id:"循环控制指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环控制指令"}},[a._v("#")]),a._v(" 循环控制指令")]),a._v(" "),s("ul",[s("li",[a._v("循环范围：以当前 "),s("code",[a._v("IP")]),a._v(" 为中心的 "),s("code",[a._v("-128～+127")]),a._v(" 范围内循环")]),a._v(" "),s("li",[a._v("循环次数：由 "),s("code",[a._v("CX")]),a._v(" 寄存器指定")]),a._v(" "),s("li",[a._v("循环指令："),s("code",[a._v("LOOP")]),a._v(" "),s("code",[a._v("LOOPZ")]),a._v(" "),s("code",[a._v("LOOPNZ")])])]),a._v(" "),s("h5",{attrs:{id:"无条件循环指令-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无条件循环指令-loop"}},[a._v("#")]),a._v(" 无条件循环指令 LOOP")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("LOOP  LABEL\n")])])]),s("ul",[s("li",[a._v("操作：")])]),a._v(" "),s("ol",[s("li",[s("code",[a._v("CX-1 => CX")])]),a._v(" "),s("li",[s("code",[a._v("CX ≠ 0")]),a._v(" 则转 "),s("code",[a._v("LABEL")]),a._v("，否则执行下条指令")])]),a._v(" "),s("p",[a._v("也就是说，当 "),s("code",[a._v("CX = 1")]),a._v(" 时执行 "),s("code",[a._v("LOOP")]),a._v(" 则不会跳转，而是顺序执行。")]),a._v(" "),s("h5",{attrs:{id:"有条件循环指令-loopz-loopnz-略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有条件循环指令-loopz-loopnz-略"}},[a._v("#")]),a._v(" 有条件循环指令 LOOPZ LOOPNZ（略）")]),a._v(" "),s("p",[s("code",[a._v("LOOPZ")]),a._v(" 和 "),s("code",[a._v("LOOPNZ")])]),a._v(" "),s("h4",{attrs:{id:"过程调用指令-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过程调用指令-call"}},[a._v("#")]),a._v(" 过程调用指令 CALL")]),a._v(" "),s("ul",[s("li",[a._v("用于调用一个子过程")]),a._v(" "),s("li",[a._v("子过程由程序员预先设计并装入内存")]),a._v(" "),s("li",[a._v("子过程执行结束后要返回原调用处")]),a._v(" "),s("li",[a._v("重要概念：入口地址、断点，如图")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/75d5aab2e89484cb5e629d88f5b36a4574c3bd86224bbda12a5ec56bd0865b75.png",alt:"入口地址和断点"}})]),a._v(" "),s("p",[a._v("调用指令的执行过程：")]),a._v(" "),s("ol",[s("li",[a._v("保护断点：将断点（调用指令的下一条指令的地址）压栈")]),a._v(" "),s("li",[a._v("获取子过程的入口地址（子过程第一条指令的地址）")]),a._v(" "),s("li",[a._v("执行子过程，含相应参数的保存及恢复")]),a._v(" "),s("li",[a._v("恢复断点，返回原程序（将断点地址由堆栈弹出）")])]),a._v(" "),s("p",[a._v("分为：")]),a._v(" "),s("ul",[s("li",[a._v("段内直接调用")]),a._v(" "),s("li",[a._v("段内间接调用")]),a._v(" "),s("li",[a._v("段间直接调用")]),a._v(" "),s("li",[a._v("段间间接调用")])]),a._v(" "),s("h5",{attrs:{id:"段内调用-call-near"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段内调用-call-near"}},[a._v("#")]),a._v(" 段内调用 CALL NEAR")]),a._v(" "),s("p",[a._v("由于被调用程序与调用程序在同一代码段，调用前只需保护断点的偏移地址。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CALL  (NEAR)  PROC\n")])])]),s("p",[a._v("执行过程：")]),a._v(" "),s("ul",[s("li",[a._v("断点压栈")]),a._v(" "),s("li",[s("code",[a._v("PROC => IP")])])]),a._v(" "),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CALL  TIMER           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 直接调用")]),a._v("\n\nCALL  WORD  PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 间接调用，指明长度为 16 位，是段内调用")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 执行后 IP = [SI], CS 不变")]),a._v("\n")])])]),s("h5",{attrs:{id:"段间调用-call-far"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段间调用-call-far"}},[a._v("#")]),a._v(" 段间调用 CALL FAR")]),a._v(" "),s("p",[a._v("由于子过程与原调用程序不在同一代码段，调用前需保护断点的段基地址和偏移地址。")]),a._v(" "),s("p",[s("strong",[a._v("先将 "),s("code",[a._v("CS")]),a._v(" 压栈，再压入 "),s("code",[a._v("IP")]),a._v("。")])]),a._v(" "),s("p",[a._v("格式：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CALL  FAR  PROC\n")])])]),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CALL  FAR  TIMER\n\nCALL  DWORD  PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 指明长度为 32 位，是段间调用")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 执行后 IP = [SI]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CS = [SI+2]")]),a._v("\n")])])]),s("h5",{attrs:{id:"返回指令-ret"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回指令-ret"}},[a._v("#")]),a._v(" 返回指令 RET")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("RET\n")])])]),s("ul",[s("li",[a._v("从堆栈中弹出断点地址，返回原程序")]),a._v(" "),s("li",[a._v("一般位于子程序的最后")]),a._v(" "),s("li",[a._v("在格式上不区分段内或段间")])]),a._v(" "),s("h4",{attrs:{id:"中断控制指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断控制指令"}},[a._v("#")]),a._v(" 中断控制指令")]),a._v(" "),s("h5",{attrs:{id:"中断和过程调用的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断和过程调用的区别"}},[a._v("#")]),a._v(" 中断和过程调用的区别")]),a._v(" "),s("ul",[s("li",[a._v("中断是随机事件或异常事件引起，调用则是事先已在程序中安排好")]),a._v(" "),s("li",[a._v("响应中断请求不仅要保护断点地址，还要保护 "),s("code",[a._v("FLAGS")]),a._v(" 内容")]),a._v(" "),s("li",[a._v("调用指令在指令中直接给出子程序入口地址")]),a._v(" "),s("li",[a._v("中断指令只给出中断向量码，入口地址则在中断向量码指向的中断向量表（内存单元）中")])]),a._v(" "),s("h5",{attrs:{id:"中断指令-int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断指令-int"}},[a._v("#")]),a._v(" 中断指令 INT")]),a._v(" "),s("p",[a._v("中断指令，又称作软中断指令")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("INT  n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; n*4 为中断服务程序入口的偏移地址（段地址 = DS）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 8086 的中断向量表存放在内存最低的 1K 单元")]),a._v("\n")])])]),s("h5",{attrs:{id:"中断指令的执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断指令的执行过程"}},[a._v("#")]),a._v(" 中断指令的执行过程")]),a._v(" "),s("ul",[s("li",[a._v("将 "),s("code",[a._v("FLAGS")]),a._v(" 压入堆栈")]),a._v(" "),s("li",[a._v("将 "),s("code",[a._v("INT")]),a._v(" 指令的下一条指令的 "),s("code",[a._v("CS")]),a._v("、"),s("code",[a._v("IP")]),a._v(" 压栈")]),a._v(" "),s("li",[a._v("由 "),s("code",[a._v("n*4")]),a._v(" 得到存放中断向量的地址")]),a._v(" "),s("li",[a._v("将中断向量（中断服务程序入口地址）送 "),s("code",[a._v("CS")]),a._v(" 和 "),s("code",[a._v("IP")]),a._v(" 寄存器\n"),s("ul",[s("li",[s("code",[a._v("CS = DS:[n*4]")])]),a._v(" "),s("li",[s("code",[a._v("IP = DS:[n*4+2]")])])])]),a._v(" "),s("li",[a._v("转入中断服务程序")])]),a._v(" "),s("p",[a._v("下图中，左图为中断后的堆栈段，右图为数据段和代码段。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/5370d71c8a40900e23d1a12d8c5c48f6229a59dfb1504056cce3b0e71c180fc0.png",alt:"中断指令的执行过程"}})]),a._v(" "),s("p",[a._v("例：")]),a._v(" "),s("p",[s("code",[a._v("[0084H] = 1123H")]),a._v(", "),s("code",[a._v("[0086H] = 2000H")]),a._v("。执行 "),s("code",[a._v("INT 21H")]),a._v(" 后，")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("IP = [21H*4] = 1123H")])]),a._v(" "),s("li",[s("code",[a._v("CS = [21H*4+2] = 2000H")])]),a._v(" "),s("li",[a._v("下一条指令在 "),s("code",[a._v("21123H")])])]),a._v(" "),s("h5",{attrs:{id:"溢出中断指令-into"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#溢出中断指令-into"}},[a._v("#")]),a._v(" 溢出中断指令 INTO")]),a._v(" "),s("p",[s("code",[a._v("INTO")]),a._v(" 指令通常安排在有符号数加减运算指令之后判断是否发生溢出")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("INTO\n")])])]),s("ul",[s("li",[a._v("指令执行时检查 "),s("code",[a._v("OF")]),a._v(" 标志：\n"),s("ul",[s("li",[a._v("若 "),s("code",[a._v("OF=1")]),a._v("，则启动一个类型为4的中断过程,即相当于执行指令: "),s("code",[a._v("INT 4")])]),a._v(" "),s("li",[a._v("若 "),s("code",[a._v("OF=0")]),a._v("，不做任何操作执行下一条指令")])])])]),a._v(" "),s("h5",{attrs:{id:"中断返回指令-iret"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断返回指令-iret"}},[a._v("#")]),a._v(" 中断返回指令 IRET")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("IRET\n")])])]),s("ul",[s("li",[a._v("中断服务程序的最后一条指令，执行：\n"),s("ol",[s("li",[a._v("恢复断点")]),a._v(" "),s("li",[a._v("恢复标志寄存器内容")])])])]),a._v(" "),s("h4",{attrs:{id:"处理器控制指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理器控制指令"}},[a._v("#")]),a._v(" 处理器控制指令")]),a._v(" "),s("p",[a._v("主要分为：")]),a._v(" "),s("ul",[s("li",[a._v("对标志位的操作\n"),s("ul",[s("li",[a._v("对标志位操作都是无操作数指令")]),a._v(" "),s("li",[a._v("可操作的标志位有 "),s("code",[a._v("CF")]),a._v("、"),s("code",[a._v("IF")]),a._v("和"),s("code",[a._v("DF")])])])]),a._v(" "),s("li",[a._v("与外部设备的同步")])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("常见指令")]),a._v(" "),s("th",[a._v("作用")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("CLC")]),a._v(" (clear CF)")]),a._v(" "),s("td",[a._v("清除进位标志")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("STC")]),a._v(" (set CF)")]),a._v(" "),s("td",[a._v("置1进位标志")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("CMC")]),a._v(" (complement CF)")]),a._v(" "),s("td",[a._v("进位标志取反")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("CLD")])]),a._v(" "),s("td",[a._v("清除方向标志")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("STD")])]),a._v(" "),s("td",[a._v("置1方向标志")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("CLI")])]),a._v(" "),s("td",[a._v("清除中断标志")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("STI")])]),a._v(" "),s("td",[a._v("置1中断标志")])])])]),a._v(" "),s("h2",{attrs:{id:"第四章-汇编语言程序设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-汇编语言程序设计"}},[a._v("#")]),a._v(" 第四章 汇编语言程序设计")]),a._v(" "),s("h3",{attrs:{id:"汇编语言语句种类及其格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#汇编语言语句种类及其格式"}},[a._v("#")]),a._v(" 汇编语言语句种类及其格式")]),a._v(" "),s("p",[a._v("汇编语言语句分为指令语句和伪指令语句。")]),a._v(" "),s("h4",{attrs:{id:"指令语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指令语句"}},[a._v("#")]),a._v(" 指令语句")]),a._v(" "),s("p",[a._v("每一条指令语句在汇编时都要产生一个可供CPU执行的机器目标代码，它又叫可执行语句。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/20a5c3d0761cc76031f79f5614dfcd829e3fa595afa28c3ed9ec8e811e2b4855.png",alt:"指令语句的一般格式"}})]),a._v(" "),s("ul",[s("li",[a._v("指令助记符和操作数两个字段就是"),s("a",{attrs:{href:"#%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F"}},[a._v("上一章——指令系统")]),a._v("介绍的指令")]),a._v(" "),s("li",[a._v("标号是可选字段，后面必须跟 "),s("code",[a._v(":")]),a._v(" "),s("ul",[s("li",[a._v("主要用于控制程序执行顺序")])])]),a._v(" "),s("li",[a._v("注释字段为可选项，以分号 "),s("code",[a._v(";")]),a._v(" 开始\n"),s("ul",[s("li",[a._v("它不会产生机器目标代码，不影响程序的功能")]),a._v(" "),s("li",[a._v("注释可以加在指令的后面，也可以是整个语句行")])])])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LABEL1:")]),a._v(" ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";功能为AX<=(AX)+(BX)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 后面的程序段将完成一次对存储器的访问")]),a._v("\n")])])]),s("h4",{attrs:{id:"伪指令语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#伪指令语句"}},[a._v("#")]),a._v(" 伪指令语句")]),a._v(" "),s("ul",[s("li",[a._v("伪指令语句又叫命令语句，是指示性语句")]),a._v(" "),s("li",[a._v("伪指令本身不产生自己的机器目标代码，它指示汇编程序对其后面的指令语句和伪指令语句如何处理")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/740e07dc751a8a621249923fc873f59e1eed613e8ef78cde4a10a5c13ab81c66.png",alt:"伪指令语句的一般格式"}})]),a._v(" "),s("h4",{attrs:{id:"标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[a._v("#")]),a._v(" 标识符")]),a._v(" "),s("p",[a._v("指令语句中的标号和伪指令语句中的符号名统称为标识符，它由若干个字符构成。")]),a._v(" "),s("p",[a._v("标识符构成规则：")]),a._v(" "),s("ul",[s("li",[a._v("字符的个数为 1-31 个")]),a._v(" "),s("li",[a._v("可以使用字母、数字、"),s("code",[a._v("@")]),a._v(" 、 "),s("code",[a._v("_")]),a._v("或 "),s("code",[a._v("?")])]),a._v(" "),s("li",[a._v("不能以数字开头")]),a._v(" "),s("li",[a._v("不能使用系统专用的保留字")])]),a._v(" "),s("h4",{attrs:{id:"保留字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保留字"}},[a._v("#")]),a._v(" 保留字")]),a._v(" "),s("ul",[s("li",[a._v("CPU 中各寄存器名（如 "),s("code",[a._v("AX")]),a._v("、"),s("code",[a._v("CS")]),a._v(" 等）")]),a._v(" "),s("li",[a._v("指令助记符（如"),s("code",[a._v("MOV")]),a._v("、"),s("code",[a._v("ADD")]),a._v("）")]),a._v(" "),s("li",[a._v("伪指令符（如"),s("code",[a._v("SEGMENT")]),a._v("、"),s("code",[a._v("DB")]),a._v("）")]),a._v(" "),s("li",[a._v("表达式中的运算符（如"),s("code",[a._v("GE")]),a._v("、"),s("code",[a._v("EQ")]),a._v("）")]),a._v(" "),s("li",[a._v("属性操作符（如"),s("code",[a._v("PTR")]),a._v("、"),s("code",[a._v("OFFSET")]),a._v("等）")])]),a._v(" "),s("h3",{attrs:{id:"汇编语言数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#汇编语言数据"}},[a._v("#")]),a._v(" 汇编语言数据")]),a._v(" "),s("ul",[s("li",[a._v("数据：指令和伪指令语句中的操作数")]),a._v(" "),s("li",[a._v("常用的数据形式有："),s("strong",[a._v("常数")]),a._v("、"),s("strong",[a._v("变量")]),a._v("和"),s("strong",[a._v("标号")])]),a._v(" "),s("li",[a._v("一个数据由"),s("strong",[a._v("数值")]),a._v("和"),s("strong",[a._v("属性")]),a._v("（比如是字节数据还是字数据）两部分构成")])]),a._v(" "),s("h4",{attrs:{id:"常数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常数"}},[a._v("#")]),a._v(" 常数")]),a._v(" "),s("p",[a._v("常数：经过汇编后其值已完全确定，并且在程序运行过程中不会改变。")]),a._v(" "),s("h5",{attrs:{id:"常数的表示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常数的表示"}},[a._v("#")]),a._v(" 常数的表示")]),a._v(" "),s("ul",[s("li",[a._v("二进制数：以字母 "),s("code",[a._v("B")]),a._v(" 结尾，如 "),s("code",[a._v("01001001B")])]),a._v(" "),s("li",[a._v("八进制数：以字母 "),s("code",[a._v("O")]),a._v(" 或 "),s("code",[a._v("Q")]),a._v(" 结尾，如"),s("code",[a._v("631Q")]),a._v(" "),s("code",[a._v("254O")])]),a._v(" "),s("li",[a._v("十进制数：以字母 "),s("code",[a._v("D")]),a._v(" 结尾，或者没有结尾字母。如 "),s("code",[a._v("2007D")]),a._v("、"),s("code",[a._v("2007")])]),a._v(" "),s("li",[a._v("十六进制数：以字母 "),s("code",[a._v("H")]),a._v(" 结尾，如 "),s("code",[a._v("3FEH")]),a._v(" "),s("ul",[s("li",[a._v("如果常数的第一个数符为字母，为了与标识符区别，必须在其前面冠以数字 "),s("code",[a._v("0")]),a._v("，如"),s("code",[a._v("0F000H")]),a._v(" 为 16 位常数")])])]),a._v(" "),s("li",[a._v("实数：如 "),s("code",[a._v("2.134E+10")]),a._v("。汇编源程序时会把实数转换为 4 字节、8 字节或 10 字节的二进制数形式存放。")]),a._v(" "),s("li",[a._v("字符串常数：用引号（单引号或双引号）括起来的一个或多个字符，其值为这些字符的ASCII码\n"),s("ul",[s("li",[a._v("如 "),s("code",[a._v("'ABC'")]),a._v(" 存储为 "),s("code",[a._v("41H 42H 43H")])]),a._v(" "),s("li",[a._v("其中 "),s("code",[a._v("41H")]),a._v(" 在低地址，"),s("code",[a._v("43H")]),a._v(" 在高地址，类似于 C 语言的 "),s("code",[a._v("char *")])])])])]),a._v(" "),s("h5",{attrs:{id:"常数的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常数的作用"}},[a._v("#")]),a._v(" 常数的作用")]),a._v(" "),s("ol",[s("li",[a._v("作指令语句的源操作数")]),a._v(" "),s("li",[a._v("在指令语句中作位移量")]),a._v(" "),s("li",[a._v("在数据定义伪指令中使用")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 1. 作指令语句的源操作数")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0B2F0H")]),a._v("\nADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(",  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("64H")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 2. 在指令语句中作位移量")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("32H")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0ABH")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("\nADC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1234H")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 3. 在数据定义伪指令中使用")]),a._v("\nDB   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v("\nDW   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3210H")]),a._v("\n")])])]),s("h4",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),s("p",[a._v("变量：用来表示存放数据的存储单元，这些数据在程序运行期间可以被改变。")]),a._v(" "),s("p",[a._v("程序中以变量名的形式来访问变量。"),s("strong",[a._v("变量名就是存放数据的存储单元地址")]),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"变量的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的定义"}},[a._v("#")]),a._v(" 变量的定义")]),a._v(" "),s("p",[a._v("定义变量：给变量在内存中分配一定的存储单元。也就是给这个存储单元赋与一个符号名，即变量名，同时还要将这些存储单元预置初置。")]),a._v(" "),s("p",[a._v("定义变量使用数据定义伪指令 "),s("code",[a._v("DB")]),a._v("、"),s("code",[a._v("DW")]),a._v("、"),s("code",[a._v("DD")]),a._v("、"),s("code",[a._v("DQ")]),a._v(" 和 "),s("code",[a._v("DT")]),a._v(" 等。")]),a._v(" "),s("p",[a._v("格式：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("VAR_DATA SEGMENT\nDATA1 DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 变量名 + 数据定义伪指令 + 初值")]),a._v("\nDATA2 DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("\nDATA3 DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5678H")]),a._v("\nVAR_DATA ENDS\n")])])]),s("h5",{attrs:{id:"变量的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的属性"}},[a._v("#")]),a._v(" 变量的属性")]),a._v(" "),s("ol",[s("li",[a._v("段属性（逻辑段）：上例 "),s("code",[a._v("DATA1")]),a._v(" "),s("code",[a._v("DATA2")]),a._v(" "),s("code",[a._v("DATA3")]),a._v(" 均在 "),s("code",[a._v("VAR_DATA")]),a._v(" 逻辑段")]),a._v(" "),s("li",[a._v("偏移量属性（偏移地址）：上例 "),s("code",[a._v("DATA1")]),a._v(" "),s("code",[a._v("DATA2")]),a._v(" "),s("code",[a._v("DATA3")]),a._v(" 的偏移量分别为 0, 1, 3")]),a._v(" "),s("li",[a._v("类型属性，如下：")])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("类型")]),a._v(" "),s("th",[a._v("中文")]),a._v(" "),s("th",[a._v("变量长度")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("DB")])]),a._v(" "),s("td",[a._v("Define Byte")]),a._v(" "),s("td",[a._v("1 字节")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("DW")])]),a._v(" "),s("td",[a._v("Define Word")]),a._v(" "),s("td",[a._v("2 字节")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("DD")])]),a._v(" "),s("td",[a._v("Define Doubleword")]),a._v(" "),s("td",[a._v("4 字节")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("DQ")])]),a._v(" "),s("td",[a._v("Define Quadword")]),a._v(" "),s("td",[a._v("8 字节")])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("DT")])]),a._v(" "),s("td",[a._v("Define Tenbytes")]),a._v(" "),s("td",[a._v("10 字节")])])])]),a._v(" "),s("h5",{attrs:{id:"变量的预置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的预置"}},[a._v("#")]),a._v(" 变量的预置")]),a._v(" "),s("ol",[s("li",[a._v("数值表达式")]),a._v(" "),s("li",[s("code",[a._v("?")]),a._v(" 表达式：表示预置任意内容（未赋初值）")]),a._v(" "),s("li",[a._v("字符串表达式")]),a._v(" "),s("li",[s("code",[a._v("DUP")]),a._v(" 表达式")])]),a._v(" "),s("h6",{attrs:{id:"数值表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值表达式"}},[a._v("#")]),a._v(" 数值表达式")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 1. 数值表达式")]),a._v("\nDATA1  DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DATA1 的内容为 32（20H）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DATA1+1 单元内容为30H")]),a._v("\n")])])]),s("h6",{attrs:{id:"表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[a._v("#")]),a._v(" ? 表达式")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DA"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("BYTE DB ?, ?, ?\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 表示让汇编程序分配三个字节存储单元")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 这些存储单元的内容的值为任意（未赋初值）")]),a._v("\n")])])]),s("h6",{attrs:{id:"字符串表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串表达式"}},[a._v("#")]),a._v(" 字符串表达式")]),a._v(" "),s("ul",[s("li",[a._v("字符串长度不超过 255 个字符")]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("DB")]),a._v(" 伪指令，会对每个字符分配一个字节单元，从左到右将各字符的 ASCII 码以地址递增的顺序依次存放")]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("DW")]),a._v(" 伪指令，可以给两个字符组成的字符串分配两个字节存储单元")]),a._v(" "),s("li",[a._v("但需要注意的是，两个字符的存放顺序是前一个字符放在高地址，后一字符放低地址单元")]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("DD")]),a._v(" 伪指令，只能给"),s("strong",[a._v("两个字符")]),a._v("组成的字符串分配 "),s("strong",[a._v("4 个字节单元")])]),a._v(" "),s("li",[a._v("两个字符存放在较低地址的两个字节单元中，存放顺序与 "),s("code",[a._v("DW")]),a._v(" 伪指令相同")]),a._v(" "),s("li",[a._v("而较高地址的两个字节单元存放 0")]),a._v(" "),s("li",[s("code",[a._v("DW")]),a._v(" 和 "),s("code",[a._v("DD")]),a._v(" 伪指令不能用两个以上字符构成的字符串赋初值")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 3. 字符串表达式")]),a._v("\nSTRING1  DB  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ABCDEF'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 低地址到高地址依次为 'A' 'B' 'C' 'D' 'E' 'F'")]),a._v("\n\nSTRING2 DW "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'AB'")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'CD'")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'EF'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 低地址到高地址依次为 'B' 'A' 'D' 'C' 'F' 'E'")]),a._v("\n\nSTRING3 DD, "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'AB'")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'CD'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 低地址到高地址依次为 'B' 'A' 0 0 'D' 'C' 0 0")]),a._v("\n")])])]),s("h6",{attrs:{id:"dup-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dup-表达式"}},[a._v("#")]),a._v(" DUP 表达式")]),a._v(" "),s("p",[a._v("DUP 称为重复数据操作符。其格式为："),s("code",[a._v("变量名 数据定义伪指令 重复次数 DUP(重复内容)")]),a._v("。")]),a._v(" "),s("p",[a._v("如：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA_A DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v(" DUP(?)\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 分配 16 个字节单元，不赋初值")]),a._v("\n\nDATA_B DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'AB'")]),a._v(")\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 分配 20H * 2 = 64 个字节单元，其内容为 'ABABAB'...")]),a._v("\n")])])]),s("p",[s("strong",[a._v("嵌套的 "),s("code",[a._v("DUP")])]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA_C DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("), "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(")\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 重复 10H 个数字序列（2、2、2、2、7），共占用 10H*5 = 50H 字节")]),a._v("\n")])])]),s("p",[s("code",[a._v("DUP")]),a._v(" 和 "),s("code",[a._v("DW")]),a._v(" 组合时，每个 "),s("code",[a._v("重复内容")]),a._v(" 占用两字节，例如：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA  DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("))\n")])])]),s("p",[a._v("DW 所指向的内存单元（每字节）为 "),s("code",[a._v("5")]),a._v(" "),s("code",[a._v("0")]),a._v(" "),s("code",[a._v("1")]),a._v(" "),s("code",[a._v("0")]),a._v(" "),s("code",[a._v("1")]),a._v(" "),s("code",[a._v("0")]),a._v(" "),s("code",[a._v("1")]),a._v(" "),s("code",[a._v("0")]),a._v(" "),s("code",[a._v("1")]),a._v(" "),s("code",[a._v("0")]),a._v(" "),s("code",[a._v("1")]),a._v(" "),s("code",[a._v("0")]),a._v(" "),s("code",[a._v("1")]),a._v(" "),s("code",[a._v("0")]),a._v("，共占用 14 字节。")]),a._v(" "),s("h6",{attrs:{id:"地址表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#地址表达式"}},[a._v("#")]),a._v(" 地址表达式")]),a._v(" "),s("p",[a._v("该地址表达式为一"),s("strong",[a._v("变量名")]),a._v("（或标号名），那么：")]),a._v(" "),s("ul",[s("li",[a._v("用伪指令 "),s("code",[a._v("DW")]),a._v(" 定义则是用它的"),s("strong",[a._v("偏移量")]),a._v("来初始化变量")]),a._v(" "),s("li",[a._v("用伪指令 "),s("code",[a._v("DD")]),a._v(" 定义则是用它的"),s("strong",[a._v("段基值和偏移量")]),a._v("来初始化变量，且段基值存放在高字单元，偏移量存放在低字单元")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 设以下变量的段基址为 0915H，NUM 的偏移地址为 0004H")]),a._v("\nNUM   DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("75H")]),a._v("\nARRAY DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\n\nADR1  DW NUM         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DW 时取 NUM 的偏移地址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ADR1 = 0004H")]),a._v("\n\nADR2  DD NUM         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DD 时取 NUM 的偏移地址（存入低字）和段基址（存入）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ADR2 = 0915 0004H")]),a._v("\n\nADR3  DW ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ADR3 = 0007H")]),a._v("\n")])])]),s("p",[a._v("注意：变量不能出现在 "),s("code",[a._v("DB")]),a._v(" 语句的右边，因为变量的偏移地址为 16 位，与 "),s("code",[a._v("DB")]),a._v(" 定义的变量长度不匹配。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/b0511e29b7cdda8e6854a123995af5eb1ba0228928dc5157ff13bb2d0d100edd.png",alt:"语句运行后的内存"}})]),a._v(" "),s("p",[a._v("注意，"),s("code",[a._v("ARRAY[2]")]),a._v(" 这样的形式，等价于 "),s("code",[a._v("OFFSET(ARRAY)+2")]),a._v("。"),s("strong",[a._v("和 C 语言不同的是，[2] 不会根据是 DB 还是 DW 而使用不同的偏移量，而是一律偏移 2")]),a._v("！可详见"),s("a",{attrs:{href:"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6"}},[a._v("算术运算符")]),a._v("。")]),a._v(" "),s("h6",{attrs:{id:"以上表达式组成的序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以上表达式组成的序列"}},[a._v("#")]),a._v(" 以上表达式组成的序列")]),a._v(" "),s("p",[a._v("如下：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("NUM DB 2 DUP(1), 2 DUP(2, 'B'), '123', 1, 2, 3\n; NUM 从低地址到高地址分别为 1 1 2 'B' 2 'B' '1' '2' '3' 1 2 3\n")])])]),s("h5",{attrs:{id:"变量的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的使用"}},[a._v("#")]),a._v(" 变量的使用")]),a._v(" "),s("p",[a._v("在指令语句中，"),s("strong",[a._v("直接引用变量名就是对其存储单元的内容进行存取")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DA1  DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FEH")]),a._v("\nDA2  DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("52ACH")]),a._v("\nDA3  DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", DA1   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 等价于 MOV  AL, 0FEH")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", DA2   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 等价于 MOV  BX, 52ACH")]),a._v("\nMOV  DA3, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将 DA3 变量赋值 52ACH，注意二者大小需要对应")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 变量是可以被重复赋值的")]),a._v("\n")])])]),s("ul",[s("li",[s("strong",[a._v("伪指令语句中，"),s("code",[a._v("DATA2 DB DATA1")]),a._v(" 为取 "),s("code",[a._v("DATA1")]),a._v(" 地址")])]),a._v(" "),s("li",[s("strong",[a._v("指令语句中，"),s("code",[a._v("MOV AL, DATA1")]),a._v(" 为取 "),s("code",[a._v("DATA1")]),a._v(" 存储的值")])])]),a._v(" "),s("h4",{attrs:{id:"符号和变量对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号和变量对比"}},[a._v("#")]),a._v(" 符号和变量对比")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th"),a._v(" "),s("th",[a._v("符号")]),a._v(" "),s("th",[a._v("变量")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("可变与否")]),a._v(" "),s("td",[a._v("类似于常量，不可变")]),a._v(" "),s("td",[a._v("可变")])]),a._v(" "),s("tr",[s("td",[a._v("定义")]),a._v(" "),s("td",[s("code",[a._v("EQU")]),a._v(" 或 "),s("code",[a._v("=")])]),a._v(" "),s("td",[s("code",[a._v("DB")]),a._v(" "),s("code",[a._v("DW")]),a._v(" 等")])]),a._v(" "),s("tr",[s("td",[a._v("地址空间")]),a._v(" "),s("td",[a._v("无")]),a._v(" "),s("td",[a._v("有段基址、偏移地址")])])])]),a._v(" "),s("h4",{attrs:{id:"标号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标号"}},[a._v("#")]),a._v(" 标号")]),a._v(" "),s("ul",[s("li",[a._v("标号 "),s("code",[a._v("label")]),a._v(" 加在一条指令的前面，它就是该指令在内存的存放地址的符号表示，也就是指令地址的别名")]),a._v(" "),s("li",[a._v("标号主要用在程序中需要改变程序的执行顺序时，用来标记转移的目的地")]),a._v(" "),s("li",[a._v("下面代码的 "),s("code",[a._v("LAB")]),a._v(" 和 "),s("code",[a._v("NEXT")]),a._v(" 即为标号")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LAB:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n      LOOP LAB\n      JNE NEXT       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";不为零转移")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT:")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n")])])]),s("h5",{attrs:{id:"标号的三个属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标号的三个属性"}},[a._v("#")]),a._v(" 标号的三个属性")]),a._v(" "),s("ol",[s("li",[a._v("段属性 "),s("code",[a._v("SEG")])])]),a._v(" "),s("p",[a._v("它表示该标号所代表的地址在哪个逻辑段中，即段基值。")]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("偏移量属性 "),s("code",[a._v("OFFSET")])])]),a._v(" "),s("p",[a._v("它表示该标号所代表的地址在段内与段起点间的字节数，即地址的偏移量。")]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("距离属性（也叫类型属性）")])]),a._v(" "),s("p",[a._v("它表示该标号可以被段内还是段间的指令调用。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("NEAR")]),a._v("（近）：用作段内转移，即只能是与该标号所指指令同在一个逻辑段的其它指令才能使用它")]),a._v(" "),s("li",[s("code",[a._v("FAR")]),a._v("（远）：可以被非本段的转移和调用指令使用")])]),a._v(" "),s("p",[a._v("标号的距离属性可以有两种方法来指定：")]),a._v(" "),s("p",[a._v("(1) 隐含方式")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("SUB1:")]),a._v(" MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("\n")])])]),s("p",[s("code",[a._v("SUB1")]),a._v(" 默认为 NEAR。")]),a._v(" "),s("p",[a._v("(2) 用 "),s("code",[a._v("LABEL")]),a._v(" 伪指令给标号指定距离属性")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("标号名 LABEL NEAR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("FAR\n")])])]),s("p",[a._v("该语句要与指令语句连用，如下：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("SUB1_FAR LABEL FAR\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("SUB1:")]),a._v(" MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("\n")])])]),s("p",[a._v("上文中，"),s("code",[a._v("SUB1_FAR")]),a._v(" 与 "),s("code",[a._v("SUB1")]),a._v(" 两个标号具有相同的逻辑地址。但 "),s("code",[a._v("SUB1")]),a._v(" 只能被本段调用，"),s("code",[a._v("SUB1_FAR")]),a._v(" 可以被其它段的指令调用。")]),a._v(" "),s("h5",{attrs:{id:"label-定义变量属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#label-定义变量属性"}},[a._v("#")]),a._v(" LABEL 定义变量属性")]),a._v(" "),s("p",[s("code",[a._v("LABEL")]),a._v(" 伪指令还可以用于定义变量的属性，即改变一个变量的属性，如把字变量的高低字节作为字节变量来处理。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA_BYTE  LABEL  BYTE\nDATA_WORD  DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("  DUP(?)\n")])])]),s("ul",[s("li",[s("code",[a._v("DATA_BYTE")]),a._v(" 与 "),s("code",[a._v("DATA_WORD")]),a._v(" 具有相同的段基址和偏移量")]),a._v(" "),s("li",[s("code",[a._v("DATA_BYTE")]),a._v(" 可以被用来存取一个字节数据，而 "),s("code",[a._v("DATA_WORD")]),a._v(" 则不能")])]),a._v(" "),s("h3",{attrs:{id:"符号定义语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号定义语句"}},[a._v("#")]),a._v(" 符号定义语句")]),a._v(" "),s("p",[a._v("符号定义语句将常数或表达式等形式用某个指定的符号来表示。在 8086/8088 汇编语言中有两种符号定义语句，分别为等值语句 "),s("code",[a._v("EQU")]),a._v(" 和等号语句 "),s("code",[a._v("=")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"等值语句-equ"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#等值语句-equ"}},[a._v("#")]),a._v(" 等值语句 EQU")]),a._v(" "),s("ul",[s("li",[a._v("格式："),s("code",[a._v("符号名 EQU 表达式")])]),a._v(" "),s("li",[a._v("功能：用符号名来表示 "),s("code",[a._v("EQU")]),a._v(" 右边的表达式。后面的程序中一旦出现该符号名，汇编程序将把它替换成该表达式。")]),a._v(" "),s("li",[a._v("类似于 C 的 "),s("code",[a._v("#define")])])]),a._v(" "),s("hr"),a._v(" "),s("p",[s("code",[a._v("表达式")]),a._v("：")]),a._v(" "),s("ol",[s("li",[a._v("常数或数值表达式")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("COUNT  EQU  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\nNUM    EQU  COUNT"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("地址表达式")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("ADR1   EQU  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("14")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("变量名、寄存器名或指令助记符")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CREG  EQU  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 在后面的程序使用CREG就是使用CX")]),a._v("\nCBD   EQU  DAA  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DAA为十进制调整指令")]),a._v("\n")])])]),s("p",[a._v("注意，同一符号不能用 "),s("code",[a._v("EQU")]),a._v(" 重复定义。")]),a._v(" "),s("h4",{attrs:{id:"等号语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#等号语句"}},[a._v("#")]),a._v(" 等号语句 =")]),a._v(" "),s("p",[a._v("格式："),s("code",[a._v("符号名=表达式")])]),a._v(" "),s("p",[a._v("等号语句与等值语句具有类似的作用，二者的区别是：")]),a._v(" "),s("ul",[s("li",[a._v("等号语句可以对一个符号进行多次定义")]),a._v(" "),s("li",[a._v("等号语句不能为助记符定义别名（诸如 "),s("code",[a._v("CBD=DAA")]),a._v(" 是错误的）")])]),a._v(" "),s("p",[a._v("等值语句与等号语句都不会为符号分配存储单元。所定义的符号没有段、偏离量和类型等属性。")]),a._v(" "),s("h3",{attrs:{id:"表达式与运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式与运算符"}},[a._v("#")]),a._v(" 表达式与运算符")]),a._v(" "),s("p",[a._v("表达式是指令或伪指令语句操作数的常见形式。它由常数、变量、标号等通过操作运算符连接而成。")]),a._v(" "),s("p",[s("strong",[a._v("任何表达式的值在程序被汇编的过程中进行计算确定，而不是到程序运行时才计算。")])]),a._v(" "),s("p",[a._v("8086/8088宏汇编语言中的操作运算符非常丰富，可以分为以下五类。")]),a._v(" "),s("ul",[s("li",[a._v("算术运算符")]),a._v(" "),s("li",[a._v("逻辑运算符")]),a._v(" "),s("li",[a._v("关系运算符")]),a._v(" "),s("li",[a._v("数值返回运算符")]),a._v(" "),s("li",[a._v("属性修改运算符")])]),a._v(" "),s("h4",{attrs:{id:"算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[a._v("#")]),a._v(" 算术运算符")]),a._v(" "),s("p",[a._v("包含 "),s("code",[a._v("+")]),a._v("、"),s("code",[a._v("-")]),a._v("、"),s("code",[a._v("*")]),a._v("、 "),s("code",[a._v("/")]),a._v(" 、"),s("code",[a._v("MOD")]),a._v("、"),s("code",[a._v("SHL")]),a._v("、"),s("code",[a._v("SHR")]),a._v("、"),s("code",[a._v("[ ]")]),a._v("。")]),a._v(" "),s("ol",[s("li",[a._v("运算符 "),s("code",[a._v("+")]),a._v(" 和 "),s("code",[a._v("-")]),a._v(" 也可作单目运算符，表示数的正负")]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("+")]),a._v("、"),s("code",[a._v("-")]),a._v("、"),s("code",[a._v("*")]),a._v(" 和 "),s("code",[a._v("/")]),a._v(" 运算符时，参加运算的数和运算结果都是"),s("strong",[a._v("整数")])]),a._v(" "),s("li",[s("code",[a._v("/")]),a._v(" 运算为取商的整数部分，而 "),s("code",[a._v("MOD")]),a._v(" 运算取除法运算的余数")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("NUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; NUM = 120")]),a._v("\nNUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("NUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; NUM = 17")]),a._v("\nNUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("NUM MOD "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; NUM = 2")]),a._v("\nNUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("NUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; NUM = 7")]),a._v("\nNUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("NUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; NUM = -10")]),a._v("\nNUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("NUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("NUM   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; NUM = 20")]),a._v("\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("code",[a._v("SHR")]),a._v(" 和 "),s("code",[a._v("SHL")]),a._v(" 为逻辑移位运算符")])]),a._v(" "),s("p",[s("code",[a._v("SHR")]),a._v(" 为右移，左边移出来的空位用 0 补入。\n"),s("code",[a._v("SHL")]),a._v(" 为左移，右边移出来的空位用 0 补入。")]),a._v(" "),s("p",[a._v("移位运算符（如上）与"),s("a",{attrs:{href:"#%E7%AE%97%E6%9C%AF%E5%B7%A6%E7%A7%BB-sal-%E9%80%BB%E8%BE%91%E5%B7%A6%E7%A7%BB-shl"}},[a._v("移位指令")]),a._v("区别：")]),a._v(" "),s("ul",[s("li",[a._v("移位运算符的操作对象只能是某一具体的数（"),s("strong",[a._v("常数")]),a._v("），在汇编（编译）时完成移位操作")]),a._v(" "),s("li",[a._v("而移位指令是"),s("strong",[a._v("对一个寄存器或存储单元内容")]),a._v("，在程序运行时执行移位操作")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("NUM"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11011011B")]),a._v("\n\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", NUM SHL "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AX=1 1011 0110B")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", NUM SHR "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BX= 11 0110B")]),a._v("\nADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", NUM SHR "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DX = 11B")]),a._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[a._v("下标运算符 "),s("code",[a._v("[ ]")]),a._v(" 具有相加的作用")])]),a._v(" "),s("p",[s("code",[a._v("MOV AX，DA_WORD[20H]")]),a._v(" 等价于 "),s("code",[a._v("MOV AX，DA_WORD+20H")]),a._v("。")]),a._v(" "),s("p",[a._v("不过，需要注意的是汇编的 "),s("code",[a._v("[ ]")]),a._v(" 和 C 语言不同：")]),a._v(" "),s("blockquote",[s("p",[a._v("C 语言中，如果变量 "),s("code",[a._v("DA_WORD")]),a._v(" 为 2 字节，"),s("code",[a._v("DA_WORD[20H]")]),a._v(" 为 DA_WORD 偏移 20H*2 字节后的内容；而汇编中只是普通的加法，"),s("code",[a._v("DA_WORD[20H]")]),a._v(" 为 DA_WORD 偏移 20H 字节后的内容。")])]),a._v(" "),s("p",[a._v("以下语句均等价：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 基址变址寻址")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),a._v("ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),a._v("ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),a._v("ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("以下为错误语句：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("，ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("，ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("，ARRAY"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("DA_WORD\n")])])]),s("h4",{attrs:{id:"逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[a._v("#")]),a._v(" 逻辑运算符")]),a._v(" "),s("p",[a._v("逻辑运算符有NOT、AND、OR和XOR等四个，它们执行的都是按位逻辑运算。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("，NOT "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F0H")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 0FF0FH")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", NOT "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F0H")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 0FH")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("55H")]),a._v(" AND "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F0H")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 50H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("55H")]),a._v(" OR "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F0H")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 0F5H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("55H")]),a._v(" XOR "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F0H")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 0A5H")]),a._v("\n")])])]),s("h4",{attrs:{id:"关系运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[a._v("#")]),a._v(" 关系运算符")]),a._v(" "),s("ul",[s("li",[a._v("关系运算符包括："),s("code",[a._v("EQ")]),a._v("（等于）、"),s("code",[a._v("NE")]),a._v("（不等于）、"),s("code",[a._v("LT")]),a._v("（小于，less than）、 "),s("code",[a._v("LE")]),a._v("（小于等于）、"),s("code",[a._v("GT")]),a._v("（大于）、 "),s("code",[a._v("GE")]),a._v("（大于等于）")]),a._v(" "),s("li",[a._v("关系运算符用来比较两个表达式的大小。比较的两个表达式必须同为"),s("strong",[a._v("常数")]),a._v("或"),s("strong",[a._v("同一逻辑段中的变量")])]),a._v(" "),s("li",[a._v("若是常量的比较，则按"),s("strong",[a._v("无符号数")]),a._v("进行比较；若是变量的比较，则比较它们的"),s("strong",[a._v("偏移量")]),a._v("的大小。")]),a._v(" "),s("li",[a._v("关系运算的结果只能是"),s("code",[a._v("真")]),a._v("（"),s("strong",[a._v("全 1")]),a._v("）或"),s("code",[a._v("假")]),a._v("（"),s("strong",[a._v("全 0")]),a._v("）")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FH")]),a._v(" EQ "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1111B")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AX = 0FFFF")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FH")]),a._v(" NE "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1111B")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BX = 0")]),a._v("\n\nVAR  DW NUM LT "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0ABH")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 若符号常量 NUM 值小于 0ABH，则 DW=0FFFFH；否则为 0")]),a._v("\n")])])]),s("h4",{attrs:{id:"数值返回运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值返回运算符"}},[a._v("#")]),a._v(" 数值返回运算符")]),a._v(" "),s("p",[a._v("该类运算符有 5 个，它们可以将变量或标号的某些特征值或存储单元地址的一部分提取出来。")]),a._v(" "),s("h5",{attrs:{id:"seg-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#seg-运算符"}},[a._v("#")]),a._v(" SEG 运算符")]),a._v(" "),s("p",[a._v("取变量或标号所在段的段基址。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 设 DATA 逻辑段段基址为 1FFEH")]),a._v("\nDATA  SEGMENT\nK1  DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nK2  DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", SEG  K1\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", SEG  K2\n")])])]),s("p",[a._v("两条 MOV 指令将被汇编为：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1FFEH")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1FFEH")]),a._v("\n")])])]),s("h5",{attrs:{id:"offset-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#offset-运算符"}},[a._v("#")]),a._v(" OFFSET 运算符")]),a._v(" "),s("p",[a._v("该运算符的作用是取变量或标号在段内的偏移地址。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA SEGMENT\nVAR1  DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nVAR2  DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5A49H")]),a._v("\nADDR  DW  VAR2         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ADDR=20H")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("，VAR2          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BX=5A49H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", OFFSET VAR2   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; SI=20H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(", ADDR          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; DI=20H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BP")]),a._v("，OFFSET ADDR   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BP=22H")]),a._v("\n")])])]),s("p",[a._v("获取变量的偏移量还可以用指令 "),s("code",[a._v("LEA")]),a._v("。")]),a._v(" "),s("p",[a._v("需要注意的是：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", OFFSET DATA"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误，个人猜测是因为 OFFSET 只能取最简单的 *变量* 的偏移地址")]),a._v("\n\nLEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", DATA"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 正确")]),a._v("\n")])])]),s("p",[a._v("另外，"),s("code",[a._v("OFFSET")]),a._v(" 和 "),s("code",[a._v("SEG")]),a._v(" 的返回值可认为是立即数，不能直接 "),s("code",[a._v("MOV")]),a._v(" 进 "),s("code",[a._v("DS")]),a._v("、"),s("code",[a._v("ES")]),a._v("（见"),s("a",{attrs:{href:"#%E4%B8%80%E8%88%AC%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4-mov"}},[a._v("MOV 指令")]),a._v("）。解决办法是经过 AX 中转。")]),a._v(" "),s("h5",{attrs:{id:"type-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-运算符"}},[a._v("#")]),a._v(" TYPE 运算符")]),a._v(" "),s("p",[a._v("作用：取变量或标号的类型属性，并用数字形式表示。对变量来说就是取它的字节长度。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("类型")]),a._v(" "),s("th",[a._v("返回值")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("BYTE")]),a._v(" "),s("td",[a._v("1")])]),a._v(" "),s("tr",[s("td",[a._v("WORD")]),a._v(" "),s("td",[a._v("2")])]),a._v(" "),s("tr",[s("td",[a._v("DWORD")]),a._v(" "),s("td",[a._v("4")])]),a._v(" "),s("tr",[s("td",[a._v("QWORD")]),a._v(" "),s("td",[a._v("8")])]),a._v(" "),s("tr",[s("td",[a._v("TBYTE")]),a._v(" "),s("td",[a._v("10")])]),a._v(" "),s("tr",[s("td",[a._v("NEAR 标号")]),a._v(" "),s("td",[a._v("-1")])]),a._v(" "),s("tr",[s("td",[a._v("FAR 标号")]),a._v(" "),s("td",[a._v("-2")])])])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("V1   DB   "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ABCDE'")]),a._v("\nV2   DW   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1234H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5678H")]),a._v("\nV3   DD   V2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(",  TYPE  V1     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AL = 1")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(",  TYPE  V2     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CL = 2")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CH")]),a._v(",  TYPE  V3     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CH = 4")]),a._v("\n")])])]),s("h5",{attrs:{id:"length-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#length-运算符"}},[a._v("#")]),a._v(" LENGTH 运算符")]),a._v(" "),s("ul",[s("li",[a._v("该运算符用于取变量的长度")]),a._v(" "),s("li",[a._v("如果变量是用重复数据操作符 "),s("code",[a._v("DUP")]),a._v(" 说明的,则 "),s("code",[a._v("LENGTH")]),a._v(" 运算取"),s("strong",[a._v("最外层 DUP")]),a._v("的重复值。")]),a._v(" "),s("li",[a._v("如果没有用 "),s("code",[a._v("DUP")]),a._v(" 说明，则 "),s("code",[a._v("LENGTH")]),a._v(" 运算返回值"),s("strong",[a._v("总是 1")]),a._v("。")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("K1  DB   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nK2  DB   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("40H")]),a._v("\nK3  DW   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP ("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("))\nK4  DB   "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ABCDEFGH'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(",  LENGTH   K1   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (AL)=10H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(",  LENGTH   K2   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (BL)=1")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(",  LENGTH   K3   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (CX)=20H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(",  LENGTH   K4   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (DX)=1")]),a._v("\n")])])]),s("p",[a._v("从上例可以看出，"),s("code",[a._v("LENGTH")]),a._v(" 并不能求得字符串变量的长度，还是需要"),s("a",{attrs:{href:"#%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE%E8%AE%A1%E6%95%B0%E5%99%A8-%E4%B8%8E%E5%AE%9A%E4%BD%8D%E4%BC%AA%E6%8C%87%E4%BB%A4-ORG"}},[a._v("$ 符号")])]),a._v(" "),s("h5",{attrs:{id:"size-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#size-运算符"}},[a._v("#")]),a._v(" SIZE 运算符")]),a._v(" "),s("ul",[s("li",[a._v("该运算符只能用于变量")]),a._v(" "),s("li",[s("strong",[a._v("SIZE = LENGTH * TYPE")])])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("，SIZE  K1     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (AL)=10H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v("，SIZE  K2     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (BL)=1")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("，SIZE  K3     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (CL)=20H*2=40H")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DL")]),a._v("，SIZE  K4     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; (DL)=1")]),a._v("\n")])])]),s("h4",{attrs:{id:"属性修改运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性修改运算符"}},[a._v("#")]),a._v(" 属性修改运算符")]),a._v(" "),s("p",[a._v("这一类运算符用来对变量、标号或存储器操作数的类型属性进行修改或指定。")]),a._v(" "),s("h5",{attrs:{id:"ptr-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ptr-运算符"}},[a._v("#")]),a._v(" PTR 运算符")]),a._v(" "),s("ul",[s("li",[a._v("格式："),s("code",[a._v("类型 PTR 地址表达式")])]),a._v(" "),s("li",[a._v("作用: 将地址表达式所指定的标号、变量或用其它形式表示的存储器地址的类型属性"),s("strong",[a._v("临时")]),a._v("修改为“类型”所指的值")]),a._v(" "),s("li",[a._v("类型："),s("code",[a._v("BYTE")]),a._v("、"),s("code",[a._v("WORD")]),a._v("、"),s("code",[a._v("DWORD")]),a._v("、"),s("code",[a._v("NEAR")]),a._v(" 或 "),s("code",[a._v("FAR")])]),a._v(" "),s("li",[a._v("这种修改是临时的，只在含有该运算符的语句内有效，类似于 C 语言 "),s("code",[a._v("(char)i")]),a._v(" 强制转换。")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DA_BYTE  DB   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("  DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nDA_WORD  DW   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30H")]),a._v("  DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",  WORD PTR  DA_BYTE"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nADD  BYTE PTR  DA_WORD"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v("\nINC  BYTE PTR  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nSUB  WORD PTR  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\nJMP  FAR  PTR  SUB1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 指明SUB1不是本段中的地址")]),a._v("\n\nMOV  WORD PTR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0120H")]),a._v("\n")])])]),s("p",[a._v("注意最后一行，将立即数存入 "),s("code",[a._v("[SI]")]),a._v(" 指明的内存时，必须使用 "),s("code",[a._v("BYTE/WORD PTR")]),a._v(" 显式指明立即数的长度是 8 位还是 16 位，因为立即数和 "),s("code",[a._v("[SI]")]),a._v(" 的长度都是不一定的。寄存器值存入内存则不需要，因为寄存器隐式地给出了长度。")]),a._v(" "),s("h5",{attrs:{id:"high-low-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#high-low-运算符"}},[a._v("#")]),a._v(" HIGH/LOW 运算符")]),a._v(" "),s("p",[a._v("格式："),s("code",[a._v("HIGH 表达式")]),a._v(" "),s("code",[a._v("LOW 表达式")])]),a._v(" "),s("p",[a._v("用来将"),s("strong",[a._v("表达式的值")]),a._v("分离出高字节和低字节。")]),a._v(" "),s("ul",[s("li",[a._v("如果表达式为一个常量，则将其分离成高 8 位和低 8 位")]),a._v(" "),s("li",[a._v("如果表达式是一个地址（段基值或偏移量）时，则分离出它的高字节和低字节")]),a._v(" "),s("li",[s("code",[a._v("HIGH/LOW")]),a._v(" 运算符"),s("strong",[a._v("不能分离寄存器、存储器单元或变量中的内容")]),a._v("。")]),a._v(" "),s("li",[a._v("分离变量的段基址、偏移量时，需要配合 "),s("code",[a._v("SEG")]),a._v(" 和 "),s("code",[a._v("OFFSET")]),a._v("。这是符合“变量在伪指令中是偏移地址，在指令中是存储器中内容”的。")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 设 DATA 段的段基址为 0926H")]),a._v("\nDATA  SEGMENT\nCONST EQU "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0ABCDH")]),a._v("\nDA1   DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nDA2   DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nDATA  ENDS\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\nMOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", HIGH CONST         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AH = 0ABH")]),a._v("\nMOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", LOW  CONST         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; AL = 0CDH")]),a._v("\nMOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BH")]),a._v(", HIGH (OFFSET DA1)  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BH = 00H")]),a._v("\nMOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", LOW  (OFFSET DA2)  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; BL = 10H")]),a._v("\nMOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CH")]),a._v(", HIGH (SEG DA1)     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CH = 09H")]),a._v("\nMOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", LOW  (SEG DA2)     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; CL = 26H")]),a._v("\n")])])]),s("h4",{attrs:{id:"运算符的优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符的优先级"}},[a._v("#")]),a._v(" 运算符的优先级")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("优先级别")]),a._v(" "),s("th",[a._v("运算符")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("（最高）1")]),a._v(" "),s("td",[s("code",[a._v("LENGTH")]),a._v(", "),s("code",[a._v("SIZE")]),a._v(", "),s("code",[a._v("( )")])])]),a._v(" "),s("tr",[s("td",[a._v("2")]),a._v(" "),s("td",[s("code",[a._v("PTR")]),a._v(", "),s("code",[a._v("OFFSET")]),a._v(", "),s("code",[a._v("SEG")]),a._v(", "),s("code",[a._v("TYPE")]),a._v(", "),s("code",[a._v("THIS")])])]),a._v(" "),s("tr",[s("td",[a._v("3")]),a._v(" "),s("td",[s("code",[a._v("HIGH")]),a._v(", "),s("code",[a._v("LOW")])])]),a._v(" "),s("tr",[s("td",[a._v("4")]),a._v(" "),s("td",[s("code",[a._v("*")]),a._v(", "),s("code",[a._v("/")]),a._v(", "),s("code",[a._v("MOD")]),a._v(", "),s("code",[a._v("SHR")]),a._v(", "),s("code",[a._v("SHL")])])]),a._v(" "),s("tr",[s("td",[a._v("5")]),a._v(" "),s("td",[s("code",[a._v("+")]),a._v(", `-")])]),a._v(" "),s("tr",[s("td",[a._v("6")]),a._v(" "),s("td",[s("code",[a._v("EQ")]),a._v(", "),s("code",[a._v("NE")]),a._v(", "),s("code",[a._v("LT")]),a._v(", "),s("code",[a._v("LE")]),a._v(", "),s("code",[a._v("GT")]),a._v(", "),s("code",[a._v("GE")])])]),a._v(" "),s("tr",[s("td",[a._v("7")]),a._v(" "),s("td",[s("code",[a._v("NOT")])])]),a._v(" "),s("tr",[s("td",[a._v("8")]),a._v(" "),s("td",[s("code",[a._v("AND")])])]),a._v(" "),s("tr",[s("td",[a._v("（最低）9")]),a._v(" "),s("td",[s("code",[a._v("OR")]),a._v(", "),s("code",[a._v("XOR")])])])])]),a._v(" "),s("p",[a._v("相同优先级别的操作，从左到右进行。")]),a._v(" "),s("h3",{attrs:{id:"程序的段结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序的段结构"}},[a._v("#")]),a._v(" 程序的段结构")]),a._v(" "),s("p",[a._v("8086/8088 将内存按逻辑段进行管理，不同的逻辑段可以用来存放不同目的的内容。")]),a._v(" "),s("p",[a._v("在程序中使用四个段寄存器CS,DS,ES和SS来访问它们。")]),a._v(" "),s("p",[a._v("在源程序中，使用伪指令来定义和使用这些逻辑段。")]),a._v(" "),s("h4",{attrs:{id:"段定义伪指令-segment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段定义伪指令-segment"}},[a._v("#")]),a._v(" 段定义伪指令 SEGMENT")]),a._v(" "),s("p",[a._v("伪指令 "),s("code",[a._v("SEGMENT")]),a._v(" 和 "),s("code",[a._v("ENDS")]),a._v(" 用于定义一个逻辑段，分别表示定义的开始与结束。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("段名  SEGMENT "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),a._v("定位类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),a._v("组合类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'类别名'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n段名  ENDS\n")])])]),s("h5",{attrs:{id:"段名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段名"}},[a._v("#")]),a._v(" 段名")]),a._v(" "),s("p",[a._v("段名：由用户定义。")]),a._v(" "),s("h5",{attrs:{id:"定义类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义类型"}},[a._v("#")]),a._v(" 定义类型")]),a._v(" "),s("p",[a._v("定位类型：段的起始数据边界，即第一个可存放数据的位置（不是段基地址）。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("定位类型")]),a._v(" "),s("th",[a._v("含义")]),a._v(" "),s("th",[a._v("段的起始边界")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[s("code",[a._v("PAGE")])]),a._v(" "),s("td",[a._v("该段从一个页面的边界开始")]),a._v(" "),s("td",[s("code",[a._v("xxxx xxxx xxxx 0000 0000")])])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("PARA")]),a._v("（默认）")]),a._v(" "),s("td",[a._v("该段从一个小节的边界开始")]),a._v(" "),s("td",[s("code",[a._v("xxxx xxxx xxxx xxxx 0000")])])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("DWORD")])]),a._v(" "),s("td",[a._v("该段从一个双字的边界开始")]),a._v(" "),s("td",[s("code",[a._v("xxxx xxxx xxxx xxxx xx00")])])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("WORD")])]),a._v(" "),s("td",[a._v("该段从一个偶数字节地址开始")]),a._v(" "),s("td",[s("code",[a._v("xxxx xxxx xxxx xxxx xxx0")])])]),a._v(" "),s("tr",[s("td",[s("code",[a._v("BYTE")])]),a._v(" "),s("td",[a._v("该段起始数据单元地址可以是任一地址值")]),a._v(" "),s("td",[s("code",[a._v("xxxx xxxx xxxx xxxx xxxx")])])])])]),a._v(" "),s("p",[a._v("定位类型为 "),s("code",[a._v("PAGE")]),a._v(" 和 "),s("code",[a._v("PARA")]),a._v(" 时，段的起始边界直接选用段基址，即它们是重合的。定位类型为 "),s("code",[a._v("DWORD")]),a._v("、"),s("code",[a._v("WORD")]),a._v(" 和 "),s("code",[a._v("BYTE")]),a._v(" 时，段的起始边界与段基址可能不同。")]),a._v(" "),s("h5",{attrs:{id:"组合类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合类型"}},[a._v("#")]),a._v(" 组合类型")]),a._v(" "),s("p",[a._v("组合类型说明符用来指定段与段之间的连接关系和定位。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("默认")]),a._v("：未指定组合类型，表示本段与其它段无连接关系\n"),s("ul",[s("li",[a._v("在装入内存时，本段有自己的物理段，因此有自己的段基址")])])]),a._v(" "),s("li",[s("code",[a._v("PUBLIC")]),a._v("：将该逻辑段接在前一逻辑段后面，形成新逻辑段\n"),s("ul",[s("li",[a._v("在满足定位类型的前提下，将与该段同名的段邻接在一起，形成一个新的逻辑段，共用一个段基址。段内的所有偏移量调整为相对于新逻辑段的段基址")])])]),a._v(" "),s("li",[s("code",[a._v("COMMON")]),a._v("：产生一个覆盖段\n"),s("ul",[s("li",[a._v("在多个模块连接时，把该段与其它也用 "),s("code",[a._v("COMMON")]),a._v(" 说明的同名段诉汇编程序，在处理置成相同的段基址，这样可达到共享同一存储区。共享存储区的长度由同名段中最大的段确定")])])]),a._v(" "),s("li",[s("code",[a._v("STACK")]),a._v("：将该段作为栈使用\n"),s("ul",[s("li",[a._v("把所有同名段连接成一个连续段，且系统自动对 "),s("code",[a._v("SS")]),a._v(" 段寄存器初始化为该连续段的段基址，并初始化堆栈指针 "),s("code",[a._v("SP")])]),a._v(" "),s("li",[a._v("用户程序中应至少有一个段用 "),s("code",[a._v("STACK")]),a._v(" 说明，否则需要用户程序自己初始化 "),s("code",[a._v("SS")]),a._v(" 和 "),s("code",[a._v("SP")]),a._v("。")])])]),a._v(" "),s("li",[s("code",[a._v("AT")]),a._v(" 表达式：手动指定段基址\n"),s("ul",[s("li",[a._v("表示本段可定位在表达式所指示的小节边界上")]),a._v(" "),s("li",[a._v("表达式的值就是段基值")])])]),a._v(" "),s("li",[s("code",[a._v("MEMORY")]),a._v("：本段在存储器中应定位在所有其它段之后的最高地址上\n"),s("ul",[s("li",[a._v("如果有多个用 "),s("code",[a._v("MEMORY")]),a._v(" 说明的段，则只处理第一个用 "),s("code",[a._v("MEMORY")]),a._v(" 说明的段，其余的被视为 "),s("code",[a._v("COMMON")])])])])]),a._v(" "),s("h5",{attrs:{id:"类别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类别名"}},[a._v("#")]),a._v(" 类别名")]),a._v(" "),s("p",[a._v("类别名为某一个段或几个相同类型段设定类型名称。")]),a._v(" "),s("p",[a._v("系统在进行连接处理时，把类别名相同的段存放在相邻的存储区，但段的划分与使用仍按原来的设定。")]),a._v(" "),s("p",[a._v("类别名必须用单引号引起来。所用字符串可任意选定，但它不能使用程序中的标号、变量名或其它定义的符号。")]),a._v(" "),s("h5",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[a._v("#")]),a._v(" 示例")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("STACK1   SEGMENT  PARA  STACK  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'STACK0'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";......")]),a._v("\nSTACK1   ENDS\n\nDATA1    SEGMENT  PARA  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'DATA'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";......")]),a._v("\nDATA1    ENDS\n\nSTACK2   SEGMENT  PARA  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'STACK0'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";......")]),a._v("\nSTACK2   ENDS\n\nCODE     SEGMENT  PARA  MEMORY\n         ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA1,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("MAIN:")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";......")]),a._v("\nCODE     ENDS\nDATA2    SEGMENT  BYTE  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'DATA'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";......")]),a._v("\nDATA2    ENDS\n         END  MAIN\n")])])]),s("p",[s("img",{attrs:{src:"/images/53370a4fb2bf4b1da148c557821ee3a6fcf283ec757ff6f54c002257de0cc901.png",alt:"该程序经LINK程序连接处理后装入内存的示意图"}})]),a._v(" "),s("ul",[s("li",[a._v("在段定义中选用了 "),s("code",[a._v("PARA")]),a._v(" 说明，则该段起始单元与前面已分配存储单元之间可能存在一些未使用的空白")]),a._v(" "),s("li",[s("code",[a._v("CODE")]),a._v(" 段的组合类型为 "),s("code",[a._v("MEMORY")]),a._v("，因此被装入在其它段之后（最高地址）")])]),a._v(" "),s("h4",{attrs:{id:"段寻址伪指令-assume"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段寻址伪指令-assume"}},[a._v("#")]),a._v(" 段寻址伪指令 ASSUME")]),a._v(" "),s("p",[a._v("ASSUME的作用是告诉汇编程序，在处理源程序时，定义的段与哪个段寄存器关联。")]),a._v(" "),s("p",[a._v("ASSUME并不设置各个段寄存器的具体内容，段寄存器的值是在程序运行时设定的。所以，一般需要同时使用：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":段名\n\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", 段名\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n")])])]),s("p",[a._v("一般格式："),s("code",[a._v("ASSUME 段寄存器名: 段名, 段寄存器名:段名......")])]),a._v(" "),s("ul",[s("li",[a._v("段寄存器名："),s("code",[a._v("CS")]),a._v(", "),s("code",[a._v("DS")]),a._v(", "),s("code",[a._v("ES")]),a._v(" 或 "),s("code",[a._v("SS")])]),a._v(" "),s("li",[a._v("段名：用 "),s("code",[a._v("SEGMENT/ENDS")]),a._v(" 定义。")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA1  SEGMENT\nVAR1   DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12H")]),a._v("\nDATA1  ENDS\n\nDATA2  SEGMENT\nVAR2   DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("34H")]),a._v("\nDATA2  ENDS\n\nCODE   SEGMENT\nVAR3   DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("56H")]),a._v("\n       ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA1, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(":DATA2\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; .....")]),a._v("\n       INC  VAR1\n       INC  VAR2\n       INC  VAR3\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ......")]),a._v("\nCODE   ENDS\n       END START\n")])])]),s("p",[a._v("例如上面程序中的 3 条 INC 指令：")]),a._v(" "),s("ul",[s("li",[a._v("第 1 条 INC 指令要访问的变量 VAR1 在逻辑段 DATA1 中，由于一般操作数寻址隐含使用的是 DS，而 DATA1 又正是与 DS 对应，所以指令 "),s("code",[a._v("INC VAR1")]),a._v(" 就可以直接汇编成目标代码 "),s("code",[a._v("FE 06 0000")])]),a._v(" "),s("li",[a._v("第 2 条 INC 指令要访问的变量 VAR2 在逻辑段 DATA2 中，而 DATA2 是与 ES 对应的，要正确执行这条指令必须使用段前缀（即用 ES 替代 DS），因此汇编程序在汇编这条指令时就自动产生一个段前缀标记代码 26，所以指令 "),s("code",[a._v("INC VAR2")]),a._v(" 在这个程序中汇编的目标代码为 "),s("code",[a._v("26 FE 06 0000")])]),a._v(" "),s("li",[a._v("与第 2条 INC 指令类似，第 3 条 INC 指令要访问的变量 VAR3 在逻辑段 CODE 中，指令汇编时自动产生一个段前缀标记代码 2E 表示用 CS 替代 DS，所以指令 "),s("code",[a._v("INC VAR3")]),a._v(" 汇编的目标代码为 "),s("code",[a._v("2E FE 06 0000")])])]),a._v(" "),s("p",[a._v("可以使用关键字 "),s("code",[a._v("NOTHING")]),a._v(" 将前面的设置删除。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(":NOTHING    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 删除前面对 ES 与某个定义段的关联")]),a._v("\nASSUME  NOTHING       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 删除全部 4 个段寄存器的设置")]),a._v("\n")])])]),s("hr"),a._v(" "),s("p",[a._v("但是 ASSUME 的存在意义依然有点奇怪："),s("code",[a._v("DS")]),a._v(" 被改为段基址以后，想知道 "),s("code",[a._v("DS")]),a._v(" 和谁被关联了，读一下 "),s("code",[a._v("DS")]),a._v(" 不就行了吗，为什么还要 "),s("code",[a._v("ASSUME")]),a._v(" 呢？")]),a._v(" "),s("p",[a._v("搜索了一下，大概明白了：")]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("ASSUME")]),a._v(" 是给汇编程序看的，而 "),s("code",[a._v("MOV AX, DATA")]),a._v(" "),s("code",[a._v("MOV DS, AX")]),a._v(" 是给 CPU 看的。")])]),a._v(" "),s("p",[a._v("汇编的时候，代码还没在 CPU 里跑，自然是没法读取 "),s("code",[a._v("DS")]),a._v(" 的，所以要通过 "),s("code",[a._v("ASSUME")]),a._v(" 语句设定。")]),a._v(" "),s("h4",{attrs:{id:"段寄存器的装入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#段寄存器的装入"}},[a._v("#")]),a._v(" 段寄存器的装入")]),a._v(" "),s("p",[a._v("从上面可以看出，要让一个段寄存器真正地指向某个逻辑段，一般需要两个步骤：")]),a._v(" "),s("ol",[s("li",[a._v("将段基值装入到该段寄存器")]),a._v(" "),s("li",[a._v("将段和段基址建立关联（常用 "),s("code",[a._v("ASSUME")]),a._v(" 语句实现）")])]),a._v(" "),s("h5",{attrs:{id:"ds-和-es-的装入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ds-和-es-的装入"}},[a._v("#")]),a._v(" DS 和 ES 的装入")]),a._v(" "),s("p",[a._v("下面是一个错误示范：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA1   SEGMENT\nDBYTE1  DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12H")]),a._v("\nDATA1   ENDS\nDATA2   SEGMENT\nDBYTE2  DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("14H")]),a._v(" DUP(?)\nDATA2   ENDS\n\nCODE    SEGMENT\n        ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",DATA1\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",DATA2\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(",DBYTE1    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 正确")]),a._v("\n        MOV  DBYTE2"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 错误，因为 ASSUME 指令中未指定 ES 与 DATA2 关联")]),a._v("\nCODE   ENDS\n")])])]),s("p",[a._v("使用逻辑段前需要进行两个步骤：")]),a._v(" "),s("ul",[s("li",[a._v("使用 "),s("code",[a._v("ASSUME ES: DATA2")]),a._v(" 建立 "),s("code",[a._v("ES")]),a._v(" 和 "),s("code",[a._v("DATA2")]),a._v(" 的联系")]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("MOV AX,DATA2")]),a._v(" "),s("code",[a._v("MOV ES,AX")]),a._v(" 将 "),s("code",[a._v("DATA2")]),a._v(" 段基址装入 "),s("code",[a._v("ES")])])]),a._v(" "),s("p",[a._v("如果已经将段基址装入了 "),s("code",[a._v("ES")]),a._v("，也可以临时指明段前缀：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ES")]),a._v(":DBYTE2"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(",  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n")])])]),s("h5",{attrs:{id:"ss-的装入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ss-的装入"}},[a._v("#")]),a._v(" SS 的装入")]),a._v(" "),s("p",[a._v("在"),s("a",{attrs:{href:"#%E7%BB%84%E5%90%88%E7%B1%BB%E5%9E%8B"}},[a._v("段的组合类型")]),a._v("中提到，若将一个段声明为 "),s("code",[a._v("STACK")]),a._v("，系统会自动初始化 "),s("code",[a._v("SS")]),a._v(" 和 "),s("code",[a._v("SP")]),a._v(" 寄存器为对应的值。")]),a._v(" "),s("p",[a._v("因此，"),s("code",[a._v("SS")]),a._v(" 的装入有两种方法：")]),a._v(" "),s("ol",[s("li",[a._v("手动使用 "),s("code",[a._v("MOV")]),a._v(" 装入 "),s("code",[a._v("SS")]),a._v(" 和 "),s("code",[a._v("SP")]),a._v("，然后 "),s("code",[a._v("ASSUME SS:段名")])])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA_STACK   SEGMENT\n        DB   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("40H")]),a._v(" DUP(?)\n       TOP   LABEL  WORD\nDATA_STACK   ENDS\n\nCODE         SEGMENT\n       MOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",DATA_STACK\n       MOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n       MOV   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SP")]),a._v(",OFFSET TOP\n")])])]),s("p",[a._v("上述例子中，"),s("code",[a._v("SS=DATA_STACK")]),a._v("，"),s("code",[a._v("SP=TOP=40H")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("定义段时使用 "),s("code",[a._v("STACK")]),a._v(" 作为组合类型（系统自动装入 "),s("code",[a._v("SS")]),a._v(" 和 "),s("code",[a._v("SP")]),a._v("），然后 "),s("code",[a._v("ASSUME SS:段名")])])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("STACK1  SEGMENT  PARA  STACK\n        DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("40H")]),a._v(" DUP(?)\nSTACK1  ENDS\n\nCODE    SEGMENT\n        ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n")])])]),s("p",[a._v("上述例子中，"),s("code",[a._v("SS=STACK1")]),a._v("，"),s("code",[a._v("SP=40H")])]),a._v(" "),s("h5",{attrs:{id:"cs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cs"}},[a._v("#")]),a._v(" CS")]),a._v(" "),s("p",[a._v("CPU在执行指令之前根据CS和IP的内容来从内存中取指令,即必须在程序执行之前装入CS和IP的值。因此,CS和IP的初始值就不能用可执行语句来装入。")]),a._v(" "),s("p",[a._v("装入CS和IP一般有下面两种情况。")]),a._v(" "),s("ol",[s("li",[a._v("程序加载到主存时，由系统软件给CS和IP赋予初始值")])]),a._v(" "),s("p",[a._v("结束伪指令格式："),s("code",[a._v("END 起始地址")])]),a._v(" "),s("ul",[s("li",[a._v("起始地址: 是一个标号或表达式，它必须是程序中第一条指令语句前所加的标号，如前文的 "),s("code",[a._v("END MAIN")])]),a._v(" "),s("li",[a._v("汇编源程序必须以END伪指令结束")]),a._v(" "),s("li",[a._v("END伪指令指示源程序结束并指定程序运行时的第一条指令的地址（起始地址）")]),a._v(" "),s("li",[a._v("起始地址段基址和偏移量被分别装入CS和IP中")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CODE   SEGMENT\n       ASSUME  CS:CODE,......\nSTART:\n; ...\nCODE   ENDS\n       END START\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("程序运行期间，当执行某些指令时，CPU自动修改CS和IP，使它们指向新的代码段。")])]),a._v(" "),s("ul",[s("li",[a._v("执行段间过程调用CALL和段间返回指令RET；")]),a._v(" "),s("li",[a._v("执行段间无条件转移指令JMP;")]),a._v(" "),s("li",[a._v("响应中断及中断返回指令；")]),a._v(" "),s("li",[a._v("执行硬件复位操作。")])]),a._v(" "),s("h5",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("ul",[s("li",[a._v("修改 DS、ES：\n"),s("ol",[s("li",[s("code",[a._v("MOV")]),a._v(" + "),s("code",[a._v("ASSUME")])]),a._v(" "),s("li",[s("code",[a._v("MOV")]),a._v(" + 临时指明段基址 "),s("code",[a._v("ES:段名")])])])]),a._v(" "),s("li",[a._v("修改 SS：\n"),s("ol",[s("li",[a._v("声明段为 "),s("code",[a._v("STACK")]),a._v(" + "),s("code",[a._v("ASSUME")])]),a._v(" "),s("li",[s("code",[a._v("MOV")]),a._v(" + "),s("code",[a._v("ASSUME")])])])])]),a._v(" "),s("h3",{attrs:{id:"过程定义伪指令-proc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过程定义伪指令-proc"}},[a._v("#")]),a._v(" 过程定义伪指令 PROC")]),a._v(" "),s("p",[a._v("在程序设计过程中，常常将具有一定功能的程序段设计成一个子程序。在MASM宏汇编语言中，用过程 (PROCEDURE) 来构造子程序。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("过程名   PROC  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),a._v("NEAR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("FAR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n        RET\n过程名   ENDP\n")])])]),s("ul",[s("li",[a._v("过程名如同"),s("a",{attrs:{href:"#%E6%A0%87%E5%8F%B7"}},[a._v("标号")]),a._v("，具有段、偏移量和距离三个属性")]),a._v(" "),s("li",[a._v("距离属性使用NEAR和FAR来指定，默认为NEAR")])]),a._v(" "),s("p",[a._v("每一个过程中必须包含有返回指令RET，它控制CPU从过程中返回到调用该过程的主程序。")]),a._v(" "),s("h3",{attrs:{id:"当前位置计数器-与定位伪指令-org"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#当前位置计数器-与定位伪指令-org"}},[a._v("#")]),a._v(" 当前位置计数器 $ 与定位伪指令 ORG")]),a._v(" "),s("p",[a._v("汇编程序在汇编源程序时，每遇到一个逻辑段，就要为其设置一个位置计数器，用来记录该逻辑段中定义的每一个数据或每一条指令在逻辑段中的相对位置。")]),a._v(" "),s("p",[a._v("可以使用 "),s("code",[a._v("$")]),a._v(" 获取位置计数器的值。"),s("code",[a._v("$")]),a._v(" 也被称为当前位置计数器。"),s("code",[a._v("$")]),a._v(" 在使用上完全类似变量的使用。")]),a._v(" "),s("p",[a._v("可以使用 "),s("code",[a._v("ORG")]),a._v(" 改变位置计数器的值。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("DATA1     SEGMENT\n          ORG  30H                ; 跳到 30H，即保留段的前 30H 字节\n          DB1  DB  12H,34H        ; DB1 偏移量为 30H\n          ORG  $+20H              ; $ = 32H，跳到 52H，即保留段的 32H~51H 字节\n          STRING  DB  'ABCDEFGHI' ; STRING 偏移量为 52H\n          COUNT   EQU   $-STRING  ; COUNT = 9，即 STRING 的长度\n          DB2  DW  $              ; DB2 = $ = 自己的偏移量\n          DB3  DB   $+20H         ; 错误，访问到了段外的内容\nDATA1     ENDS\n\nCODE      SEGMENT\n          ASSUME  CS:CODE, ......\n          ORG  12H\nSTART:    MOV  AX,DATA\n          MOV  DS,AX\nCODE      ENDS\n          END START\n")])])]),s("h3",{attrs:{id:"dos-功能调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dos-功能调用"}},[a._v("#")]),a._v(" DOS 功能调用")]),a._v(" "),s("ul",[s("li",[a._v("DOS操作系统为程序设计人员提供了可以直接调用的功能子程序")]),a._v(" "),s("li",[a._v("调用这些子程序可以实现从键盘输入数据，将数据送显示器显示，打印机打印，以及磁盘操作等功能")]),a._v(" "),s("li",[a._v("调用DOS功能需要用软中断指令 "),s("code",[a._v("INT 21H")]),a._v("，并在执行该指令之前，将调用的功能号送入寄存器 "),s("code",[a._v("AH")]),a._v(" 中，有关的参量送指定的寄存器。")])]),a._v(" "),s("p",[a._v("三步骤：")]),a._v(" "),s("ol",[s("li",[a._v("送入口参量到指定的寄存器")]),a._v(" "),s("li",[a._v("送功能号到 AH")]),a._v(" "),s("li",[a._v("执行 "),s("code",[a._v("INT 21H")])])]),a._v(" "),s("h4",{attrs:{id:"带显示的键盘输入-1号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带显示的键盘输入-1号功能"}},[a._v("#")]),a._v(" 带显示的键盘输入（1号功能）")]),a._v(" "),s("ul",[s("li",[a._v("该功能子程序将等待键盘输入，直到按下一个键")]),a._v(" "),s("li",[a._v("将字符的ASCII码送入AL寄存器，并在屏幕上显示该字符")]),a._v(" "),s("li",[a._v("如果是Ctrl-C组合键，则停止程序运行")]),a._v(" "),s("li",[a._v("该功能调用无入口参量")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("01H")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("  \n")])])]),s("h4",{attrs:{id:"不带显示的键盘输入-8号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不带显示的键盘输入-8号功能"}},[a._v("#")]),a._v(" 不带显示的键盘输入（8号功能）")]),a._v(" "),s("ul",[s("li",[a._v("该功能调用与1号功能的作用相似，区别是8号功能将不显示输入的字符")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n")])])]),s("h4",{attrs:{id:"不带显示的键盘字符输入-7号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不带显示的键盘字符输入-7号功能"}},[a._v("#")]),a._v(" 不带显示的键盘字符输入（7号功能）")]),a._v(" "),s("p",[a._v("该功能与8号功能相似，但对Ctrl-C组合键和TAB制表键无反应。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("\nINT   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n")])])]),s("h4",{attrs:{id:"字符串输入-0ah号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串输入-0ah号功能"}},[a._v("#")]),a._v(" 字符串输入（0AH号功能）")]),a._v(" "),s("ul",[s("li",[a._v("该功能调用可实现从键盘输入字符串，其长度 <= 255个字符")]),a._v(" "),s("li",[a._v("调用前，应在内存中建立输入缓冲区\n"),s("ul",[s("li",[a._v("缓冲区第一个字节是可输入的"),s("strong",[a._v("最大")]),a._v("字符数+1")]),a._v(" "),s("li",[a._v("第二个字节是系统在调用该功能时，自动填入的"),s("strong",[a._v("实际输入")]),a._v("的字符个数")]),a._v(" "),s("li",[s("strong",[a._v("从第三个字节开始")]),a._v("存放输入字符的ASCII码（见后面例子）")])])]),a._v(" "),s("li",[a._v("当用户输入回车键时，结束输入，并将回车键的ASCII码 "),s("code",[a._v("0DH")]),a._v(" 作为最后一个字符送入缓冲区。但它不计入实际输入字符个数")])]),a._v(" "),s("p",[a._v("入口参量："),s("code",[a._v("DS")]),a._v(" 和 "),s("code",[a._v("DX")]),a._v(" 寄存器分别装入输入缓冲区的段基值和偏移量")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CHAR_BUF DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("31H")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";缓冲区的最大长度")]),a._v("\n         DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";存实际输入字符数")]),a._v("\n         DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("31H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";输入缓冲区")]),a._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ......")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(",SEG CHAR_BUF   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";如果DS已经指向CHAR_BUF所在")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";数据段，则可以省去这两条指令")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(",OFFSET CHAR_BUF\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0AH")]),a._v("\nINT "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n")])])]),s("h4",{attrs:{id:"字符显示-2号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符显示-2号功能"}},[a._v("#")]),a._v(" 字符显示（2号功能）")]),a._v(" "),s("p",[a._v("该功能实现在屏幕上显示单个字符。")]),a._v(" "),s("p",[a._v("入口参量："),s("code",[a._v("DL")]),a._v(" 装入要显示字符的ASCII码。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'A'")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n")])])]),s("h4",{attrs:{id:"字符打印-5号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符打印-5号功能"}},[a._v("#")]),a._v(" 字符打印（5号功能）")]),a._v(" "),s("p",[a._v("该功能将字符送入打印机接口，实现单个字符的打印操作。")]),a._v(" "),s("p",[a._v("入口参量："),s("code",[a._v("DL")]),a._v(" 装入打印字符的ASCII码")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DL")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'A'")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n")])])]),s("h4",{attrs:{id:"字符串显示-9号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串显示-9号功能"}},[a._v("#")]),a._v(" 字符串显示（9号功能）")]),a._v(" "),s("p",[a._v("该功能实现将一个字符串显示到屏幕上。")]),a._v(" "),s("p",[a._v("入口参数：")]),a._v(" "),s("ul",[s("li",[a._v("将待显示的字符串存放在一个数据缓冲区，字符串以符号“$”作为结束标志。")]),a._v(" "),s("li",[a._v("将字符串的首址的段基值和偏移量分别送入 "),s("code",[a._v("DS")]),a._v(" 和 "),s("code",[a._v("DX")]),a._v(" 中")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("CHAR    DB  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'This is a test.'")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0DH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'$'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ......")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", OFFSET CHAR\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n")])])]),s("h4",{attrs:{id:"直接输入输出-6号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接输入输出-6号功能"}},[a._v("#")]),a._v(" 直接输入输出（6号功能）")]),a._v(" "),s("p",[a._v("该功能可以实现键盘输入，也可以实现屏幕显示操作。两种操作通过 "),s("code",[a._v("DL")]),a._v(" 的内容确定。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("(DL)=00~0FEH")]),a._v(" 时，输出 "),s("code",[a._v("DL")]),a._v(" 对应的字符。")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DL")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("24H")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; $的ASCII码为24H")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("06")]),a._v("  \nINT   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 输出 $")]),a._v("\n")])])]),s("ul",[s("li",[s("code",[a._v("(DL)=FFH")]),a._v(" 时 ，从键盘输入字符")])]),a._v(" "),s("p",[a._v("该功能不等待键盘输入，而是从键盘缓冲区中读取。读取的字符ASCII码送入AL中，如果缓冲区为空，则标志位ZF=1。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("WAIT:")]),a._v(" MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DL")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FFH")]),a._v("\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("\n      INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n      JZ   WAIT\n")])])]),s("h4",{attrs:{id:"读出系统日期-2ah号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读出系统日期-2ah号功能"}},[a._v("#")]),a._v(" 读出系统日期（2AH号功能）")]),a._v(" "),s("p",[a._v("读出的日期信息放入指定的寄存器中：")]),a._v(" "),s("ul",[s("li",[a._v("CX：年（1980—2099）")]),a._v(" "),s("li",[a._v("DH：月（1—12）")]),a._v(" "),s("li",[a._v("DL：日（1—31）")]),a._v(" "),s("li",[a._v("AL：星期（0—星期日，1—星期一……）")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("YEAR     DW  ?\nMONTH    DB  ?\nDAY      DB  ?\n； ......\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2AH")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nMOV  YEAR,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("\nMOV  MONTH,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DH")]),a._v("\nMOV  DAY,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DL")]),a._v("\n")])])]),s("h4",{attrs:{id:"设置系统日期-2bh号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置系统日期-2bh号功能"}},[a._v("#")]),a._v(" 设置系统日期（2BH号功能）")]),a._v(" "),s("p",[a._v("该功能用来改变计算机CMOS中的系统日期。入口参数：")]),a._v(" "),s("ul",[s("li",[a._v("CX<=年号（1980—2099）")]),a._v(" "),s("li",[a._v("DH<= 月号（1—12）")]),a._v(" "),s("li",[a._v("DL<= 日（1—31）")])]),a._v(" "),s("p",[a._v("返回参数在AL中，成功设置，则返回 "),s("code",[a._v("(AL)=0")]),a._v("，否则 "),s("code",[a._v("(AL)=0FFH")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2000")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DL")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2BH")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCMP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\nJNE  ERROR "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";转出错处理")]),a._v("\n")])])]),s("h4",{attrs:{id:"读出系统时间-2ch号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读出系统时间-2ch号功能"}},[a._v("#")]),a._v(" 读出系统时间（2CH号功能）")]),a._v(" "),s("p",[a._v("执行该功能将获得系统的当前时间。返回的时间参数存放在指定的寄存器中：")]),a._v(" "),s("ul",[s("li",[a._v("CH：小时（0—23）")]),a._v(" "),s("li",[a._v("CL：分（0—59）")]),a._v(" "),s("li",[a._v("DH：秒（0—59）")]),a._v(" "),s("li",[a._v("DL：百分秒（0—99）")])]),a._v(" "),s("h4",{attrs:{id:"设置系统时间-2dh号功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置系统时间-2dh号功能"}},[a._v("#")]),a._v(" 设置系统时间（2DH号功能）")]),a._v(" "),s("p",[a._v("调用该功能，将设定系统时间。其入口参量为：")]),a._v(" "),s("ul",[s("li",[a._v("CH：小时（0—23）")]),a._v(" "),s("li",[a._v("CL：分（0—59）")]),a._v(" "),s("li",[a._v("DH：秒（0—59）")]),a._v(" "),s("li",[a._v("DL：百分秒（0—99）")])]),a._v(" "),s("p",[a._v("该功能执行后返回时，如果调用成功，则（AL）=0。否则（AL）=0FFH")]),a._v(" "),s("h3",{attrs:{id:"程序返回操作系统的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序返回操作系统的方法"}},[a._v("#")]),a._v(" 程序返回操作系统的方法")]),a._v(" "),s("h4",{attrs:{id:"在dos操作系统下运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在dos操作系统下运行"}},[a._v("#")]),a._v(" 在DOS操作系统下运行")]),a._v(" "),s("p",[a._v("在早期的计算机中使用DOS操作系统，系统运行为单一进程，为了让系统运行完用户的程序后，能够正确地返回到操作系统，需要在程序中加上一些必要的语句。")]),a._v(" "),s("p",[a._v("一般有以下两种方法：")]),a._v(" "),s("ul",[s("li",[a._v("使用DOS系统功能调用实现返回")]),a._v(" "),s("li",[a._v("使用程序段前缀PSP实现返回")])]),a._v(" "),s("h5",{attrs:{id:"使用dos系统功能调用实现返回"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用dos系统功能调用实现返回"}},[a._v("#")]),a._v(" 使用DOS系统功能调用实现返回")]),a._v(" "),s("p",[a._v("执行DOS功能调用4CH，控制用户程序结束，并返回DOS操作系统。")]),a._v(" "),s("p",[a._v("在程序结束时，使用两条指令：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\nINT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\n")])])]),s("p",[a._v("程序结构如下：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA    SEGMENT\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ……")]),a._v("\nDATA    ENDS              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";定义数据段")]),a._v("\n\nSTACK1  SEGMENT PARA STACK\n        DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP ("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";定义堆栈段")]),a._v("\n\nCODE    SEGMENT\n        ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";指令开始地址   ")]),a._v("\n        MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",DATA\n        MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";初始化DS")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ……")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";返回DOS操作系统")]),a._v("\nCODE    ENDS\n        END START         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";汇编结束标志")]),a._v("\n")])])]),s("h5",{attrs:{id:"使用程序段前缀psp实现返回"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用程序段前缀psp实现返回"}},[a._v("#")]),a._v(" 使用程序段前缀PSP实现返回")]),a._v(" "),s("ul",[s("li",[a._v("DOS系统将一个.EXE文件（可执行文件）装入内存时，在该文件的前面生成一个程序段前缀PSP "),s("code",[a._v("Program Segment Prefix")]),a._v("。")]),a._v(" "),s("li",[a._v("PSP的长度为100H字节")]),a._v(" "),s("li",[a._v("系统将DS和ES都指向PSP的开始")]),a._v(" "),s("li",[a._v("CS指向该程序的代码段，即第一条可执行指令")])]),a._v(" "),s("p",[a._v("PSP的开始是一条中断指令 "),s("code",[a._v("INT 20H")]),a._v("，执行该指令将终止用户程序，返回DOS系统。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/b237c483f0a8304575683dca5da0af1f86819bcce7de7a08f7fea94541f4d90e.png",alt:"内存结构"}})]),a._v(" "),s("p",[a._v("为了使程序执行完后，正确返回DOS，需要做以下三个操作：")]),a._v(" "),s("ol",[s("li",[a._v("将用户程序编制成一个过程,类型为 "),s("code",[a._v("FAR")])]),a._v(" "),s("li",[a._v("将PSP的起始逻辑地址压栈,即将 "),s("code",[a._v("INT 20H")]),a._v(" 指令的地址压栈")]),a._v(" "),s("li",[a._v("在用户程序结尾处,使用一条 "),s("code",[a._v("RET")]),a._v(" 指令。执行该指令将使保存在堆栈中的PSP的起始地址弹出到CS和IP中")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA    SEGMENT\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";……")]),a._v("\nDATA    ENDS         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";定义数据段")]),a._v("\n\nSTACK1  SEGMENT PARA STACK\n        DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP ("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";定义堆栈段")]),a._v("\n\nCODE    SEGMENT\n        ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\nMAIN    PROC  FAR    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";设置为FAR过程")]),a._v("\n        PUSH  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";为返回操作系统执行INT 20H 指令做准备")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n        PUSH  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";立即数不能够作为操作数 ")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";初始化DS")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ......")]),a._v("\n        RET          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";返回操作系统")]),a._v("\nMAIN    ENDP\nCODE    ENDS\n        END MAIN     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";汇编结束标志")]),a._v("\n")])])]),s("h4",{attrs:{id:"在windows操作系统下运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在windows操作系统下运行"}},[a._v("#")]),a._v(" 在Windows操作系统下运行")]),a._v(" "),s("p",[a._v("Windows系统下系统的运行为多进程方式，进程间切换由系统自动完成，即当用户的程序结束后使用 "),s("code",[a._v("HLT")]),a._v(" 就自动返回操作系统。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA    SEGMENT\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ......")]),a._v("\nDATA    ENDS                "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";定义数据段")]),a._v("\n\nSTACK1  SEGMENT PARA STACK\n        DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP ("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS                "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";定义堆栈段")]),a._v("\n\nCODE    SEGMENT\n        ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA,"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";指令开始地址   ")]),a._v("\n        MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",DATA\n        MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";初始化DS等")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ......")]),a._v("\n        HLT                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";结束程序")]),a._v("\nCODE    ENDS\n        END START           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";汇编结束标志")]),a._v("\n")])])]),s("h3",{attrs:{id:"汇编语言程序应用实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#汇编语言程序应用实例"}},[a._v("#")]),a._v(" 汇编语言程序应用实例")]),a._v(" "),s("h4",{attrs:{id:"顺序程序设计实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#顺序程序设计实例"}},[a._v("#")]),a._v(" 顺序程序设计实例")]),a._v(" "),s("p",[a._v("例 1：利用学号查学生的数学成绩表")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("TITLE   TABLE       LOOKUP\n\nDATA    SEGMENT\n        TABLE   DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("81")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("78")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("90")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("85")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("76")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("93")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("82")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("57")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\n                DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("73")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("62")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("87")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("77")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("74")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("86")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("95")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("91")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("82")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("71")]),a._v("\n        NUM     DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("\n        MATH    DB ?\nDATA    ENDS\n\nSTACK1  SEGMENT  PARA  STACK\n        DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("    DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS\n\nCOSEG   SEGMENT\n        ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":COSEG, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";装入DS")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", OFFSET  TABLE    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";BX指向表首址")]),a._v("\n        XOR  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";(AH)=0")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", NUM          \n        DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";实际学号是从1开始的")]),a._v("\n        ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";BX加上学号指向要查的成绩")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(","),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";查到成绩送AL")]),a._v("\n        MOV  MATH, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";存结果")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";返回DOS")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCOSEG  ENDS\n        END   START\n")])])]),s("h4",{attrs:{id:"分支程序实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支程序实例"}},[a._v("#")]),a._v(" 分支程序实例")]),a._v(" "),s("h5",{attrs:{id:"用比较-测试指令-条件转移指令实现分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用比较-测试指令-条件转移指令实现分支"}},[a._v("#")]),a._v(" 用比较/测试指令+条件转移指令实现分支")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("CMP DEST，SRC")]),a._v("：做减法")]),a._v(" "),s("li",[s("code",[a._v("TEST DEST，SRC")]),a._v("：做与运算")])]),a._v(" "),s("p",[a._v("例 2：数据段的ARY数组中存放有10个无符号数，试找出其中最大者送入MAX单元。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA    SEGMENT\n        ARY  DB "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("40")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("67")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("34")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("78")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n        MAX  DB ?\nDATA    ENDS\n\nSTACK1  SEGMENT PARA STACK\n        DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS\n\nCODE    SEGMENT\n        ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";SI指向ARY的第一个元素")]),a._v("\n        LEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", ARY\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";CX作次数计数器，遍历后九个元素")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";取第一个元素到AL")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LOP:")]),a._v("    INC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";SI指向后一个元素      ")]),a._v("\n        CMP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";比较两个数")]),a._v("\n        JAE  BIGGER         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";前元素≥后元素转移")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";取较大数到AL")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BIGGER:")]),a._v(" DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";减1计数")]),a._v("\n        JNZ  LOP            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";未比较完转回去，否则顺序执行")]),a._v("\n        MOV  MAX, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";存最大数")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCODE  ENDS\n        END   BEGIN\n")])])]),s("p",[a._v("例 3：编写一程序，实现将存储器中的源数据块传送到目的数据块。")]),a._v(" "),s("p",[a._v("需要注意的是，在存储器中两个数据块的存放有下列情况：两个数据块分离和有部分重叠。")]),a._v(" "),s("p",[a._v("我们采用：当源块首地址 < 目的块首地址时，从数据块末地址开始传送。反之，则从首地址开始传送。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("TITLE   DATA BLOCK MOVE\n\nDATA    SEGMENT\n        ORG  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("\n        STRG  DB    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ABCDEFGHIJ'")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 数据块")]),a._v("\n        LENG  EQU   "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("STRG        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";数据块字节长度")]),a._v("\n        BLOCK1 DW   STRG          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";源块首址")]),a._v("\n        BLOCK2 DW   STRG"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";目的块首址")]),a._v("\nDATA    ENDS\n\nSTACK1  SEGMENT STACK\n        DW   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS\n\nCOSE    SEGMENT \n        ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":COSE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BEGIN:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", LENG      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";设置计数器初值")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", BLOCK1    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";SI指向源块首址")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(", BLOCK2    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";DI指向目的块首址 ")]),a._v("\n        CMP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";源块首址>目的块首址吗？ ")]),a._v("\n        JA   TOP           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";大于则转到TOP处，否则顺序执行")]),a._v("\n        ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(",LENG"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";SI指向源块末址")]),a._v("\n        ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v(",LENG"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";DI指向目的块末址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BOTTOM:")]),a._v(" MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";从末址开始传送")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(",  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n        DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\n        DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("\n        DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("\n        JNE  BOTTOM\n        JMP  END1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("TOP:")]),a._v("    MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(","),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";从首址开始传送")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n        INC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\n        INC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DI")]),a._v("\n        DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("\n        JNE  TOP\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("END1:")]),a._v("   MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCOSE    ENDS\n        END BEGIN\n")])])]),s("h5",{attrs:{id:"用跳转表形成多路分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用跳转表形成多路分支"}},[a._v("#")]),a._v(" 用跳转表形成多路分支")]),a._v(" "),s("p",[a._v("当程序的分支数量较多时，采用跳转表的方法可以使程序长度变短。跳转表有两种构成方法：")]),a._v(" "),s("ul",[s("li",[a._v("跳转表用入口地址构成")]),a._v(" "),s("li",[a._v("跳转表用无条件转移指令构成")])]),a._v(" "),s("h6",{attrs:{id:"跳转表用入口地址构成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳转表用入口地址构成"}},[a._v("#")]),a._v(" 跳转表用入口地址构成")]),a._v(" "),s("p",[a._v("这种方法将所有入口地址存在一个变量数组中（称为跳转表），跳转前取出对应地址然后直接跳。")]),a._v(" "),s("p",[a._v("例 4：设某程序有10路分支，试根据变量N的值（1~10），将程序转移到其中的一路分支去。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("TITLE   JUMP  TABLE  OF  ADDRESS\nDATA    SEGMENT\n        ATABLE   DW  BRAN1, BRAN2, BRAN3, ..., BRAN10\n        N        DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\nDATA    ENDS\n\nSTACK1  SEGMENT  PARA   STACK\n        DW       "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP ("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS\n\nCODE    SEGMENT\n        ASSUME   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        XOR  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", N\n        DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n        SHL  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(",OFFSET ATABLE  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";BX指向表首址")]),a._v("\n        ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";BX指向查表地址                       ")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(","),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";将N对应的分支入口地址送到CX中")]),a._v("\n        JMP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";转移到N对应的分支入口地址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BRAN1:")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n        JMP      END1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BRAN2:")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n        JMP      END1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BRAN3:")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n        JMP      END1           \n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BRAN10:")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("END1:")]),a._v("   MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCODE    ENDS\n        END     START\n")])])]),s("h6",{attrs:{id:"跳转表用无条件转移指令构成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳转表用无条件转移指令构成"}},[a._v("#")]),a._v(" 跳转表用无条件转移指令构成")]),a._v(" "),s("p",[a._v("跳转表的每一个项目就是一条无条件转移指令。这时跳转表是代码段中的一段程序。利用 "),s("code",[a._v("每一条 JMP 指令都是3字节编码")]),a._v("，可以在跳转表前计算出目标 JMP 指令的地址，然后跳转。")]),a._v(" "),s("p",[a._v("例 4 的另一种写法。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("TITLE   JUMP TABLE OF INSTRUCTION\nDATA    SEGMENT\n        N  DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\nDATA  ENDS\n\nSTACK1  SEGMENT PARA STACK\n        DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS\n\nCODE    SEGMENT\n        ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(","),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(",N\n        DEC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";四条指令实现(N-1)*3")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";每一条指令都是3字节编码")]),a._v("\n        SHL  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n        ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n        ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", OFFSET ITABLE "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";BX指向查表地址    ")]),a._v("\n        JMP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";转移到N对应的JMP指令")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("ITABLE:")]),a._v(" JMP  BRAN1             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";JMP指令构成的跳转表")]),a._v("\n        JMP  BRAN2             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";每一条指令都是3字节的编码")]),a._v("\n        JMP  BRAN3\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n        JMP  BRAN10\n\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BRAN1:")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n        JMP  END1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BRAN2:")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n        JMP  END1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BRAN10:")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("END1:")]),a._v("   MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCODE    ENDS\n        END  START\n")])])]),s("h4",{attrs:{id:"循环程序实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环程序实例"}},[a._v("#")]),a._v(" 循环程序实例")]),a._v(" "),s("h5",{attrs:{id:"计数控制循环-循环次数已知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计数控制循环-循环次数已知"}},[a._v("#")]),a._v(" 计数控制循环——循环次数已知")]),a._v(" "),s("p",[a._v("使用 CX 计数即可。")]),a._v(" "),s("p",[a._v("例 5：设有两个数组X和Y，它们都有8个元素，其元素按下标从小到大的顺序存放在数据段中。试编写程序完成下列计算：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Z1=X1+Y1   Z2=X2-Y2    Z3=X3+Y3 \nZ4=X4-Y4   Z5=X5-Y5    Z6=X6+Y6\nZ7=X7+Y7   Z8=X8-Y8\n")])])]),s("p",[a._v("由于循环体中有“+”和“-”两种可能的运算，通过设置标志0(+)和1(-)来判断，低位表示低下标的运算。八个运算表达式由8位逻辑尺："),s("code",[a._v("10011010B")]),a._v("来识别。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA    SEGMENT\n        X       DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0A2H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7CH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("34H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9FH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F4H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("39H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5BH")]),a._v("\n        Y       DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("14H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("05BH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("28H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7AH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0EH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("46H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2CH")]),a._v("\n        LEN     EQU "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Y\n        Z       DB  LEN DUP(?)\n        LOGR    DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10011010B")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";设置标志0(+)和1(-)来判断，低位表示低下标的运算")]),a._v("\nDATA    ENDS\n\nSTACK0  SEGMENT PARA STACK\n        DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK0  ENDS\n\nCOSEG   SEGMENT\n        ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":COSEG, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK0\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BEGIN:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", LEN        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";初始化计数器")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";初始化指针")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", LOGR       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";初始化逻辑尺")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LOP:")]),a._v("    MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", X"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n        SHR  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";标志位送CF")]),a._v("\n        JC   SUB1           "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";为1，转做减法")]),a._v("\n        ADD  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", Y"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";为0，做加法")]),a._v("\n        JMP  RES\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("SUB1:")]),a._v("   SUB  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", Y"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("RES:")]),a._v("    MOV  Z"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 存结果")]),a._v("\n        INC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 修改指针")]),a._v("\n        LOOP LOP\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCOSEG   ENDS\n        END BEGIN\n")])])]),s("h5",{attrs:{id:"条件控制循环-循环次数未知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件控制循环-循环次数未知"}},[a._v("#")]),a._v(" 条件控制循环——循环次数未知")]),a._v(" "),s("p",[a._v("根据条件控制使用 "),s("code",[a._v("JZ")]),a._v(" "),s("code",[a._v("JL")]),a._v(" "),s("code",[a._v("JG")]),a._v(" 等语句进行跳转实现循环。")]),a._v(" "),s("p",[a._v("例 6 编写一程序，将字单元 "),s("code",[a._v("VARW")]),a._v(" 中含1的个数(含1的个数是指用二进制表示时,有多少个1)统计出来，存入CONT单元中。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA    SEGMENT\n        VARW    DW   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1101010010001000B")]),a._v("\n        CONT      DB   ?\nDATA    ENDS\n\nSTACK1  SEGMENT PARA STACK\n        DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP("),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(")\nSTACK1  ENDS\n\nCODE    SEGMENT\n        ASSUME  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BEGIN:")]),a._v("  MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";初始值为0,统计1的个数")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", VARW\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LOP:")]),a._v("    EST  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FFFFH")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";测试（AX）是否为0")]),a._v("\n        JZ   END0                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";为0，循环结束")]),a._v("\n        JNS  SHIFT                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";判最高位，为0则转SHIFT")]),a._v("\n        INC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";最高位为1，计数")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("SHIFT:")]),a._v("  SHL  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n        JMP  LOP\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("END0:")]),a._v("   MOV  CONT, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";存结果")]),a._v("\n        MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n        INT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCODE    ENDS\n        END  BEGIN\n")])])]),s("h3",{attrs:{id:"ia-32-微处理器的指令与汇编语言结构简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32-微处理器的指令与汇编语言结构简介"}},[a._v("#")]),a._v(" IA-32 微处理器的指令与汇编语言结构简介")]),a._v(" "),s("h4",{attrs:{id:"寻址方式-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寻址方式-2"}},[a._v("#")]),a._v(" 寻址方式")]),a._v(" "),s("p",[a._v("相对 8086 来说，IA-32 扩充了寄存器结构，采用了多种存储器管理方式 ，因此其寻址方式有了较大的增强。")]),a._v(" "),s("ol",[s("li",[a._v("允许使用 32 位的通用寄存器作寄存器间接寻址。例如："),s("code",[a._v("MOV DX, [EBX]")])]),a._v(" "),s("li",[a._v("所有的32位通用寄存器均可作为基址寄存器使用；除 "),s("code",[a._v("ESP")]),a._v(" 外的32位通用寄存器都能作为变址寄存器使用。")])]),a._v(" "),s("p",[a._v("例如：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EDX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EDX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", ADDR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EBP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EBX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ESI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EAX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("32 位的变址寄存器可以乘上一个比例常数2、4和8，从而形成"),s("code",[a._v("比例变址")]),a._v("寻址方式、"),s("code",[a._v("基址-比例变址")]),a._v("寻址方式和"),s("code",[a._v("基址-比例变址-位移")]),a._v("寻址方式。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/7d0d508021db8d4e0aabf5e5dcf1cf1a11249d16bbb4a84c9faa3cb226ac4f87.png",alt:"寻址方式"}})]),a._v(" "),s("p",[a._v("上述三种情况可用如图公式表示。")]),a._v(" "),s("p",[a._v("例如：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EBX")]),a._v(", ADDR"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ESI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 比例变址寻址方式")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EAX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EDI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EDX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 基址比例变址寻址方式")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EBX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EDI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("EBP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 基址比例变址位移寻址方式")]),a._v("\n")])])]),s("h4",{attrs:{id:"扩展的指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展的指令"}},[a._v("#")]),a._v(" 扩展的指令")]),a._v(" "),s("p",[a._v("IA-32微处理器对8086/8088的指令进行了扩展或新增了指令。所有指令的操作数可以是8位、16位或32位。")]),a._v(" "),s("p",[a._v("下面列举其中部分新增的指令。")]),a._v(" "),s("h5",{attrs:{id:"数据传送指令-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据传送指令-2"}},[a._v("#")]),a._v(" 数据传送指令")]),a._v(" "),s("h6",{attrs:{id:"符号扩展-movsx-movzx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号扩展-movsx-movzx"}},[a._v("#")]),a._v(" 符号扩展：MOVSX MOVZX")]),a._v(" "),s("p",[a._v("格式："),s("code",[a._v("MOVSX DEST, SRC")]),a._v(" "),s("code",[a._v("MOVZX DEST, SRC")])]),a._v(" "),s("ul",[s("li",[a._v("两种用法：\n"),s("ul",[s("li",[s("code",[a._v("8 位寄存器/存储器 -> 16/32 位寄存器")])]),a._v(" "),s("li",[s("code",[a._v("16 位寄存器/存储器 -> 32 位寄存器")])])])]),a._v(" "),s("li",[a._v("MOVSX是带符号数扩展指令（符号填充），MOVZX是无符号数扩展指令（零填充）")])]),a._v(" "),s("p",[a._v("例如：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOVSX  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("ECX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将字扩充到双字")]),a._v("\nMOVZX  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 将字节扩充到字")]),a._v("\n")])])]),s("h6",{attrs:{id:"取偏移量-lfs-lgs-lss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取偏移量-lfs-lgs-lss"}},[a._v("#")]),a._v(" 取偏移量 LFS LGS LSS")]),a._v(" "),s("p",[a._v("类似于 "),s("a",{attrs:{href:"#%E8%A3%85%E5%85%A5%E5%9C%B0%E5%9D%80%E6%8C%87%E9%92%88%E6%8C%87%E4%BB%A4-lds-les"}},[s("code",[a._v("LDS")]),a._v("、"),s("code",[a._v("LES")])]),a._v("（"),s("code",[a._v("DEFG")]),a._v(" 还行）")]),a._v(" "),s("p",[s("code",[a._v("LFS")]),a._v(" 指令将 32 位的偏移量送目的寄存器，16 位的段选择子送 FS。")]),a._v(" "),s("p",[a._v("其他两条指令类似，只是段寄存器变为GS和SS。")]),a._v(" "),s("h5",{attrs:{id:"算术运算指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术运算指令"}},[a._v("#")]),a._v(" 算术运算指令")]),a._v(" "),s("p",[a._v("新增了两种"),s("a",{attrs:{href:"#%E6%97%A0%E7%AC%A6%E5%8F%B7%E4%B9%98%E6%B3%95-mul"}},[a._v("乘法指令")]),a._v("，格式：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("IMUL  DEST, SRC \n; 将(SRC)与(DEST)相乘，将结果放在 DEST 中\n\nIMUL  DEST, SRC1, SRC2\n; 将(SRC1)与(SRC2)相乘，将结果放在 DEST 中\n")])])]),s("p",[a._v("新增了两条"),s("a",{attrs:{href:"#%E5%AD%97%E4%BD%8D%E6%89%A9%E5%B1%95%E6%8C%87%E4%BB%A4-cbw-cwd"}},[a._v("扩展指令")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CWDE\n; Convert Word to Doubleword\n; 将AX的符号位扩展到EAX的高16位\n; 加一个 E 与 CWD （扩展位放在 DX）以示区别\n\nCDQ\n; Convert Dooubleword to Quadword\n; 将EAX的符号位扩展到EDX的所有32位\n")])])]),s("h5",{attrs:{id:"逻辑运算与移位指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算与移位指令"}},[a._v("#")]),a._v(" 逻辑运算与移位指令")]),a._v(" "),s("ol",[s("li",[a._v("对于"),s("a",{attrs:{href:"#%E7%A7%BB%E4%BD%8D%E6%8C%87%E4%BB%A4"}},[a._v("移位指令")]),a._v("，当移位次数大于 1 时，允许使用立即数作为操作数。")])]),a._v(" "),s("p",[a._v("例如，"),s("code",[a._v("SAL AX, 2")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("新增了 "),s("code",[a._v("SHLD")]),a._v(" 与 "),s("code",[a._v("SHRD")]),a._v(" 指令")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("SHLD  DEST, SRC, OPTR\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 对 DEST 左移 OPTR 位，移出的位依次进入 CF 标志位，DEST 空出的位由 SRC 的高位顺序移入。移位结束后SRC保持不变")]),a._v("\n\nSHRD   DEST, SRC, OPTR\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 对 DEST 右移 OPTR 位，移出的位依次进入 CF 标志位，DEST 空出的位由 SRC 的低位顺序移入。移位结束后，SRC保持不变")]),a._v("\n")])])]),s("p",[a._v("8086 的 "),s("a",{attrs:{href:"#%E5%B8%A6-cf-%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%A7%BB%E4%BD%8D-rcl-rcr"}},[s("code",[a._v("RCL")]),a._v(" "),s("code",[a._v("RCR")])]),a._v("只能移一次，空出的位由 "),s("code",[a._v("CF")]),a._v(" 补。")]),a._v(" "),s("h5",{attrs:{id:"堆栈操作指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈操作指令"}},[a._v("#")]),a._v(" 堆栈操作指令")]),a._v(" "),s("ol",[s("li",[a._v("PUSH允许立即数入栈")])]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("PUSH  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0ABCDH")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";将16位立即数入栈")]),a._v("\nPUSH  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0ABCD0000H")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";将32位立即数入栈  ")]),a._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("新增两条PUSH指令")])]),a._v(" "),s("p",[s("code",[a._v("PUSHA")]),a._v(" 指令将8个16位通用寄存器"),s("code",[a._v("AX、BX、CX、DX、SP、BP、SI与DI")]),a._v("一次性入栈。")]),a._v(" "),s("p",[s("code",[a._v("PUSHD")]),a._v(" 指令将8个32位通用寄存器"),s("code",[a._v("EAX、EBX、ECX、EDX、ESP、EBP、ESI与EDI")]),a._v("一次性入栈。")]),a._v(" "),s("p",[a._v("似乎是为了函数调用时保存所有寄存器值？")]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("新增两条POP指令")])]),a._v(" "),s("p",[a._v("与上面对应地：")]),a._v(" "),s("p",[s("code",[a._v("POPA")]),a._v("指令从栈顶弹出8个字数据分别送入"),s("code",[a._v("AX、BX、CX、DX、SP、BP、SI与DI")]),a._v("。")]),a._v(" "),s("p",[s("code",[a._v("POPD")]),a._v("指令从栈顶弹出8个双字数据分别送入"),s("code",[a._v("EAX、EBX、ECX、EDX、ESP、EBP、ESI与EDI")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"ia-32-汇编语言程序框架概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32-汇编语言程序框架概述"}},[a._v("#")]),a._v(" IA-32 汇编语言程序框架概述")]),a._v(" "),s("p",[a._v("IA-32汇编语言程序设计的方法同前面介绍的16位指令程序设计基本相同。但在结构上有三点主要差异。")]),a._v(" "),s("ul",[s("li",[a._v("在开始处增加了方式选择；")]),a._v(" "),s("li",[a._v("在段定义中增加了使用类型可选项；")]),a._v(" "),s("li",[a._v("可以同时使用6个段。")])]),a._v(" "),s("h5",{attrs:{id:"方式选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式选择"}},[a._v("#")]),a._v(" 方式选择")]),a._v(" "),s("p",[a._v("方式选择伪指令用来确定微处理器工作模式和当前指令集。")]),a._v(" "),s("p",[s("code",[a._v(".8086")]),a._v("  -选择8086/8088指令集。这是汇编程序默认的方式。\n"),s("code",[a._v(".286")]),a._v("    -选择80286实地址方式指令集\n"),s("code",[a._v(".286P")]),a._v("  -选择80286保护方式\n"),s("code",[a._v(".386")]),a._v("    -选择80386非保护方式指令集。\n"),s("code",[a._v(".386P")]),a._v("  -选择80386保护方式")]),a._v(" "),s("h5",{attrs:{id:"确定段的使用类型属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#确定段的使用类型属性"}},[a._v("#")]),a._v(" 确定段的使用类型属性")]),a._v(" "),s("p",[a._v("IA-32的段定义格式："),s("code",[a._v("段名 SEGMENT [定位类型] [组合类型] [类别名] [使用类型]")]),a._v("，较"),s("a",{attrs:{href:"#%E6%AE%B5%E5%AE%9A%E4%B9%89%E4%BC%AA%E6%8C%87%E4%BB%A4-segment"}},[a._v("8086")]),a._v("多了一个使用类型。")]),a._v(" "),s("p",[a._v("使用类型: 有"),s("code",[a._v("USE16")]),a._v("和"),s("code",[a._v("USE32")]),a._v("两种取值，用来定义段寻址方式")]),a._v(" "),s("ul",[s("li",[a._v("USE16：8086/8088实地址方式，段基值16位，偏移量16位，最大段长64KB。该值为缺省值")]),a._v(" "),s("li",[a._v("USE32：对应保护方式，段基值(段选择子)16位，偏移量32位，最大段长4GB。")])]),a._v(" "),s("h5",{attrs:{id:"例题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例题"}},[a._v("#")]),a._v(" 例题")]),a._v(" "),s("p",[a._v("例:  统计一个字数组中非负数的个数，结果保存在RESULT单元中。")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("."),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("386")]),a._v("\nDATA \tSEGMENT\tPARA\tUSE16\nARRAY\tDW   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("234")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("87")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("65")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("54")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("44")]),a._v(","),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("54")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\nCNT\tEQU\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("ARRAY\nRESULT\tDW  ?\nDATA\tENDS\nSTACK1\tSEGMENT\tPARA\tSTACK USE16\t \n                       DW "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v(" DUP(?)\nSTACK1\tENDS\nCODE     SEGMENT  PARA USE16\n           ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1     \n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("BEGIN:")]),a._v("\tMOV\t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n\t\tMOV\t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n                        LEA\t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", ARRAY\n\t\tMOV\t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", CNT"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("ACS:")]),a._v("\t            LODSW\n\t\tBT  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";386新增指令,将AX的第15位送CF ")]),a._v("\n\t\tJC\tNEXT\n\t\tINC\tRESULT\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT:")]),a._v("\tLOOP\tACS\n\t\tMOV\t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4CH")]),a._v("\n\t\tINT\t"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v("\nCODE\t            ENDS\n\t\tEND\tBEGIN \t\t\n")])])]),s("p",[a._v("bt是位操作指令：")]),a._v(" "),s("blockquote",[s("p",[a._v("指令的格式：BT/BTC/BTR/BTS Reg/Mem,Reg/Imm ;80386+"),s("br"),a._v("\n位检测指令是把第一个操作数中某一位的值传送给标志位CF，具体的哪一位由指令的第二操作数来确定。\n根据指令中对具体位的处理不同，又分一下几种指令："),s("br"),a._v("\nBT：把指定的位传送给CF；"),s("br"),a._v("\nBTC：把指定的位传送给CF后，还使该位变反；"),s("br"),a._v("\nBTR：把指定的位传送给CF后，还使该位变为0；"),s("br"),a._v("\nBTS：把指定的位传送给CF后，还使该位变为1；"),s("br"),a._v("\n例如：假设(AX)=1234H，分别执行下面指令。"),s("br"),a._v("\nBT AX, 2 ;指令执行后，CF=1，(AX)=1234h"),s("br"),a._v("\nBTC AX, 6 ;指令执行后，CF=0，(AX)=1274h"),s("br"),a._v("\nBTR AX, 10 ;指令执行后，CF=0，(AX)=1234h"),s("br"),a._v("\nBTS AX, 14 ;指令执行后，CF=0，(AX)=5234h")])]),a._v(" "),s("p",[a._v("下面再看一个不像前面学的汇编语言的汇编语言程序：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("."),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("386")]),a._v("\n.model flat, stdcall\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";Include文件定义")]),a._v("\ninclude windows.inc\ninclude user32.inc\nincludelib user32.lib\ninclude kernel32.inc\nincludelib kernel32.lib\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";数据段")]),a._v("\n. Data\nCaption  db    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'A MessageBox !'")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\nText         db    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Hello, World !'")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";代码段")]),a._v("\n.code\nstart：\n        invoke MessageBox，NULL,offset Text, offset Caption,MB_OK\n        invoke ExitProcess, NULL\nend   start\n")])])]),s("p",[s("img",{attrs:{src:"/images/7e67f011032c8059a82a1a9bbe901da19c3d9b41839e0183ba6ce30a8a5d1892.png",alt:"程序执行结果"}})]),a._v(" "),s("h2",{attrs:{id:"第六章-输入输出及中断技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第六章-输入输出及中断技术"}},[a._v("#")]),a._v(" 第六章 输入输出及中断技术")]),a._v(" "),s("h3",{attrs:{id:"输入输出系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入输出系统"}},[a._v("#")]),a._v(" 输入输出系统")]),a._v(" "),s("h4",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),s("p",[a._v("输入输出系统：计算机系统中除 CPU 和内存储器之外的部分")]),a._v(" "),s("p",[a._v("I/O系统分为：")]),a._v(" "),s("ul",[s("li",[a._v("输入输出设备")]),a._v(" "),s("li",[a._v("输入输出接口")]),a._v(" "),s("li",[a._v("输入输出软件")])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("特点：")]),a._v(" "),s("ul",[s("li",[a._v("复杂性：输入输出设备、处理器、操作系统的复杂性")]),a._v(" "),s("li",[a._v("异步性：工作速度和时序不一致")]),a._v(" "),s("li",[a._v("实时性：控制的时效性。I/O系统保证处理器对不同设备的请求提供及时服务")]),a._v(" "),s("li",[a._v("与设备无关性：接口的标准化，由操作系统屏蔽了设备的差异。")])]),a._v(" "),s("h4",{attrs:{id:"i-o-接口系统及接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-接口系统及接口"}},[a._v("#")]),a._v(" I/O 接口系统及接口")]),a._v(" "),s("p",[a._v("有关I/O系统的概念、特点，以及I/O接口的功能等，请参阅教材描述，自行学习。")]),a._v(" "),s("p",[a._v("总体上，I/O接口应具备以下功能：")]),a._v(" "),s("ul",[s("li",[a._v("数据的缓冲与暂存")]),a._v(" "),s("li",[a._v("信号电平与类型的转换")]),a._v(" "),s("li",[a._v("增加信号的驱动能力")]),a._v(" "),s("li",[a._v("对外设进行监测、控制与管理，中断处理")])]),a._v(" "),s("h4",{attrs:{id:"i-o-端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-端口"}},[a._v("#")]),a._v(" I/O 端口")]),a._v(" "),s("ul",[s("li",[a._v("端口：接口中的寄存器")]),a._v(" "),s("li",[a._v("端口的主要作用：信息的缓存")]),a._v(" "),s("li",[a._v("端口类型：\n"),s("ul",[s("li",[a._v("数据端口：缓存输入和输出的数据")]),a._v(" "),s("li",[a._v("状态端口：缓存需要输入的外设工作状态")]),a._v(" "),s("li",[a._v("控制端口：缓存由系统输出的各种控制信息")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/9839b6488c3a5f0fdc2cd36ef07594554b2cc8aa110d0fe8acfc88ee2098874a.png",alt:"I/O端口"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("I/O系统中的接口和端口的地址：")]),a._v(" "),s("ul",[s("li",[a._v("每个接口为一个芯片，每个芯片有一个基地址。")]),a._v(" "),s("li",[a._v("端口地址=芯片地址（高位地址）+片内地址")])]),a._v(" "),s("h4",{attrs:{id:"i-o-端口的编址方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-端口的编址方式"}},[a._v("#")]),a._v(" I/O 端口的编址方式")]),a._v(" "),s("p",[a._v("编址方式：")]),a._v(" "),s("ol",[s("li",[a._v("与内存统一编址")]),a._v(" "),s("li",[a._v("独立编址")])]),a._v(" "),s("h5",{attrs:{id:"i-o-端口与内存统一编址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-端口与内存统一编址"}},[a._v("#")]),a._v(" I/O 端口与内存统一编址")]),a._v(" "),s("ul",[s("li",[a._v("指令及控制信号统一")]),a._v(" "),s("li",[a._v("内存地址资源减少")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/dc8372e7eaeaafca1b994f440ada1df76883c05be18ea154e256a364202f89f3.png",alt:"I/O端口与内存统一编址"}})]),a._v(" "),s("h5",{attrs:{id:"i-o-端口独立编址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-端口独立编址"}},[a._v("#")]),a._v(" I/O 端口独立编址")]),a._v(" "),s("ul",[s("li",[a._v("内存地址资源充分利用")]),a._v(" "),s("li",[a._v("能够应用于端口的指令较少")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/04a5da24c60a89319b7c54f614ab3dc8eb682b15e14745a4e57427666aac3b00.png",alt:"I/O端口独立编址"}})]),a._v(" "),s("h5",{attrs:{id:"_8088-8086-的-i-o-端口编址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088-8086-的-i-o-端口编址"}},[a._v("#")]),a._v(" 8088/8086 的 I/O 端口编址")]),a._v(" "),s("ul",[s("li",[a._v("采用I/O端口"),s("strong",[a._v("独立编址")]),a._v("方式(但地址线与存储器共用)")]),a._v(" "),s("li",[a._v("地址线上的地址信号用"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("O")]),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mover",{attrs:{accent:"true"}},[s("mi",[a._v("M")]),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1),s("mi",[a._v("M")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("IO/\\overline{M}M")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")])])])])]),a._v("（"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("O")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1),s("mi",{attrs:{mathvariant:"normal"}},[a._v("/")]),s("mi",[a._v("M")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{IO}/M")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.13333em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{staticClass:"mord"},[a._v("/")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("M")])])])])]),a._v("）来区分")],1),a._v(" "),s("li",[a._v("I/O操作只使用20根地址线中的"),s("strong",[a._v("16")]),a._v("根：A15~A0")]),a._v(" "),s("li",[a._v("可寻址的I/O端口数为"),s("strong",[a._v("64K(65536)个")])]),a._v(" "),s("li",[a._v("I/O地址范围为"),s("code",[a._v("0")]),a._v("~"),s("code",[a._v("FFFFH")])])]),a._v(" "),s("h4",{attrs:{id:"i-o-地址译码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-地址译码"}},[a._v("#")]),a._v(" I/O 地址译码")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/f747740fead925288642a647078a01ebf2c3b1d2737872bef79e98f9e24f6b6c.png",alt:"I/O地址译码"}})]),a._v(" "),s("h5",{attrs:{id:"全地址译码与部分地址译码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全地址译码与部分地址译码"}},[a._v("#")]),a._v(" 全地址译码与部分地址译码")]),a._v(" "),s("p",[a._v("一个接口电路中可以有一个或多个端口。")]),a._v(" "),s("ol",[s("li",[a._v("全地址译码：")])]),a._v(" "),s("ul",[s("li",[a._v("全部16位I/O地址信号参与译码")]),a._v(" "),s("li",[a._v("当接口中只有一个端口时， 16位地址线应全部参与译码，译码输出直接选择该端口中；")]),a._v(" "),s("li",[a._v("当接口中有多个端口时，则16位地址线的高位参与译码（决定接口的基地址），低位直接输入到接口芯片，用于寻址接口中要访问的端口。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("部分地址译码：")])]),a._v(" "),s("ul",[s("li",[a._v("仅用部分地址（比如16位中低10位）信号参与译码")]),a._v(" "),s("li",[a._v("含多个端口的接口，最低的几位直接连到接口芯片")])]),a._v(" "),s("p",[a._v("I/O系统中，因地址资源丰富，多采用部分地址译码。")]),a._v(" "),s("p",[a._v("看不出来有什么区别。")]),a._v(" "),s("h5",{attrs:{id:"i-o地址译码例题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o地址译码例题"}},[a._v("#")]),a._v(" I/O地址译码例题")]),a._v(" "),s("p",[a._v("例：某外设接口有 4 个端口，地址为 "),s("code",[a._v("2F0H——2F3H")]),a._v("，由 A15～A2 译码得到，而 A1、A0 用来区分接口中的 4 个端口。试画出该接口与系统的连接图。")]),a._v(" "),s("p",[a._v("题目分析：")]),a._v(" "),s("ul",[s("li",[a._v("寻址端口的地址信号最多为 16bit，题中仅用 12bit 就能表示其地址——故采用部分地址译码")]),a._v(" "),s("li",[a._v("该接口电路中含有4个端口，片内端口寻址需 2 位地址信号，其余 10 位为接口芯片地址，即片选地址信号。")])]),a._v(" "),s("p",[a._v("地址范围：")]),a._v(" "),s("ul",[s("li",[a._v("xxxx 0010111100 00 (2F0H)")]),a._v(" "),s("li",[a._v("......")]),a._v(" "),s("li",[a._v("xxxx 0010111100 11 (2F3H)")]),a._v(" "),s("li",[a._v("x 表示任意状态，图中无需接入；后两位表示片内地址")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/1240556340cdaece1b43f7e223ee5befc0ff0d418e94157150f46a38fccbe0a7.png",alt:"译码电路图"}})]),a._v(" "),s("p",[a._v("最上面表示 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("O")]),s("mi",[a._v("R")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{IOR}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[a._v("R")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v(" 和 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("O")]),s("mi",[a._v("W")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{IOW}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[a._v("O")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("W")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v(" 至少有一个是 0（有效）时芯片有效，若都是 1 则芯片无效。")],1),a._v(" "),s("h4",{attrs:{id:"接口的基本构成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口的基本构成"}},[a._v("#")]),a._v(" 接口的基本构成")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/a284cc5dad4583c5e538a16a6c09edc6bc4154ef61f603d2fafae14f85d25a53.png",alt:"接口的基本构成"}})]),a._v(" "),s("ul",[s("li",[a._v("AB (Address Bus)")]),a._v(" "),s("li",[a._v("DB (Data Bus)")]),a._v(" "),s("li",[a._v("CB (Control Bus)")]),a._v(" "),s("li",[a._v("数据输入/输出寄存器：暂存输入/输出的数据")]),a._v(" "),s("li",[a._v("命令寄存器：存放控制命令（设定接口功能、工作参数和工作方式）")]),a._v(" "),s("li",[a._v("状态寄存器：保存外设当前状态，以供CPU读取")])]),a._v(" "),s("h4",{attrs:{id:"接口的类型及特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口的类型及特点"}},[a._v("#")]),a._v(" 接口的类型及特点")]),a._v(" "),s("ul",[s("li",[a._v("按传输信息的方向分类：\n"),s("ul",[s("li",[a._v("输入接口")]),a._v(" "),s("li",[a._v("输出接口")])])]),a._v(" "),s("li",[a._v("按传输信息的类型分类：\n"),s("ul",[s("li",[a._v("数字接口")]),a._v(" "),s("li",[a._v("模拟接口")])])]),a._v(" "),s("li",[a._v("按传输信息的方式分类：\n"),s("ul",[s("li",[a._v("并行接口")]),a._v(" "),s("li",[a._v("串行接口")])])])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("接口特点：")]),a._v(" "),s("ul",[s("li",[a._v("输入接口：\n"),s("ul",[s("li",[a._v("要求对数据具有控制能力（允许数据送到数据线）")]),a._v(" "),s("li",[a._v("常用三态门实现")])])]),a._v(" "),s("li",[a._v("输出接口：\n"),s("ul",[s("li",[a._v("要求对数据具有锁存能力（接收后保持数据不变）")]),a._v(" "),s("li",[a._v("常用锁存器实现")])])])]),a._v(" "),s("h3",{attrs:{id:"简单接口电路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单接口电路"}},[a._v("#")]),a._v(" 简单接口电路")]),a._v(" "),s("h4",{attrs:{id:"三态门接口及-74ls244"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三态门接口及-74ls244"}},[a._v("#")]),a._v(" 三态门接口及 74LS244")]),a._v(" "),s("p",[a._v("三态：高电平、低电平、高阻态")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/7ce02180ca3ba2af492a1dc13e662bc78cb01de84701038a1884efced123f6e3.png",alt:"三态门接口"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("74LS244：")]),a._v(" "),s("ul",[s("li",[a._v("含8个三态门的集成电路芯片")]),a._v(" "),s("li",[a._v("在外设具有数据保持能力时用来输入接口数据")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/fc780b8f56edacc1bcdc5bf6b34d6a18c4f2497b17714231874b28c0a453eb78.png",alt:"74LS244"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("例题：编程判断图中的开关状态，若全闭合则转NEXT1，否则转NEXT2。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/f6b61d004f930cee755cb13cc7d467f931f9d26543c4f4f260af5dedace214d6.png",alt:"例题图"}})]),a._v(" "),s("p",[a._v("注意到开关 K0~K7 的另一侧接了地。如果开关闭合，输入 I0~I7 应该为 0。反之为 1。")]),a._v(" "),s("p",[a._v("由图可知对应的地址为：")]),a._v(" "),s("p",[a._v("1000 0111 1111 11xx")]),a._v(" "),s("p",[a._v("即 "),s("code",[a._v("83FCH~83FFH")]),a._v("。")]),a._v(" "),s("p",[a._v("可以任选其中一个地址如 "),s("code",[a._v("83FCH")]),a._v(" 作为该接口地址，编程如下：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("83FCH")]),a._v("\nIN   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v("\nAND  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FFH")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 闭合为 0")]),a._v("\nJZ   NEXT1\nJMP  NEXT2\n")])])]),s("h4",{attrs:{id:"锁存器接口及-74ls273-74ls373-74ls374"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁存器接口及-74ls273-74ls373-74ls374"}},[a._v("#")]),a._v(" 锁存器接口及 74LS273 74LS373 74LS374")]),a._v(" "),s("p",[a._v("锁存器接口：")]),a._v(" "),s("ul",[s("li",[a._v("通常由 D 触发器构成")]),a._v(" "),s("li",[a._v("特点：\n"),s("ul",[s("li",[a._v("具有对数据的锁存能力")]),a._v(" "),s("li",[a._v("不具备对数据的输出控制能力")])])])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("74LS273：8 个 D 触发器")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/1e0bb6f1d803fa9cdc1495cd95c4fd81a4347588cd75ea5ed6cafc7de0fcb3b8.png",alt:"74LS273"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("74LS373和74LS374：")]),a._v(" "),s("ul",[s("li",[a._v("三态输出的8 D触发器，并具有对数据的控制能力。")]),a._v(" "),s("li",[a._v("既可以做输入接口，也可以做输出接口。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/8444334785e7b869da453bb51e8d877169200ae08afaf04cf8160fd3b1e42349.png",alt:"74LS374"}})]),a._v(" "),s("p",[a._v("不懂")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("例题：输出接口地址是多少？")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/7a87ce50ade289782694bbbaecba5648c219d15bbe81e3cfcc9617c5139f1b33.png",alt:"例题图"}})]),a._v(" "),s("p",[a._v("不懂+1")]),a._v(" "),s("h4",{attrs:{id:"i-o接口综合应用例题-重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o接口综合应用例题-重要"}},[a._v("#")]),a._v(" I/O接口综合应用例题（重要！）")]),a._v(" "),s("ul",[s("li",[a._v("根据 4 个开关的状态控制 7 段数码管的显示（"),s("strong",[a._v("输入：4位开关 输出：显示符号与输出数据对应表中的 7 位")]),a._v("）")]),a._v(" "),s("li",[a._v("当4个开关的状态分别为"),s("code",[a._v("0000")]),a._v("~"),s("code",[a._v("1111")]),a._v("时，在7段数码管上对应显示'0'～'F'")]),a._v(" "),s("li",[a._v("设显示接口的地址为 "),s("code",[a._v("F0H")]),a._v("，开关接口地址为 "),s("code",[a._v("F1H")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/ccf5a8484feab575f81507e2a0403d2058634868ced55bc9ea9b5bbdd04b8788.png",alt:"数码管结构图"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/8c5a5589a6292e003fe60f5e5ef0cffd10a2e7e253224f9db9ec90a02091a5ed.png",alt:"显示符号与输出数据对应表"}})]),a._v(" "),s("p",[a._v("解：下面是总线连接图。")]),a._v(" "),s("ol",[s("li",[a._v("四个开关 K0~K3 连接 74LS244，输入到 CPU")]),a._v(" "),s("li",[a._v("汇编程序将 D0~D3 转为上表中的 8 位值")]),a._v(" "),s("li",[a._v("8 位值通过 D0~D7 连接 74LS273，输出到数码管")])]),a._v(" "),s("p",[a._v("译码器部分有一个 74LS138，它把 3 位信号 (A B C) 转为 Y0~Y7（此问只用到了 Y0 和 Y1）。A3~A7 接入到 74LS138 的使能端。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/e7121bad55aca7bfec3b3ea37c3618bd0d5809211e51fb0190f0976d54f868e0.png",alt:"总线连接图"}})]),a._v(" "),s("p",[a._v("程序段：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("......\nSeg7  DB  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3FH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("06H")]),a._v(",\n      "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5BH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4FH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("66H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6DH")]),a._v(",\n      "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7DH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("07H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7FH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("67H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("77H")]),a._v(",\n      "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7CH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("39H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5EH")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("79H")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("71H")]),a._v("\n......\n    LEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", Seg7\n    MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("GO:")]),a._v(" IN   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F1H")]),a._v("\n    AND  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0FH")]),a._v("\n    MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n    MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n    OUT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0F0H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n    JMP  GO\n")])])]),s("h3",{attrs:{id:"基本输入-输出方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本输入-输出方法"}},[a._v("#")]),a._v(" 基本输入/输出方法")]),a._v(" "),s("p",[a._v("基本输入/输出方法有：")]),a._v(" "),s("ul",[s("li",[a._v("无条件传送")]),a._v(" "),s("li",[a._v("查询式传送")]),a._v(" "),s("li",[a._v("中断方式传送")]),a._v(" "),s("li",[a._v("直接存储器存取(DMA)")])]),a._v(" "),s("p",[a._v("其中前三种是程序控制方式。")]),a._v(" "),s("h4",{attrs:{id:"无条件传送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无条件传送"}},[a._v("#")]),a._v(" 无条件传送")]),a._v(" "),s("p",[a._v("要求外设总是处于准备好状态。")]),a._v(" "),s("p",[a._v("优点：")]),a._v(" "),s("ul",[s("li",[a._v("软件及接口硬件简单")])]),a._v(" "),s("p",[a._v("缺点：")]),a._v(" "),s("ul",[s("li",[a._v("只适用于简单外设，适应范围较窄")])]),a._v(" "),s("p",[a._v("例：读取开关的状态；当开关闭合时，输出编码使发光二极管亮。")]),a._v(" "),s("h4",{attrs:{id:"查询工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询工作方式"}},[a._v("#")]),a._v(" 查询工作方式")]),a._v(" "),s("ul",[s("li",[a._v("仅当条件满足时才能进行数据传送；")]),a._v(" "),s("li",[a._v("每满足一次条件一般只进行一次数据传送。")]),a._v(" "),s("li",[a._v("适用场合：\n"),s("ul",[s("li",[a._v("外设并不总是处于“准备好”状态")]),a._v(" "),s("li",[a._v("对传送速率和效率要求不高")])])]),a._v(" "),s("li",[a._v("工作条件：\n"),s("ul",[s("li",[a._v("外设应提供设备状态信息")]),a._v(" "),s("li",[a._v("接口应具备状态端口")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/d6e75309923a7b7d78f94fcc2a193200c4719224ff34da82547c4be4a020f962.png",alt:"单个外设的查询工作方式流程图"}})]),a._v(" "),s("p",[a._v("上述流程图可能出现一直等待外设，导致死机的情况。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/f576ff745c7d1beca9c00fb917a8d67c4a60cb703f6743cfe02d9b1111b2cc6a.png",alt:"单个外设的查询工作方式流程图（改进）"}})]),a._v(" "),s("p",[a._v("例：数据输出")]),a._v(" "),s("ul",[s("li",[a._v("外设状态端口地址为"),s("code",[a._v("03FBH")]),a._v("，"),s("code",[a._v("bit5")]),a._v(" 为状态标志（=1忙，=0准备好）")]),a._v(" "),s("li",[a._v("外设数据端口地址为"),s("code",[a._v("03F8H")]),a._v("，CPU 写入数据会使状态标志置1；外设把数据读走后又把它置 0。")]),a._v(" "),s("li",[a._v("试画出其电路图，并将 BUF 中的 100 个字节数据输出。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/fca64462c982107b626fd346cdb2f144183f0ec904add363dc7908285ed2b6d3.png",alt:"电路图"}})]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\n      LEA  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", BUF\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("AGAI:")]),a._v(" MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("03FBH")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT:")]),a._v(" IN   "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v("\n      TEST "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("\n      JNZ  NEXT\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("03F8H")]),a._v("\n      MOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n      OUT  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n      INC  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\n      LOOP AGAI\n")])])]),s("hr"),a._v(" "),s("h4",{attrs:{id:"多个外设时查询工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多个外设时查询工作方式"}},[a._v("#")]),a._v(" 多个外设时查询工作方式")]),a._v(" "),s("ul",[s("li",[a._v("优点：软硬件比较简单")]),a._v(" "),s("li",[a._v("缺点：CPU 效率低，数据传送的实时性差，速度较慢")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/387c5b8cbf55732c085cf3cd2abfa7bfad8c72e1e19caf58b31d04745e408175.png",alt:"多个外设时查询工作方式"}})]),a._v(" "),s("h4",{attrs:{id:"中断控制方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断控制方式"}},[a._v("#")]),a._v(" 中断控制方式")]),a._v(" "),s("ul",[s("li",[a._v("特点：外设在需要时向CPU提出请求，CPU再去为它服务。服务结束后或在外设不需要时，CPU可执行自己的程序。")]),a._v(" "),s("li",[a._v("优点：CPU 效率高，实时性好，速度快。")]),a._v(" "),s("li",[a._v("缺点：程序编制相对较复杂。")])]),a._v(" "),s("h4",{attrs:{id:"以上三种i-o方式的共性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以上三种i-o方式的共性"}},[a._v("#")]),a._v(" 以上三种I/O方式的共性")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("信息的传送均需通过CPU")])]),a._v(" "),s("li",[a._v("软件： 外设与内存之间的数据传送是通过CPU执行程序来完成的（PIO方式）；")]),a._v(" "),s("li",[a._v("硬件：I/O接口和存储器的读写控制信号、地址信号都是由CPU发出的。")]),a._v(" "),s("li",[a._v("缺点：程序的执行速度限定了传送的最大速度")])]),a._v(" "),s("h4",{attrs:{id:"dma控制方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dma控制方式"}},[a._v("#")]),a._v(" DMA控制方式")]),a._v(" "),s("ul",[s("li",[a._v("外设直接与存储器进行数据交换 ，CPU不再担当数据传输的中介者；")]),a._v(" "),s("li",[a._v("总线由DMA控制器（DMAC）进行控制（CPU要放弃总线控制权），内存/外设的地址和读写控制信号均由DMAC提供。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/5545755c2b85b8696eec8d1f703113611f53ad2b18790c453deb964a53be51d0.png",alt:"DMA控制方式"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("DMA控制方式的工作过程：")]),a._v(" "),s("ol",[s("li",[a._v("外设向DMA控制器发出“DMA传送请求”信号 DREQ；")]),a._v(" "),s("li",[a._v("DMA控制器收到请求后，向CPU发出“总线请求”信号HOLD；")]),a._v(" "),s("li",[a._v("CPU在完成当前总线周期后会立即发出HLDA信号，对HOLD信号进行响应；")]),a._v(" "),s("li",[a._v("DMA控制器收到HLDA信号后，就开始控制总线，并向外设发出DMA响应信号DACK。")])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("DMA控制方式工作过程例：从外设向内存传送若干字节数据")]),a._v(" "),s("ol",[s("li",[a._v("DMAC向I/O接口发出读信号；")]),a._v(" "),s("li",[a._v("向地址总线上发出存储器的地址；")]),a._v(" "),s("li",[a._v("发出存储器写信号和AEN信号；")]),a._v(" "),s("li",[a._v("传送数据并自动修改地址和字节计数器")]),a._v(" "),s("li",[a._v("判断是否需要重复传送操作;")]),a._v(" "),s("li",[a._v("若数据传送完，DMA控制器撤销发往CPU的HOLD信号；")]),a._v(" "),s("li",[a._v("CPU检测到HOLD失效后，则撤销HLDA信号，并在下一时钟周期重新开始控制总线。")])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("DMA工作方式：")]),a._v(" "),s("ul",[s("li",[a._v("周期窃取：每个DMA周期只传送一个字节或一个字就立即释放总线。")]),a._v(" "),s("li",[a._v("数据块传送：DMAC在申请到总线后，将一块数据传送完后才释放总线，而不管中间DREQ是否有效。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/076342bd2e70ca365190fd100745fcf5b92ddfe11c845f8285c023b5728301a7.png",alt:"周期窃取的DMA"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("DMA控制方式的优缺点：")]),a._v(" "),s("ul",[s("li",[a._v("优点：数据传输由DMA硬件来控制，数据直接在内存和外设之间交换，可以达到很高的传输速率。")]),a._v(" "),s("li",[a._v("缺点：控制复杂，硬件成本相对较高。")])]),a._v(" "),s("h3",{attrs:{id:"中断技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断技术"}},[a._v("#")]),a._v(" 中断技术")]),a._v(" "),s("h4",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[a._v("#")]),a._v(" 基本概念")]),a._v(" "),s("p",[a._v("CPU执行程序时，发生了某种随机的事件(外部或内部)，引起CPU暂时中断正在运行的程序，转去执行一段特殊的服务程序(称为中断服务程序或中断处理程序)，以处理该事件，该事件处理完后又返回被中断的程序继续执行，这一过程称为中断。")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("中断源：引起CPU中断的事件，发出中断请求的来源。")]),a._v(" "),s("p",[a._v("分类")]),a._v(" "),s("ul",[s("li",[a._v("内部中断\n"),s("ul",[s("li",[a._v("异常中断：异常事件引起")]),a._v(" "),s("li",[a._v("软件中断：中断指令引起")])])]),a._v(" "),s("li",[a._v("外部中断\n"),s("ul",[s("li",[a._v("可屏蔽中断："),s("code",[a._v("INTR")]),a._v(" 中断")]),a._v(" "),s("li",[a._v("非屏蔽中断："),s("code",[a._v("NMI")]),a._v(" 中断")])])])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("引入中断的原因：")]),a._v(" "),s("ul",[s("li",[a._v("提高数据传输率；")]),a._v(" "),s("li",[a._v("避免了CPU不断检测外设状态的过程，提高了CPU的利用率。")]),a._v(" "),s("li",[a._v("实现对特殊事件的实时响应。")])]),a._v(" "),s("h4",{attrs:{id:"中断处理的一般过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断处理的一般过程"}},[a._v("#")]),a._v(" 中断处理的一般过程")]),a._v(" "),s("ol",[s("li",[a._v("中断请求")]),a._v(" "),s("li",[a._v("中断源识别及中断判优")]),a._v(" "),s("li",[a._v("中断响应")]),a._v(" "),s("li",[a._v("中断处理（服务）")]),a._v(" "),s("li",[a._v("中断返回")])]),a._v(" "),s("h5",{attrs:{id:"中断请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断请求"}},[a._v("#")]),a._v(" 中断请求")]),a._v(" "),s("ul",[s("li",[a._v("包括 NMI、INTR")]),a._v(" "),s("li",[a._v("中断请求信号应保持到中断被处理为止；")]),a._v(" "),s("li",[a._v("CPU响应中断后，中断请求信号应及时撤销。")])]),a._v(" "),s("h5",{attrs:{id:"中断源识别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断源识别"}},[a._v("#")]),a._v(" 中断源识别")]),a._v(" "),s("ul",[s("li",[a._v("软件查询法：在中断处理程序中查找中断源")]),a._v(" "),s("li",[a._v("中断矢量法—硬件识别\n"),s("ul",[s("li",[a._v("由中断源提供中断类型号，CPU根据类型号确定中断源。")]),a._v(" "),s("li",[a._v("中断源识别及中断判优（确定先响应哪个中断请求）由硬件系统完成")])])])]),a._v(" "),s("h5",{attrs:{id:"中断判优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断判优"}},[a._v("#")]),a._v(" 中断判优")]),a._v(" "),s("p",[a._v("当有多个中断源同时提出请求时，需要确定首先响应哪一个中断源。")]),a._v(" "),s("p",[a._v("优先级法则：")]),a._v(" "),s("ul",[s("li",[a._v("同时出现或等待的多个中断源，优先级最高的被响应。")]),a._v(" "),s("li",[a._v("低优先级的中断程序允许被高优先级的中断源所中断（可能出现中断嵌套）")]),a._v(" "),s("li",[a._v("也可以设置成禁止中断嵌套")])]),a._v(" "),s("p",[a._v("软件判优：顺序查询中断请求，先查询的先服务，即先被查询的中断源优先级别高"),s("br"),a._v("\n硬件判优：链式判优、并行判优（中断向量法）")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/fd25e75bef9a49c0de88ce5e21117fa5d15662e5a8d50e16af8c31a89d15eb10.png",alt:"菊花链逻辑电路"}})]),a._v(" "),s("p",[a._v("看不懂图。")]),a._v(" "),s("h5",{attrs:{id:"中断响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断响应"}},[a._v("#")]),a._v(" 中断响应")]),a._v(" "),s("p",[a._v("中断响应包含以下几个操作：")]),a._v(" "),s("ol",[s("li",[a._v("向中断源发出中断响应信号 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("N")]),s("mi",[a._v("T")]),s("mi",[a._v("A")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{INTA}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])])],1),a._v(" "),s("li",[a._v("关中断")]),a._v(" "),s("li",[a._v("保护硬件现场：将FLAGS压入堆栈")]),a._v(" "),s("li",[a._v("保护断点：将CS、IP压入堆栈")]),a._v(" "),s("li",[a._v("获得中断服务程序入口地址")])]),a._v(" "),s("p",[a._v("这些步骤都是由硬件系统完成。")]),a._v(" "),s("h5",{attrs:{id:"中断处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断处理"}},[a._v("#")]),a._v(" 中断处理")]),a._v(" "),s("p",[a._v("执行中断服务程序")]),a._v(" "),s("p",[a._v("中断服务程序的特点：")]),a._v(" "),s("ul",[s("li",[a._v("中断服务程序要定义为“远过程”")]),a._v(" "),s("li",[a._v("结束时要用 "),s("code",[a._v("IRET")]),a._v(" 指令返回")])]),a._v(" "),s("p",[a._v("中断服务程序完成的工作：")]),a._v(" "),s("ol",[s("li",[a._v("保护软件现场（参数）")]),a._v(" "),s("li",[a._v("开中断 "),s("code",[a._v("STI")]),a._v("--允许中断嵌套")]),a._v(" "),s("li",[a._v("中断处理—具体的处理")]),a._v(" "),s("li",[a._v("关中断 "),s("code",[a._v("CLI")])]),a._v(" "),s("li",[a._v("恢复软件现场")]),a._v(" "),s("li",[a._v("中断返回 "),s("code",[a._v("IRET")])])]),a._v(" "),s("h5",{attrs:{id:"中断返回"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断返回"}},[a._v("#")]),a._v(" 中断返回")]),a._v(" "),s("p",[a._v("执行 "),s("code",[a._v("IRET")]),a._v(" 指令，包括下面的操作：")]),a._v(" "),s("ul",[s("li",[a._v("使 IP、CS 和 FLAGS 从堆栈弹出")]),a._v(" "),s("li",[a._v("开中断")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/e3b7d3f62dce4349ed51b3216974bd8e234978eab3c564ff14ce818b83691e6b.png",alt:"外部可屏蔽中断处理过程"}})]),a._v(" "),s("h4",{attrs:{id:"_8088-8086中断系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088-8086中断系统"}},[a._v("#")]),a._v(" 8088/8086中断系统")]),a._v(" "),s("p",[a._v("在8086/8088所有的中断源都统一分配了不同的类型号")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/35b32e639011712b98f10c22e8d52fab5877d99637fe6de0b4f4e05ffce76e98.png",alt:"8088/8086中断系统"}})]),a._v(" "),s("h5",{attrs:{id:"内部中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部中断"}},[a._v("#")]),a._v(" 内部中断")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("中断类型")]),a._v(" "),s("th",{staticStyle:{"text-align":"center"}},[a._v("功能")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("类型0")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("除数为0中断例行程序")])]),a._v(" "),s("tr",[s("td",[a._v("类型1")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("单步")])]),a._v(" "),s("tr",[s("td",[a._v("类型2")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("非屏蔽中断，"),s("code",[a._v("NMI")])])]),a._v(" "),s("tr",[s("td",[a._v("类型3")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("设置断点")])]),a._v(" "),s("tr",[s("td",[a._v("类型4")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("溢出处理中断，"),s("code",[a._v("INTO")]),a._v("指令")])]),a._v(" "),s("tr",[s("td",[a._v("类型10H")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("显示设备中断")])]),a._v(" "),s("tr",[s("td",[a._v("类型20H")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("程序结束中断")])]),a._v(" "),s("tr",[s("td",[a._v("类型21H")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("DOS系统功能调用功能程序")])])])]),a._v(" "),s("h5",{attrs:{id:"外部中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外部中断"}},[a._v("#")]),a._v(" 外部中断")]),a._v(" "),s("ol",[s("li",[a._v("非屏蔽中断")])]),a._v(" "),s("ul",[s("li",[a._v("NMI 引脚上出现上升沿触发")]),a._v(" "),s("li",[a._v("不受标志位IF的限制，即不可以屏蔽。")]),a._v(" "),s("li",[a._v("类型号：2")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("可屏蔽中断")])]),a._v(" "),s("ul",[s("li",[a._v("INTR引脚输入，高电平有效")]),a._v(" "),s("li",[a._v("受标志位IF的限制")]),a._v(" "),s("li",[a._v("类型号：08H~0FH   70H~77H")])]),a._v(" "),s("h5",{attrs:{id:"中断向量表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断向量表"}},[a._v("#")]),a._v(" 中断向量表")]),a._v(" "),s("ul",[s("li",[a._v("存放各类中断的中断服务程序的入口地址；")]),a._v(" "),s("li",[a._v("每个入口占用4 Bytes，低字为段内偏移，高字为段基址；")]),a._v(" "),s("li",[a._v("表的地址位于内存的00000H～003FFH，大小为1KB，共256个入口。")])]),a._v(" "),s("h5",{attrs:{id:"中断向量表-ivt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断向量表-ivt"}},[a._v("#")]),a._v(" 中断向量表 IVT")]),a._v(" "),s("p",[a._v("8086/8088中断向量表位于内存最低1KB")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/a6bb3979da9cee3916e3ec4dc03dd03ded27a9ed555acfe73e4d9531606164b3.png",alt:"中断向量表 IVT"}})]),a._v(" "),s("h5",{attrs:{id:"中断向量表的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断向量表的初始化"}},[a._v("#")]),a._v(" 中断向量表的初始化")]),a._v(" "),s("ul",[s("li",[a._v("系统启动时已经把默认的中断向量写入IVT")]),a._v(" "),s("li",[a._v("用户需将自定义的中断服务程序入口地址放入向量表")]),a._v(" "),s("li",[a._v("注意点：\n"),s("ul",[s("li",[a._v("向量表所在的段基址="),s("code",[a._v("0")])]),a._v(" "),s("li",[a._v("存放中断服务程序入口的单元的偏移地址="),s("code",[a._v("n*4")])])])])]),a._v(" "),s("p",[a._v("例：将中断类型码为48H的服务程序入口地址放入向量表")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("TIMER  PROC  FAR\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; ...")]),a._v("\n       IRET\nTIMER  ENDP\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 下面的程序用MOV指令将类型码为48H的中断服务程序TIMER的中断向量放入向量表")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0000H")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0120H")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 48H*4")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("，OFFSET TIMER\nMOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("，SEG TIMER \nMOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("，"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("\n")])])]),s("h5",{attrs:{id:"可屏蔽中断的类型号的获取时序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可屏蔽中断的类型号的获取时序"}},[a._v("#")]),a._v(" 可屏蔽中断的类型号的获取时序")]),a._v(" "),s("p",[a._v("对可屏蔽中断的响应需要两个总线周期：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/6b8def93e04b078fa8d94ae4d44d94c51e06c1adc9deb9cc421aa0e6d193c7d4.png",alt:"可屏蔽中断的类型号的获取时序"}})]),a._v(" "),s("h5",{attrs:{id:"_8088内部中断与nmi中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8088内部中断与nmi中断"}},[a._v("#")]),a._v(" 8088内部中断与NMI中断")]),a._v(" "),s("p",[a._v("特点：")]),a._v(" "),s("ul",[s("li",[a._v("无 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("N")]),s("mi",[a._v("T")]),s("mi",[a._v("A")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{INTA}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v(" 总线周期")],1),a._v(" "),s("li",[a._v("中断类型码固定或由指令给出")])]),a._v(" "),s("h5",{attrs:{id:"_8086的中断响应和处理流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8086的中断响应和处理流程"}},[a._v("#")]),a._v(" 8086的中断响应和处理流程")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/4a99e7ff1b719a2a8ea78cf127650143b77b24f43f76f4ce0388c2906341acdb.png",alt:"8086的中断响应和处理流程"}})]),a._v(" "),s("h5",{attrs:{id:"ia-32的中断模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32的中断模式"}},[a._v("#")]),a._v(" IA-32的中断模式")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/40650dbd19b0ca79c9d155a60aef2f6df90457c926dc02f1543fca582f751ea9.png",alt:"picture 29"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/53a43442aecd2dd21a93b0d53954e413ea04863a13a6f1ae51526516693ef956.png",alt:"picture 30"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/3e73fc0c66da19a9cec93700da6858635f7fd3dd6a99d95b2bd1967c9f8d7b7d.png",alt:"picture 31"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/e91012dfbc943302f33aafffdf47140a11ad4e9b7df10148dc49d8627957ac79.png",alt:"picture 32"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/aab485d5b11361337ade9f5c29cfa820f1d40b5038d0bb564e695fc3b583dec9.png",alt:"picture 33"}})]),a._v(" "),s("h3",{attrs:{id:"中断控制器-8259a-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断控制器-8259a-介绍"}},[a._v("#")]),a._v(" 中断控制器 8259A 介绍")]),a._v(" "),s("h4",{attrs:{id:"一-8259a-的功能与结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-8259a-的功能与结构"}},[a._v("#")]),a._v(" 一. 8259A 的功能与结构")]),a._v(" "),s("h5",{attrs:{id:"_8259a-的主要功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8259a-的主要功能"}},[a._v("#")]),a._v(" 8259A 的主要功能")]),a._v(" "),s("ul",[s("li",[a._v("记录 8 个中断源的中断请求。")]),a._v(" "),s("li",[a._v("确定是否响应中断请求，并确定优先的中断请求并响应。")]),a._v(" "),s("li",[a._v("CPU 响应中断时向 CPU 发送中断类型号。")])]),a._v(" "),s("h5",{attrs:{id:"_8259a-的内部结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8259a-的内部结构"}},[a._v("#")]),a._v(" 8259A 的内部结构")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/63ee119036fb3f3048eb5d751f374dd5dafda4d1160cda5fb71b9ec8f141de6f.png",alt:"8259A的内部结构"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/7d331f96dc0e9a4839c9ba104955b81f7dd4b8b875bb5fea553895193f8166fa.png",alt:"6-5-p4"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/4e2c1c95febf913d73775f9775b1ebeaef55a2762c2af81407c8a26ea81c08b0.png",alt:"6-5-p5"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/864e6fc3c09262472d512565b4c3dabe52cd43a44651fc716d987efd2a7c3bab.png",alt:"6-5-p6"}})]),a._v(" "),s("p",[a._v("三个寄存器的英文分别是 "),s("code",[a._v("Interrupt Request Register")]),a._v(" (IRR), "),s("code",[a._v("In-Service Register")]),a._v(" (ISR), "),s("code",[a._v("Interrupt Mask Register")]),a._v(" (IMR)。这三个的功能一定要记住，当然要是记住了英文就很好记了。")]),a._v(" "),s("h5",{attrs:{id:"_8259a-的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8259a-的工作原理"}},[a._v("#")]),a._v(" 8259A 的工作原理")]),a._v(" "),s("ol",[s("li",[a._v("当IR0～IR7中的一条或多条请求线变高时，将相应的IRR位置1。")]),a._v(" "),s("li",[a._v("根据中断服务寄存器（ISR）和中断屏蔽寄存器（IMR）的内容，找出未被屏蔽的最高优先权的中断请求，向CPU发中断请求信号INT。")]),a._v(" "),s("li",[a._v("CPU响应中断时，送回应答信号 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("N")]),s("mi",[a._v("T")]),s("mi",[a._v("A")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{INTA}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v(" 脉冲。")],1),a._v(" "),s("li",[a._v("8259A接到CPU发的第一个 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("N")]),s("mi",[a._v("T")]),s("mi",[a._v("A")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{INTA}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v(" 脉冲时，把ISR中与最高优先级请求信号对应的位置1，并把IRR中的相应位复位。")],1),a._v(" "),s("li",[a._v("在8259A接到第二个 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mover",{attrs:{accent:"true"}},[s("mrow",[s("mi",[a._v("I")]),s("mi",[a._v("N")]),s("mi",[a._v("T")]),s("mi",[a._v("A")])],1),s("mo",{attrs:{stretchy:"true"}},[a._v("‾")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("\\overline{INTA}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8833300000000001em","vertical-align":"0em"}}),s("span",{staticClass:"mord overline"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8833300000000001em"}},[s("span",{staticStyle:{top:"-3em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07847em"}},[a._v("I")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[a._v("N")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[a._v("T")]),s("span",{staticClass:"mord mathdefault"},[a._v("A")])])]),s("span",{staticStyle:{top:"-3.80333em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"3em"}}),s("span",{staticClass:"overline-line",staticStyle:{"border-bottom-width":"0.04em"}})])])])])])])])])]),a._v(" 脉冲时向CPU发送中断类型码。如果是在AEOI（自动结束中断）方式，在这个脉冲结束时复位ISR的相应位。在其他方式下，要在中断服务程序结束时通过发EOI命令来复位ISR相应位。")],1)]),a._v(" "),s("h5",{attrs:{id:"_8259a-的外部特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8259a-的外部特性"}},[a._v("#")]),a._v(" 8259A 的外部特性")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/8fce5745daa744f1e55ad49138d1430c3ab0100f56d38535e8519df36a9f9858.png",alt:"8259A与CPU的接口引脚图"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/fd2db466f4c68183565f70a32d3e1d9c8dcef5cab87ba9beb52e1994ad51e8d6.png",alt:"8259A与CPU的接口引脚(1)"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/f873b23eab4d87695b79ec6b237757dcd1e2aacf801bb84306d876d72a57c8e8.png",alt:"8259A与CPU的接口引脚(2)"}})]),a._v(" "),s("h4",{attrs:{id:"二-8259a-的工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-8259a-的工作方式"}},[a._v("#")]),a._v(" 二. 8259A 的工作方式")]),a._v(" "),s("p",[a._v("下面的部分应该只用对名字留一个印象，具体是什么功能、怎么工作，应该不重要。")]),a._v(" "),s("h5",{attrs:{id:"_1-优先级管理方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-优先级管理方式"}},[a._v("#")]),a._v(" 1. 优先级管理方式")]),a._v(" "),s("h6",{attrs:{id:"_1-中断嵌套方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-中断嵌套方式"}},[a._v("#")]),a._v(" 1) 中断嵌套方式")]),a._v(" "),s("ol",[s("li",[a._v("普通全嵌套方式")])]),a._v(" "),s("ul",[s("li",[a._v("这是最常用最基本的工作方式，8259A初始化后为该方式。")]),a._v(" "),s("li",[a._v("当一个中断正被处理时，只有比它优先级更高的中断请求才会被响应。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("特殊全嵌套方式")])]),a._v(" "),s("ul",[s("li",[a._v("它与普通全嵌套方式的区别是：允许同级中断进行嵌套")]),a._v(" "),s("li",[a._v("只允许主片8259A使用特殊全嵌套方式，以实现从片中的高低优先级之间的嵌套。")])]),a._v(" "),s("p",[a._v("以上两种嵌套方式中各中断源的优先级顺序是固定的，加电时优先级从高到低顺序为：IR0、IR1、IR2、IR3、IR4、IR5、IR6、IR7。也可以重设和循环优先级。")]),a._v(" "),s("h6",{attrs:{id:"_2-优先级变化方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-优先级变化方式"}},[a._v("#")]),a._v(" 2) 优先级变化方式")]),a._v(" "),s("ol",[s("li",[a._v("优先级固定方式")])]),a._v(" "),s("ul",[s("li",[a._v("各中断请求的优先级固定不变，8259A加电后IR0最高，IR7最低。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("优先级循环方式")])]),a._v(" "),s("ul",[s("li",[a._v("优先队列是变化的，一个中断源得到中断服务后，它的优先级自动降为最低。")]),a._v(" "),s("li",[a._v("按照加电时的优先级顺序进行优先级循环称为"),s("strong",[a._v("优先级自动循环方式")]),a._v("。改变初始优先级顺序后的循环，称为"),s("strong",[a._v("优先级特殊循环方式")]),a._v("。")]),a._v(" "),s("li",[a._v("优先级循环方式适合于系统中各个中断源级别相当，能够得到均衡的服务。")])]),a._v(" "),s("h5",{attrs:{id:"_2-中断源的屏蔽方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-中断源的屏蔽方式"}},[a._v("#")]),a._v(" 2．中断源的屏蔽方式")]),a._v(" "),s("ol",[s("li",[a._v("常规屏蔽方式")])]),a._v(" "),s("ul",[s("li",[a._v("8259A的每个中断请求输入端都可通过对应的IMR位的设置被屏蔽。IMR某位为“1”表示屏蔽对应的中断请求。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("特殊屏蔽方式")])]),a._v(" "),s("ul",[s("li",[a._v("使正在处理的中断所对应的IMR位置1，并使对应的ISR位清零，这样任何优先级的中断都可得到响应。")]),a._v(" "),s("li",[a._v("主要用在中断服务程序中需要动态地改变系统的优先级结构的情况。")]),a._v(" "),s("li",[a._v("例如，在执行中断服务程序的某一部分时，需要禁止比本中断优先级低的其他中断请求，而在执行另一部分时，又希望开放这些中断请求。")])]),a._v(" "),s("p",[a._v("看不懂")]),a._v(" "),s("h5",{attrs:{id:"_3-中断结束的处理方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-中断结束的处理方式"}},[a._v("#")]),a._v(" 3．中断结束的处理方式")]),a._v(" "),s("p",[a._v("中断结束 (End of Interrupt, EOI)")]),a._v(" "),s("ol",[s("li",[a._v("自动中断结束方式")])]),a._v(" "),s("ul",[s("li",[a._v("它是最简单的中断结束方式。")]),a._v(" "),s("li",[a._v("系统进入中断过程，在第二个INTA脉冲的后沿，8259A将当前处理的中断所对应的ISR位清零。")]),a._v(" "),s("li",[a._v("当系统正在为某外设进行中断服务，但在8259A的ISR中却没有对应位指示，故该方式只能用于非嵌套方式处理。")]),a._v(" "),s("li",[a._v("在初始化时由初始化命令字ICW4的AEOI位置1来设置这种方式。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("正常中断结束方式")])]),a._v(" "),s("ul",[s("li",[a._v("它用在两种全嵌套方式下，当CPU向8259A发出中断结束命令时，8259A将ISR中优先级最高的位复位（即当前正在进行的中断服务结束）。")]),a._v(" "),s("li",[a._v("这种结束方式的操作很简单，通过向8259A的偶地址端口输出一个操作命令字OCW2来发EOI命令。")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("特殊中断结束方式")])]),a._v(" "),s("ul",[s("li",[a._v("用这种方式结束中断时，在程序中要发一条特殊中断结束命令，指出当前中断服务寄存器ISR中的哪一位将被清除。")]),a._v(" "),s("li",[a._v("它通过向8259A的偶地址端口输出一个操作命令字OCW2，其中的L2、L1、L0这三位指出了对ISR中的哪一位进行清除。")]),a._v(" "),s("li",[a._v("该方式用于中断优先级顺序会改变的特殊全嵌套方式（两种优先级循环方式），无法判断ISR的哪位是当前处理的中断。")])]),a._v(" "),s("p",[a._v("对于多片8259A级联情况，如果不是自动中断结束方式，在中断服务程序的最后需要发两次EOI命令，分别清除从片中的ISR位和主片中的ISR位。")]),a._v(" "),s("p",[a._v("对于采用特殊嵌套方式的多片级联，从片中可能嵌套有多个中断源，应先向从片发EOI命令，然后读ISR，检查还有无为1的位，如无则才能向主片发EOI命令。")]),a._v(" "),s("p",[a._v("这说的是人话吗（逃")]),a._v(" "),s("h5",{attrs:{id:"_4-连接系统总线的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-连接系统总线的方式"}},[a._v("#")]),a._v(" 4．连接系统总线的方式")]),a._v(" "),s("ol",[s("li",[a._v("缓冲方式")])]),a._v(" "),s("ul",[s("li",[a._v("在很多片8259A级联的大系统中，8259A需要通过总线驱动器和数据总线相连，这就是缓冲方式。")]),a._v(" "),s("li",[a._v("在缓冲方式下，8259A的SP/EN端和总线驱动器的允许端相连， SP/EN端输出的低电平可作为总线驱动器的控制信号。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("非缓冲方式")])]),a._v(" "),s("ul",[s("li",[a._v("当系统中只有单片8259A或有少量几片8259A级联时，一般将8259A直接与数据总线相连，这种方式就称为非缓冲方式。")]),a._v(" "),s("li",[a._v("8259A的SP/EN端作为输入端，在单片8259A系统中， SP/EN端接高电平；在多片系统，主片的SP/EN 端接高电平，从片的SP/EN端接低电平。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/4a2707a4c1bdc98e67c76ad4c37195dab86d0ec9fda950e5bb91a78b4bfa90d3.png",alt:"8259的级联结构"}})]),a._v(" "),s("h5",{attrs:{id:"_5-中断触发方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-中断触发方式"}},[a._v("#")]),a._v(" 5．中断触发方式")]),a._v(" "),s("ol",[s("li",[a._v("电平触发方式")])]),a._v(" "),s("ul",[s("li",[a._v("把中断请求输入端的高电平作为中断请求信号。这时高电平信号不能持续太久，否则一次中断请求可能会被多次响应。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("边沿触发方式")])]),a._v(" "),s("ul",[s("li",[a._v("8259A将中断请求输入端IRi出现的上升沿作为中断请求信号。该中断请求得到触发后可以一直保持高电平。")])]),a._v(" "),s("p",[a._v("真心看不懂。")]),a._v(" "),s("h4",{attrs:{id:"三-8259a-的初始化命令字和初始化流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-8259a-的初始化命令字和初始化流程"}},[a._v("#")]),a._v(" 三. 8259A 的初始化命令字和初始化流程")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/0832bb47c7347d4ccfb2cea481db217f6bf577b3d65f7fa61416eff8b7b8b414.png",alt:"ICW OCW"}})]),a._v(" "),s("p",[a._v("下面的图考试应该会给吧。应该就是依葫芦画瓢的事情了。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/ffdb52e18272453dd8280ee78165da7ce5ba33361c06ac77bcdf6bbd5c2b4061.png",alt:"8259A 读写功能的实现"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/fcd0dbac702ef95c154e88914f3316095f07cbb24a18381c31739c346730843b.png",alt:"ICW1"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/9bc9c55d0e2ceb3039d6bdbe374bbf5e8fced03bb304a7b30477d34632614d4e.png",alt:"ICW2"}})]),a._v(" "),s("ul",[s("li",[a._v("ICW2是用来设置中断类型码，编程时用ICW2设置中断类型码高5位T7～T3（即D7～D3），而D2～D0的值恒为零。")]),a._v(" "),s("li",[a._v("中断类型码的高5位就是ICW2的高5位，而低3位是由引起中断请求的引脚IR0～IR7决定。")]),a._v(" "),s("li",[a._v("例如：ICW2为20Ｈ，则8259A的IR0～IR7对应的8个中断类型码为20H、21H、22H、23H、24H、25H、26H、27H。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/10594a4c5e787998537801052f5b60d16e5252739e7c21b73bc6bd7356585073.png",alt:"ICW3"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/57c5d2568a2ad098c43e9e2f4f9f84a0c5568423281b7afdb12d06af3fe2c335.png",alt:"ICW4"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/24b596157c58b430d21d66fae472123b9129985d0994485474dea076941d1b7b.png",alt:"ICW4 说明"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/9fa97479fa1b37091ecf2b13c095a92c682367ad37b19c1049d6f7de6481e905.png",alt:"ICW4 说明（续）"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("8259A 的初始化流程：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/59e78e045b5629fb301ed1a2dcd77b3e0d3ab062aed7cc0929a403f53423bc79.png",alt:"8259A 的初始化流程"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("例题：以微型计算机中使用的单片8259A为例，试对其进行初始化设置。在微型计算机中，8259A的ICW1和ICW4的端口地址分别为20H、21H。初始化设置的程序段如下：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MOV\t "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13H")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";设置ICW1（中断请求信号采用边沿触发方式；单片；后面要写ICW4）")]),a._v("\nOUT\t "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("  \nMOV\t "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("18H")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";设置ICW2（将中断类型码高5位指定为00011）")]),a._v("\nOUT\t "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nMOV\t "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0DH")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";设置ICW4（用常规全嵌套方式；不用中断自动结束方式；采用缓冲方式；工作于8088/8086系统）")]),a._v("\nOUT  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("  \n")])])]),s("p",[a._v("应该对照着表就能做叭。")]),a._v(" "),s("h4",{attrs:{id:"四-8259a-的操作命令字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-8259a-的操作命令字"}},[a._v("#")]),a._v(" 四. 8259A 的操作命令字")]),a._v(" "),s("ul",[s("li",[a._v("对8259A用初始化命令字初始化后，就进入工作状态了，准备接受IRi输入的中断请求信号。")]),a._v(" "),s("li",[a._v("在8259A工作期间，可通过操作命令字（OCW）来使它按不同的方式操作。")]),a._v(" "),s("li",[a._v("8259A有3个操作命令字OCW1-OCW3，没有写入顺序和时间要求，可独立使用。")]),a._v(" "),s("li",[a._v("OCW1写入奇地址，OCW2和OCW3写入偶地址。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/fdda93c01b5fae978a5c8a4a182db5ae4c7728f7f2f0fd534851b6a8ecdfed32.png",alt:"OCW1"}})]),a._v(" "),s("p",[a._v("8259A初始化后缺省的状态是全部屏蔽位=0(允许中断)")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("例：若要屏蔽IR5、IR4和IR1引脚上的中断，而让其余的中断得到允许。试确定其中断屏蔽操作命令字。")]),a._v(" "),s("p",[a._v("OCW1为："),s("code",[a._v("00110010")]),a._v(" 或 "),s("code",[a._v("32H")]),a._v("。")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("img",{attrs:{src:"/images/9b7b0d77ff495432cc26be3c58e9151572f932cb84ed7eddbbd9ea157bcd3032.png",alt:"OCW2"}})]),a._v(" "),s("p",[a._v("OCW2具有发EOI命令和设置优先级循环方式的两种功能，其中101和111两种情况是结束中断后的系统方式设置。")]),a._v(" "),s("ul",[s("li",[a._v("R：优先级方式控制位。\n"),s("ul",[s("li",[a._v("1：循环优先级")]),a._v(" "),s("li",[a._v("0：为固定优先级。")])])]),a._v(" "),s("li",[a._v("SL：指示OCW2中L2～L0位是否有效。\n"),s("ul",[s("li",[a._v("1：有效；")]),a._v(" "),s("li",[a._v("0：无效。")])])]),a._v(" "),s("li",[a._v("EOI：在非自动中断结束方式下的中断结束命令位。\n"),s("ul",[s("li",[a._v("1：发中断结束命令，它使现行中断的ISR位复位；")]),a._v(" "),s("li",[a._v("0：不发出中断结束命令。")])])]),a._v(" "),s("li",[a._v("L2～L0：它有两个作用。\n"),s("ul",[s("li",[a._v("(1)设定优先级特殊循环方式时初始的最低优先级序号；")]),a._v(" "),s("li",[a._v("(2)在特殊中断结束命令中指明ISR的哪位被复位。")])])])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("例：若某8259A的OCW2设置为11000011B，试分析此操作命令字所确定的操作方式。")]),a._v(" "),s("p",[a._v("该命令字确定8259A为优先级特殊循环（参见"),s("a",{attrs:{href:"#2-%E4%BC%98%E5%85%88%E7%BA%A7%E5%8F%98%E5%8C%96%E6%96%B9%E5%BC%8F"}},[a._v("优先级变化方式")]),a._v("），将IR3定为最低优先级。因此，系统中优先级从高到低为IR4、IR5、IR6、IR7、IR0、IR1、IR2、IR3。")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("img",{attrs:{src:"/images/1555fc3daad6be088c8ccb56e1647df68600f84c422c0e6e8b3a7d41105b2189.png",alt:"OCW3"}})]),a._v(" "),s("p",[a._v("有三个功能：")]),a._v(" "),s("ol",[s("li",[a._v("设置特殊中断屏蔽方式：D6D5=11为设置，10为清除.")]),a._v(" "),s("li",[a._v("查询中断请求：使P=1先写到8259A，再对该地址读入，得到中断状态字节（见下图）。")])]),a._v(" "),s("ul",[s("li",[a._v("I=1,表示IR0~IR7中有中断请求，R2R1R0表示其中最高优先级的编号（IRi）；")]),a._v(" "),s("li",[a._v("I=0，表示无中断请求产生。")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("读8259A的状态")])]),a._v(" "),s("ul",[s("li",[a._v("写RR和RIS=10的OCW3到8259A，再读该地址，得到IRR的内容；")]),a._v(" "),s("li",[a._v("写RR和RIS=11的OCW3到8259A，再读该地址，得到ISR的内容；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/e9f1fb53233f9548323147f3d9ee90a8a3b490c9fd54c7073c85c50f020850fe.png",alt:"中断状态字"}})]),a._v(" "),s("p",[a._v("如果要读IMR，只需要从奇地址端口(A0=1)读8259A即可，与OCW3无关。")]),a._v(" "),s("h4",{attrs:{id:"五-8259a-的应用举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五-8259a-的应用举例"}},[a._v("#")]),a._v(" 五. 8259A 的应用举例")]),a._v(" "),s("p",[a._v("两片级联，应该不会考（）")]),a._v(" "),s("p",[a._v("设两片8259A级联，提供15级向量中断，CAS2～CAS0作为互连线，从片8259A的INT直接连到主片8259A的IR2上。")]),a._v(" "),s("ul",[s("li",[a._v("端口地址，主片在020H～03FH范围内，实际使用020H和021H两个端口；从片在0A0H～0BFH范围，实际使用0A0H和0A1H两个端口。")]),a._v(" "),s("li",[a._v("主、从片的中断请求信号均采用边沿触发方式。")]),a._v(" "),s("li",[a._v("主片与从片采用一般全嵌套方式，优先级的排列次序为0级最高（主片的IR0），依次为1级（主片的IR1）、2级（主片的IR2，即从片的IR0 ～IR7），然后是3级～7级（主片的IR3～IR7）。")]),a._v(" "),s("li",[a._v("采用非缓冲方式，主片的SP/EN端接+5V，从片的SP/EN端接地。")]),a._v(" "),s("li",[a._v("设定主片的中断号为08H～0FH，从片的中断号为70H～77H。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/1cf8570b67f28852073e2a3f8d518b8084c8bdac4e0847c9f3d3056ffdfb21ea.png",alt:"两个8259A的级联图"}})]),a._v(" "),s("p",[a._v("对主片8259A的初始化：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("INTM00\tEQU  \t"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("020H")]),a._v("       \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";主8259A端口0")]),a._v("\nINTM01\tEQU   "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("021H")]),a._v("       \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";主8259A端口l")]),a._v("\n……      \nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00010001B")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICWl;  边沿触发，要ICW4，级联方式")]),a._v("\n                        ；要ICW3\nOUT  INTM00, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nJMP  SHORT "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";延迟=该指令的执行时间，$+2是下条指令")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00001000B")]),a._v("\t "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICW2：设置主片的中断向量，起始")]),a._v("\n                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";的中断向量为08H")]),a._v("\nOUT INTM01, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nJMP  SHORT "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nMOV  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00000100B")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICW3：主片的IR2接从片8259A的INT  \t\t\t")]),a._v("\n\nOUT  \tINTM01, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nJMP \tSHORT"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nMOV \t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00000001B")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICW4：非总线缓冲，常规全嵌套，")]),a._v("\n                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";正常结束中断方式")]),a._v("\nOUT  \tINTM01, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nJMP  \tSHORT"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),s("p",[a._v("对从片8259A的初始化：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("INTS00  EQU  \t"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0A0H")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";从片8259A端口0")]),a._v("\nINTS01  EQU  \t"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0A1H")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";从片8259A端口1")]),a._v("\nMOV \t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", 0001000lB\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICWl：边沿触发，要ICW4；")]),a._v("\n                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";级联方式，要ICW3")]),a._v("\nOUT \tINTS00, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("Al")]),a._v("\n\nJMP \tSHORT  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nMOV \t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("01110000B")]),a._v(" \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICW2：设置从片的中断向量，")]),a._v("\n                        ；起始的中断向量为"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("70H")]),a._v("\nOUT \tINTS01, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nJMP \tSHORT  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nMOV\t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00000010B")]),a._v(" \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICW3，设置从片的识别标志，")]),a._v("\n                        ；即指定连接主片的IR2\nOUT \tINTS01, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nJMP \tSHORT  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nMOV \t"),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("00000001B")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";ICW4：非总线缓冲，常规全嵌套，")]),a._v("\n                      ；正常结束中断方式\nOUT \tINTS01, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\nJMP \tSHORT  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("MY_INT PROC FAR\nPUSH  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\nPUSH  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("\n….\nSTI\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("中断服务程序主体"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\nCLI\n….\nPOP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v("\nPOP  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 用OCW2写EOI 命令  ， 00100000B")]),a._v("\nOUT  A0H, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";向从片发EOI命令")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v("\nOUT "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("; 向主片发EOI命令")]),a._v("\nIRET\t\nMY_INT ENDP\nCLI \nPUSH "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v("\nXOR "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(",  n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";  中断类型号")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v(","),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nSHL "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";向量表偏移地址=nX4")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",  OFFSET MY_INT\nMOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(",  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\nMOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(",  SEG MY_INT\nMOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\nPOP "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";按上述方法设置用户的各个中断向量")]),a._v("\nSTI\n")])])]),s("h2",{attrs:{id:"第七章-常用数字接口电路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第七章-常用数字接口电路"}},[a._v("#")]),a._v(" 第七章 常用数字接口电路")]),a._v(" "),s("h3",{attrs:{id:"_7-1-并行通信与串行通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-并行通信与串行通信"}},[a._v("#")]),a._v(" 7.1 并行通信与串行通信")]),a._v(" "),s("h4",{attrs:{id:"_1-并行通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-并行通信"}},[a._v("#")]),a._v(" 1. 并行通信")]),a._v(" "),s("ul",[s("li",[a._v("定义：能同时传送一个数据的所有位。")]),a._v(" "),s("li",[a._v("一个数据的位数可以是字节或字长。\n两个设备之间有必须有多条数据传输线，才能实现多位数据同时传输。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/b6b7c0640acaf5f2865d6e395e159cff931f799747ccf83bd1e4e8013825259b.png",alt:"并行通信"}})]),a._v(" "),s("ul",[s("li",[a._v("并行方式主要用于近距离通信，如计算机内的总线结构")]),a._v(" "),s("li",[a._v("并行通信有简单接口和可编程接口")]),a._v(" "),s("li",[a._v("特点：\n"),s("ul",[s("li",[a._v("传输速度快，处理简单；")]),a._v(" "),s("li",[a._v("适合近距离传送；")]),a._v(" "),s("li",[a._v("所传送信息无固定格式要求。")])])])]),a._v(" "),s("h4",{attrs:{id:"_2-串行通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-串行通信"}},[a._v("#")]),a._v(" 2. 串行通信")]),a._v(" "),s("ul",[s("li",[a._v("定义：数据逐位顺序传送。")]),a._v(" "),s("li",[a._v("数据一位一位通过同一通信线进行传输。\n"),s("ul",[s("li",[a._v("发送设备将几位并行数据转换成串行方式，再逐位传输到接收设备。在接收端将数据从串行方式转换成并行方式。")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/2a4458a1b84c4f8fcdfbde7486d0fa1276f9e7c90364d2db35ddf1355d1fdd35.png",alt:"串行通信"}})]),a._v(" "),s("ul",[s("li",[a._v("数据传送方式：\n"),s("ol",[s("li",[a._v("双工：两根数据传输线，能够同时发送和接收")]),a._v(" "),s("li",[a._v("半双工：单根数据传输线，不能同时发送和接收")]),a._v(" "),s("li",[a._v("单工：单根数据传输线只用作发送或只用作接收")])])]),a._v(" "),s("li",[a._v("通信方式：\n"),s("ol",[s("li",[a._v("同步通信：通信时，发送方和接收方的时钟频率和相位保持一致，收发双方采用同一个时钟信号来定时。每两个字符间的时间间隔固定。")]),a._v(" "),s("li",[a._v("异步通信：收发双方没有统一的时钟来定时和同步，每两个字符间的时间间隔不固定。")])])]),a._v(" "),s("li",[a._v("传输速率：\n"),s("ul",[s("li",[a._v("在通讯中，用波特率来描述数据的传输速率。即每秒钟传送的二进制位数，简写为bps。")])])])]),a._v(" "),s("h3",{attrs:{id:"_7-2-可编程计数-定时器芯片-8253"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-可编程计数-定时器芯片-8253"}},[a._v("#")]),a._v(" 7.2 可编程计数/定时器芯片 8253")]),a._v(" "),s("ul",[s("li",[a._v("定时/计数器的应用\n"),s("ul",[s("li",[a._v("生产线上统计产品的数目----计数器")]),a._v(" "),s("li",[a._v("系统的动态存储器刷新----定时器")]),a._v(" "),s("li",[a._v("系统时钟计时----定时器")]),a._v(" "),s("li",[a._v("扬声器的频率源----定时器")])])]),a._v(" "),s("li",[a._v("常用的定时方法\n"),s("ol",[s("li",[a._v("软件定时：优点是节省硬件；缺点是执行程序期间CPU一直被占用，降低了CPU效率")]),a._v(" "),s("li",[a._v("硬件定时：要用额外的硬件—计数/定时器，但可提高CPU的利用率")])])])]),a._v(" "),s("h4",{attrs:{id:"_8253-基本功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8253-基本功能"}},[a._v("#")]),a._v(" 8253 基本功能")]),a._v(" "),s("ol",[s("li",[a._v("具有三个相互独立的16位计数器，也叫通道。")]),a._v(" "),s("li",[a._v("每个通道都可设定以6种工作方式之一进行计数/定时")]),a._v(" "),s("li",[a._v("每个计数器都可设为按二进制或BCD码计数")]),a._v(" "),s("li",[a._v("具有计数和定时功能，都是基于减1计数方式工作。")]),a._v(" "),s("li",[a._v("计数器减为0后，产生输出信号，有的方式可自动装入初值重新计数。")]),a._v(" "),s("li",[a._v("在减1过程中，随时都可由CPU读取计数器的当前值。")])]),a._v(" "),s("h4",{attrs:{id:"_8253-结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8253-结构"}},[a._v("#")]),a._v(" 8253 结构")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/8cc719731655e54e5ea589c8149e11bada97c985afb9fdeeb83fbfce8bd216fb.png",alt:"8253 引脚"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/968f9655843f8cefa1c2eb3abc9b95f7295f4c5c1c99b4ab3b5896c4f1dcae63.png",alt:"8253 接口"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/5896bdcb2843f84b54205eeccf61bb203fb713637a21f39e0ee67f9f9a64c1ea.png",alt:"8253 寄存器选择表"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/19f479c2400bf7fdf5d1c581a81739c64d8ae91ed722757b12c534d898c2fb9d.png",alt:"8253 内部结构"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/7ee8fc8e7c5fbc138e851ec1766e974f433bfa94d9a39ce81e28553a98f3f6a7.png",alt:"各计数器的内部结构"}})]),a._v(" "),s("h4",{attrs:{id:"_8253的控制字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8253的控制字"}},[a._v("#")]),a._v(" 8253的控制字")]),a._v(" "),s("p",[a._v("8253工作前需要通过控制字进行设置，每个计数器（通道）都要单独写控制字，端口地址都为同一个地址。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/b04c0eb276ab85b67e30235cb00322db18e3b4368d6d4310e98b1cec294a0535.png",alt:"8253的控制字"}})]),a._v(" "),s("p",[a._v("似乎挺好理解的，比 8259 的控制字好理解多了。")]),a._v(" "),s("p",[s("s",[a._v("虽然我还是不会背")])]),a._v(" "),s("h4",{attrs:{id:"_8253的工作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8253的工作方式"}},[a._v("#")]),a._v(" 8253的工作方式")]),a._v(" "),s("p",[a._v("8253共有6种工作方式：方式0~方式5。")]),a._v(" "),s("p",[a._v("8253各工作方式的共同点：")]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("控制字写入")]),a._v("计数器时，所有控制逻辑立即复位，输出端OUT进入初始态；")]),a._v(" "),s("li",[s("strong",[a._v("写入计数初值")]),a._v("后，要经过一个时钟周期后计数器才开始计数；")]),a._v(" "),s("li",[a._v("在时钟脉冲"),s("strong",[a._v("CLK的上升沿")]),a._v("门控信号GATE被采样；")]),a._v(" "),s("li",[a._v("计数器的计数时间点是"),s("strong",[a._v("CLK的下降沿")]),a._v("。")])]),a._v(" "),s("h5",{attrs:{id:"方式0-计数结束中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式0-计数结束中断"}},[a._v("#")]),a._v(" 方式0—计数结束中断")]),a._v(" "),s("p",[a._v("下面六个方式，主要是看图说话，图比字形象的多。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/474e1c2a0a6d2a9e2c4d2b01a19ed3b0ff7c822840683a17de8c996d6eea8923.png",alt:"方式0—计数结束中断"}})]),a._v(" "),s("ul",[s("li",[a._v("写入控制字后OUT变低；")]),a._v(" "),s("li",[a._v("写入计数初值后的一个CLK的下降沿，计数初值被装入计数器，然后在每个CLK的下降沿做减1计数；")]),a._v(" "),s("li",[a._v("当计数到0时OUT输出变为高电平；")]),a._v(" "),s("li",[a._v("GATE为高电平时，计数器工作，为低电平时停止计数；\n在计数过程中若重新写了新的计数初值，则按新值重新工作；\n每写一次计数初值只计数一个周期。")])]),a._v(" "),s("h5",{attrs:{id:"方式1-可重复触发的单稳态触发器-硬件触发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式1-可重复触发的单稳态触发器-硬件触发"}},[a._v("#")]),a._v(" 方式1—可重复触发的单稳态触发器(硬件触发)")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/ce7a3bb46843012d3c284b292afd39619353c25a84fbac23ec16088a268cb34e.png",alt:"方式1—可重复触发的单稳态触发器(硬件触发)"}})]),a._v(" "),s("ul",[s("li",[a._v("写入控制字后，OUT变为高电平；")]),a._v(" "),s("li",[a._v("写入计数初值后，当GATE从低变高后的一个CLK下降沿装入初值，OUT变为低。然后对每个CLK下降沿做减1计数，计到0时OUT变高。")]),a._v(" "),s("li",[a._v("若计数结束后GATE又出现上跳，则重新装入计数初值，重新开始计数。")]),a._v(" "),s("li",[a._v("若计数过程中GATE又出现上跳，则重新装入计数初值，重新开始计数，本次OUT周期宽度加长。")]),a._v(" "),s("li",[a._v("负脉冲宽度=计数初值 X CLK周期。")])]),a._v(" "),s("h5",{attrs:{id:"方式2-频率发生器-软件或硬件触发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式2-频率发生器-软件或硬件触发"}},[a._v("#")]),a._v(" 方式2—频率发生器(软件或硬件触发)")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/f21c06a9019be19a3fcb586d252826ab6bcc1f90d6667c19d0faac866da6a86b.png",alt:"方式2—频率发生器(软件或硬件触发)"}})]),a._v(" "),s("p",[a._v("软件触发：保持GATE为高")]),a._v(" "),s("ul",[s("li",[a._v("写控制字后，OUT变为高电平；")]),a._v(" "),s("li",[a._v("写计数初值后的一个CLK的下降沿，初值被装入计数器，然后对每个CLK的下降沿减1计数；")]),a._v(" "),s("li",[a._v("计数期间OUT保持为高，当计数到1时OUT输出宽度为1个CLK周期的负脉冲，然后重新装入计数初值开始计数。")]),a._v(" "),s("li",[a._v("若计数中重写计数初值，则下次计数周期才会以新值开始计数。")])]),a._v(" "),s("p",[a._v("硬件触发：写控制字和计数初值时GATE为低，当其变高后的下一个CLK下降沿计数器装入初值，后面每个CLK下降沿计数。")]),a._v(" "),s("ul",[s("li",[a._v("方式2为自动装入计数初值的重复计数器。")])]),a._v(" "),s("h5",{attrs:{id:"方式3-方波发生器-软件或硬件触发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式3-方波发生器-软件或硬件触发"}},[a._v("#")]),a._v(" 方式3—方波发生器(软件或硬件触发)")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/37fb5eb71893b0d4363d92ea8d1740e0ded7d0696570548e3f94339a65f150dc.png",alt:"方式3—方波发生器(软件或硬件触发)"}})]),a._v(" "),s("ul",[s("li",[a._v("方式3与方式2相似，只是OUT输出是一个占空比为1:1的方波；")]),a._v(" "),s("li",[a._v("若计数初值为偶数，则OUT输出是高低电平对称的方波；")]),a._v(" "),s("li",[a._v("若计数初值为奇数，则OUT输出不对称，前面的高比后面的低多1个CLK周期，即近似方波。")]),a._v(" "),s("li",[a._v("方式3与方式2一样也可由硬件触发，即GATE从低变高后启动。")])]),a._v(" "),s("h5",{attrs:{id:"方式4-软件触发选通"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式4-软件触发选通"}},[a._v("#")]),a._v(" 方式4—软件触发选通")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/fe1483f12d2e5c621a9b92a056a13b813fabcf6b9084f09c8a93d39129bdd851.png",alt:"方式4—软件触发选通"}})]),a._v(" "),s("ul",[s("li",[a._v("写入控制字输出变高，写入计数值后的一个CLK下降沿装入初值，然后对每个CLK下降沿计数；")]),a._v(" "),s("li",[a._v("计数到0时输出1个CLK周期宽度的负脉冲；")]),a._v(" "),s("li",[a._v("若计数中重写计数初值，则下一个CLK下降沿被装入，然后按此初值计数；")]),a._v(" "),s("li",[a._v("若计数中GATE变低将停止计数，当其变高时继续计数；")]),a._v(" "),s("li",[a._v("计数初值一次写入只计数一个周期，类似软件触发的方式2的一个周期，但负脉冲的出现会延后一个周期。")])]),a._v(" "),s("h5",{attrs:{id:"方式5-硬件触发选通"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式5-硬件触发选通"}},[a._v("#")]),a._v(" 方式5—硬件触发选通")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/accbf435d0c3cf13e70d2eab971616880334fdf3447da3d464f3dcdf5678d76f.png",alt:"方式5—硬件触发选通"}})]),a._v(" "),s("ul",[s("li",[a._v("写入控制字后，OUT变高；")]),a._v(" "),s("li",[a._v("写入计数值后，当GATE出现上升沿后的一个CLK下降沿装入初值，然后对每个CLK下降沿计数，计数到0时OUT输出一个CLK周期的负脉冲。")]),a._v(" "),s("li",[a._v("在计数中若GATE变低后再变高，将重新启动一次计数周期。")]),a._v(" "),s("li",[a._v("在计数中若写入新计数值，本次计数周期不受影响。")]),a._v(" "),s("li",[a._v("一次GATE触发只计数一个周期，即类似硬件触发的方式2的一个周期，但负脉冲的出现会延后一个周期。")])]),a._v(" "),s("h5",{attrs:{id:"方式比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式比较"}},[a._v("#")]),a._v(" 方式比较")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/1cf44d8287c38ddeaff473dafc7fb1dc483b8b09ca79ce83e15696e8a3f78242.png",alt:"方式 0 与方式 4 的比较（软件控制）"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/6781e42d4900e765e930ef5cb0e8727759f6c3c6d65ce2af52a3b08bcbceae58.png",alt:"方式 1 与方式 5 的比较（硬件触发）"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/96dc459b6ac1791f5e1273b6fb0773a6cde62452ee582e6b47b153efd6053b16.png",alt:"方式 2 与方式 3 的比较（连续波形输出）"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/707e732ca94dba7bee0f31570c33b44a2011815699d5d01d62d567a7197dd8a3.png",alt:"方式 4 与方式 5 的比较（非连续的单脉冲输出）"}})]),a._v(" "),s("h5",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("ul",[s("li",[a._v("8253的六种工作方式中有软件启动和硬件启动：\n"),s("ul",[s("li",[a._v("软件启动：写入控制字及初值后的第一个CLK下降沿装入初值，下一个CLK下降沿开始减1计数。有方式0，2，3，4。")]),a._v(" "),s("li",[a._v("硬件启动：写入控制字及初值后的一个GATE信号上升沿后的第一个CLK下降沿装入初值，下一个CLK下降沿开始计数。有方式1，2，3和5。")]),a._v(" "),s("li",[a._v("其中方式2和方式3既可软件启动，也可硬件启动。")])])]),a._v(" "),s("li",[a._v("8253工作方式分为连续波形和非连续波形输出：\n"),s("ul",[s("li",[a._v("连续波形输出：一次启动后，计数到0时则自动装入初值循环工作。有方式2，3")]),a._v(" "),s("li",[a._v("非连续波形输出：一次启动后，计数到0后则结束。有方式0，1，4，5")])])])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[a._v("方式0—计数结束中断")]),a._v(" "),s("th",{staticStyle:{"text-align":"center"}},[a._v("方式1—可重复触发的单稳态触发器(硬件触发)")]),a._v(" "),s("th",{staticStyle:{"text-align":"center"}},[a._v("方式2—频率发生器(软件或硬件触发)")])])]),a._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"/images/474e1c2a0a6d2a9e2c4d2b01a19ed3b0ff7c822840683a17de8c996d6eea8923.png"}})]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"/images/ce7a3bb46843012d3c284b292afd39619353c25a84fbac23ec16088a268cb34e.png"}})]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"/images/f21c06a9019be19a3fcb586d252826ab6bcc1f90d6667c19d0faac866da6a86b.png"}})])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[a._v("方式3—方波发生器(软件或硬件触发)")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("方式4—软件触发选通")]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[a._v("方式5—硬件触发选通")])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"/images/37fb5eb71893b0d4363d92ea8d1740e0ded7d0696570548e3f94339a65f150dc.png"}})]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"/images/fe1483f12d2e5c621a9b92a056a13b813fabcf6b9084f09c8a93d39129bdd851.png"}})]),a._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"/images/accbf435d0c3cf13e70d2eab971616880334fdf3447da3d464f3dcdf5678d76f.png"}})])])])]),a._v(" "),s("h4",{attrs:{id:"_8253-的初始化编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8253-的初始化编程"}},[a._v("#")]),a._v(" 8253 的初始化编程")]),a._v(" "),s("p",[a._v("下面这段话很重要！")]),a._v(" "),s("p",[a._v("初始化编程的顺序为：")]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("对某一指定计数器，先写入控制字，再写入计数初始值。")])]),a._v(" "),s("li",[s("strong",[a._v("计数初值写入的格式和顺序必须按控制字D5和D4规定的格式写入。")])])]),a._v(" "),s("p",[s("strong",[a._v("注意：所有通道的控制字都写入同一个控制端口，而计数初值则要写入指定计数器对应的端口。")])]),a._v(" "),s("p",[a._v("可以结合下面的例子食用：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/3bd7528842be30ed97afebe4f0d631275bd9e5ddb288beecb2894f5cf32b2c72.png",alt:"例 1"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/8e4827fcc36dd73213b652b6fa74b971e71c1fd365482a7a1c7ee2d37b92c7eb.png",alt:"例 2"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/ded3aed010c78f1c96bd23c11b8dedaccb363c1233bafef183ef29ca305e2796.png",alt:"例 3"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/748d56cc43db130ff89a326a7576d6c442c13446c68bac92c1d04aaa9622f5b9.png",alt:"例 4-1"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/2dac4649fc71476249a1ef7b45a0f9ea5f0db1acb7d41c81fc7faebb33038666.png",alt:"例 4-2"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/446b4449f4ea40dd4116b692de48605816c5b5e9485c7c5f94293f902147d734.png",alt:"例 4-3"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/18cee96eecea92ecf8e52e9b2376530266cb4dfacc2369eb44a5728592ae1fd9.png",alt:"例 4-4"}})]),a._v(" "),s("p",[a._v("更复杂的例子就不一贴出了。")]),a._v(" "),s("h2",{attrs:{id:"考试重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#考试重点"}},[a._v("#")]),a._v(" 考试重点")]),a._v(" "),s("p",[a._v("编一个小的接口应用程序")]),a._v(" "),s("p",[a._v("8253 8255 8259（内容有点多，但考试不会考太难）考工作方式、工作模式，不会设计")]),a._v(" "),s("p",[a._v("8253 定时计数器\n8255 应用题")]),a._v(" "),s("p",[a._v("给一组数，找非零数的个数，15 分，框架 12 分")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("不考的内容（已经老师确认）\n1.第五章存储器系统\n2.第六章8237\n3.第七章8251")]),a._v(" "),s("h2",{attrs:{id:"错题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错题"}},[a._v("#")]),a._v(" 错题")]),a._v(" "),s("h3",{attrs:{id:"三四章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三四章"}},[a._v("#")]),a._v(" 三四章")]),a._v(" "),s("ol",[s("li",[a._v("对段寄存器CS的装入方式有(    234         ).\n(1)使用MOV指令\n(2) 使用段间转移指令\n(3)使用段间子程序调用指令\n(4)使用END伪指令")])]),a._v(" "),s("h3",{attrs:{id:"rcr-填空题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rcr-填空题"}},[a._v("#")]),a._v(" RCR 填空题")]),a._v(" "),s("p",[a._v("1．\t设 (BX)=0C49CH, (CX)=0F002H")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("ROL  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\nXOR  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BH")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CH")]),a._v("\nRCR  "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("BX")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CL")]),a._v("\n")])])]),s("p",[a._v("上述指令序列执行后，(BX)=() ,CF=()")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("一定看清 "),s("code",[a._v("0F")]),a._v(" 开头的，第一位是 "),s("code",[a._v("0")]),a._v(" 还是 "),s("code",[a._v("F")]),a._v("！上面两个都应该是字母开头。")]),a._v(" "),s("p",[a._v("答案是 (BX)="),s("code",[a._v("0B89C")]),a._v(" ,CF="),s("code",[a._v("1")])]),a._v(" "),s("h3",{attrs:{id:"编程题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程题"}},[a._v("#")]),a._v(" 编程题")]),a._v(" "),s("p",[a._v("试编制一完整源程序，将一个字符串（只包含有字母和数字符）中的小写字母转换为大写，数字符转换成其对应的二进制值。各字符转换后的内容仍然存放在原来的单元中。已知A的ASCII码为41H，a的ASCII码为61H。字符串的定义如下：")]),a._v(" "),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA  SEGMENT\n      STRING  DB  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'BTe3F5…….'")]),a._v("\nDATA  ENDS\n")])])]),s("div",{staticClass:"language-nasm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nasm"}},[s("code",[a._v("DATA    SEGMENT\n        STRING  DB  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'BTe3F5…….'")]),a._v("\n        LEN     EQU "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("STRING\nDATA    ENDS\n\nSTACK1  SEGMENG STACK\n        DW  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20H")]),a._v(" DUP(?)\nSTACK1  ENDS\n\nCODE    SEGMENT\n        ASSUME "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CS")]),a._v(":CODE, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SS")]),a._v(":STACK1, "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(":DATA\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("START:")]),a._v("  MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v(", DATA\n        MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("DS")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AX")]),a._v("\n        MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("CX")]),a._v(", LEN\n        LEA "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v(", STRING\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LOP:")]),a._v("    MOV "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v("\n        CMP "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v("\n        JGE LITTLE1\n        CMP "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'9'")]),a._v("\n        JLE NUMBER1\n        JMP NEXT2\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("LITTLE1:")]),a._v("SUB "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'A'")]),a._v("\n        JMP NEXT1\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NUMBER1:")]),a._v("SUB "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'0'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT1:")]),a._v("  MOV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("]")]),a._v(", "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("AL")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token label function"}},[a._v("NEXT:")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("  INC "),s("span",{pre:!0,attrs:{class:"token register variable"}},[a._v("SI")]),a._v("\n        LOOP LOP\n        HLT\nCODE    ENDS\n        END START\n")])])]),s("h3",{attrs:{id:"六七八章-接口部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六七八章-接口部分"}},[a._v("#")]),a._v(" 六七八章 接口部分")]),a._v(" "),s("ol",[s("li",[a._v("8086/8088复位后，初始化执行的物理地址是 "),s("code",[a._v("0FFFF0H")])]),a._v(" "),s("li",[a._v("当中断处理程序准备执行第一条指令时，"),s("code",[a._v("IF=0, TF=0")])]),a._v(" "),s("li",[a._v("8259A中，特殊全嵌套优先级方式一般用于 "),s("code",[a._v("多片8259A中的主片中")])]),a._v(" "),s("li",[a._v("DAC0803工作在 "),s("code",[a._v("两级缓存")]),a._v(" 方式下时，可在转换输出模拟信号的同时可接收下一个数字信号")]),a._v(" "),s("li",[a._v("IRET指令会向8259A发送EOI信息，以结束当前的中断 "),s("code",[a._v("×")])]),a._v(" "),s("li",[a._v("8086/8088中地址引脚与其它信号复用，所以地址信息需要锁存 "),s("code",[a._v("√")])]),a._v(" "),s("li",[a._v("8255A中的端口C置1/0方式使得端口C适合配合端口A、B做控制位使用。"),s("code",[a._v("√")])]),a._v(" "),s("li",[a._v("是否响应软件指令INT引发的中断受IF位的影响。"),s("code",[a._v("×")])]),a._v(" "),s("li",[a._v("CPU和外设之间的数据传送方式有 "),s("code",[a._v("无条件传送")]),a._v("、"),s("code",[a._v("查询方式")]),a._v("、"),s("code",[a._v("中断方式")]),a._v("、"),s("code",[a._v("DMA方式")])]),a._v(" "),s("li",[a._v("硬件中断分为 "),s("code",[a._v("可屏蔽中断")]),a._v("、"),s("code",[a._v("非屏蔽中断")])]),a._v(" "),s("li",[a._v("8259A工作的优先级方式有"),s("code",[a._v("全嵌套")]),a._v("、"),s("code",[a._v("特殊嵌套")]),a._v("、优"),s("code",[a._v("先级自动循环")]),a._v("、"),s("code",[a._v("优先级特殊循环")])])]),a._v(" "),s("h2",{attrs:{id:"后记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[a._v("#")]),a._v(" 后记")]),a._v(" "),s("p",[a._v("最后考试考了很多的原题。选填题全是前四章的内容，简单题是前四章和后三章各一半，最后解答题一个是前四章的，三个是接口部分，其中两个是老师发的练习题的原题/简化。")]),a._v(" "),s("p",[a._v("隔壁网安就乱划重点 + 没有原题。表扬一下汇编。")])])}),[],!1,null,null,null);s.default=r.exports}}]);