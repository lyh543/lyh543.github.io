(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{551:function(t,s,n){"use strict";n.r(s);var a=n(3),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),n("p",[t._v("最近学习了 monorepo 这个东西，发现非常适合我们公司的前端架构，于是跟大家讨论了以后，用周末两天的时间将原来的“每个包一个 repo” 的 multirepo 架构重构成“一个 repo 里放所有包”的 monorepo 架构。目前前端大佬还有一些顾虑，所以还没有马上将开发工作迁移过去，不过我个人在测试 monorepo 的各个包是否正常工作的时候，用着感觉是非常爽的。")]),t._v(" "),n("p",[t._v("当然，改架构是非常麻烦的事情，周末两天我一直在 pnpm 官方文档、GitHub 开源仓库、GitLab CI 手册，还有 Stack Overflow 里来回跳转，大头的时间都花在了调试 CI 上。")]),t._v(" "),n("p",[t._v("另外，multirepo 合并到 monorepo 会比较容易，但是再拆开就会很麻烦了，任何东西都是如此，合的时候至少还可以 ctrl+cv，但是分的时候就得把每个部分盘综错节的地方捋顺，才能一步步拆开。所以，如果想要把旧项目合并为 monorepo，还是需要三思。")]),t._v(" "),n("h2",{attrs:{id:"为什么要换成-pnpm-和-monorepo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要换成-pnpm-和-monorepo"}},[t._v("#")]),t._v(" 为什么要换成 pnpm 和 monorepo")]),t._v(" "),n("p",[t._v("我们小公司目前前端 5 个人，维护了 8 个 npm 库。其中三个是微信小程序，剩下的 5 个都是为三个微信小程序服务，按功能拆分为 UI 组件、API、i18n 等独立成包。在开发 UI 组件库（以及其他包）的时候难免需要微信小程序从本地 link 到这些包，然后在本地边写边预览。")]),t._v(" "),n("p",[t._v("更麻烦的地方在于，React 17 的 Hooks 要求全局只有一个 "),n("code",[t._v("react")]),t._v(" 实例，所以 link 回来 link 过来，所有 link 的包的 react 还需要 link 到同一个，不然就是经典 "),n("a",{attrs:{href:"https://reactjs.org/docs/error-decoder.html?invariant=321",target:"_blank",rel:"noopener noreferrer"}},[t._v("React Error 321"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("而 pnpm 和为处理 monorepo 架构而生的 "),n("a",{attrs:{href:"https://pnpm.io/zh/workspaces",target:"_blank",rel:"noopener noreferrer"}},[t._v("pnpm workspace"),n("OutboundLink")],1),t._v(" 可以完美解决上面这两个问题。在一个 pnpm workspace 中敲下 "),n("code",[t._v("pnpm install")]),t._v("，会发生：")]),t._v(" "),n("ol",[n("li",[t._v("workspace 里的所有包的外部依赖都会被下载到 workspace 的根目录的 "),n("code",[t._v("node_modules")]),t._v(" 下。")]),t._v(" "),n("li",[t._v("所有包的外部依赖都会在包的 "),n("code",[t._v("node_modules")]),t._v(" 下，以软链接的形式 link 到 workspace 的根目录的 "),n("code",[t._v("node_modules")]),t._v(" 下。")]),t._v(" "),n("li",[t._v("workspace 内部的相互依赖，会按照 "),n("code",[t._v("package.json")]),t._v(" 中版本号的写法，完成从 registry 安装（就是步骤 1），或是本地 link。")])]),t._v(" "),n("p",[t._v("总结来说，就是整个 workspace 相同版本的外部依赖只会安装一份；但每个包访问 node_modules 的结果是和非 workspace 模式下的 node_modules 相同的。并且，所有包的 "),n("code",[t._v("react")]),t._v(" 都会指向同一份 "),n("code",[t._v("react")]),t._v("，也就是 workspace 根目录下的那一份。")]),t._v(" "),n("p",[t._v("pnpm 作为 npm 和 yarn 之后的新起之秀，除了上面所说的好处，还有通过硬链接（而非 "),n("code",[t._v("cache")]),t._v("）增加安装速度、节约硬盘空间，解决 npm@3 和 yarn 以来的幽灵依赖问题，无脑推荐大家使用。如果老的项目依赖存在幽灵依赖导致无法正常运行，可以毫不羞耻的在项目 "),n("code",[t._v(".npmrc")]),t._v(" 里写一行 "),n("code",[t._v("shamefully-hoist=true")]),t._v("。")]),t._v(" "),n("p",[t._v("pnpm 我是无脑推荐的，不过对于 monorepo，还是要看业务、看项目规模和项目交叉情况而定。")]),t._v(" "),n("p",[t._v("monospace 的好处还有配置的地方，比如 devDependencies、tsconfig、eslint、prettier、CI 不用 ctrl+cv，开新的包的心智负担也会小很多。")]),t._v(" "),n("p",[t._v("monorepo 最大的坏处是，所有包都在一个 repo 里。如果是一个大体量的团队共用一个 monorepo，一个问题是"),n("strong",[t._v("权限管理")]),t._v("，用 Git 不能阻止一个人读某个文件夹（写权限倒是可以通过 Code Review）。另一个问题是"),n("strong",[t._v("仓库过大")]),t._v("的时候，每个人都要拉取所有包，但可能只会改某几个包的内容。当然，小体量的团队就没有这些问题了。")]),t._v(" "),n("h2",{attrs:{id:"最麻烦的-ci-和-semantic-release"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最麻烦的-ci-和-semantic-release"}},[t._v("#")]),t._v(" 最麻烦的：CI 和 semantic-release")]),t._v(" "),n("p",[t._v("下面就是复盘重构的过程了。这里我没有按照重构步骤的顺序开展，而是选择先讲麻烦的步骤，再讲简单的步骤。重构这件事情，在工具不足的情况下，完全有可能完成了 99% 的部分的时候，发现工具不支持/支持不完善等等原因，不得不放弃重构。所以周末两天里，我的第一天是 all in CI，最后一天也是一直在调试 CI，最后才基本搞定。")]),t._v(" "),n("p",[t._v("我们目前所有包都是使用 "),n("a",{attrs:{href:"https://github.com/semantic-release/semantic-release",target:"_blank",rel:"noopener noreferrer"}},[t._v("semantic-release"),n("OutboundLink")],1),t._v(" 来发布，配置好以后，只需要往 beta 和 main 上发 MR，就可以自动发版了。")]),t._v(" "),n("p",[t._v("如果要切换到 pnpm + monorepo，会发现这两个东西都还没有得到 "),n("code",[t._v("semantic-release")]),t._v(" 的官方支持 2333。")]),t._v(" "),n("p",[t._v("对于 pnpm 来说，semantic-release 需要支持使用 pnpm 发版，或者也可以支持 pnpm 的 "),n("code",[t._v("workspace:")]),t._v(" 协议。在 pnpm workspace 中，如果用这个表示法替换掉 "),n("code",[t._v("package.json")]),t._v(" 里的版本号，"),n("code",[t._v("pnpm i")]),t._v(" 时会自动 link 本地的包。而 "),n("code",[t._v("pnpm publish")]),t._v(" 发版时，打包里的 "),n("code",[t._v("package.json")]),t._v(" 就是替换后的当前 monorepo 里最新的版本号。")]),t._v(" "),n("p",[t._v("而对于 monorepo 来说，"),n("code",[t._v("semantic-release")]),t._v(" 最大的问题是通过在 repo 上打 "),n("code",[t._v("v1.0.0")]),t._v(" 这样的 tag 判断每个包的版本号。而 monorepo 下会有多个包，显然不能继续用这个方法打 tag、根据 tag 判断包的版本。其他还有一些小问题，比如同时发版几个包，相互依赖的包的版本号也需要同时更新。Vue 3 使用的就是 pnpm + monorepo，想参考一下他们怎么发版的，发现是尤大"),n("a",{attrs:{href:"https://github.com/vuejs/core/blob/4a3237ad9300693e465f82a6be3552565a1c4be3/scripts/release.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("手搓的脚本"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("所以我第一天做的事情，就是在本地和 CI 的环境里测了一下目前市面上声称支持 monorepo 的 semantic-release 插件是否由于有支持 pnpm 的 "),n("code",[t._v("workspace:")]),t._v(" 协议。最后发现 "),n("a",{attrs:{href:"https://github.com/dhoulb/multi-semantic-release",target:"_blank",rel:"noopener noreferrer"}},[t._v("dhoulb/multi-semantic-release"),n("OutboundLink")],1),t._v(" 通过发版前手动替换版本，实现了这一点。不过还是有个小 bug，它会将 "),n("code",[t._v("workspace:^")]),t._v(" 也替换为 "),n("code",[t._v("1.5.0")]),t._v(" 这样的单版本号，而不是 "),n("code",[t._v("^1.5.0")]),t._v("。不过我的要求不高，能用就行。")]),t._v(" "),n("p",[t._v("pnpm 相关的 CI 也很好写：")]),t._v(" "),n("ol",[n("li",[t._v("先按"),n("a",{attrs:{href:"https://pnpm.io/zh/continuous-integration",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),n("OutboundLink")],1),t._v(" 配置 pnpm 以及 cache")]),t._v(" "),n("li",[t._v("然后 "),n("code",[t._v("pnpm i")]),t._v(" 安装 workspace 内所有依赖")]),t._v(" "),n("li",[t._v("接着 "),n("code",[t._v("pnpm run -r build")]),t._v("，同时调用所有带 "),n("code",[t._v("build")]),t._v(" 指令的包进行构建。如果想降低任务并发度，可以加 "),n("code",[t._v("--workspace-concurrency=<count>")])]),t._v(" "),n("li",[t._v("最后 "),n("code",[t._v("pnpm run -r test")]),t._v("，同时调用所有带 "),n("code",[t._v("build")]),t._v(" 指令的包进行测试")])]),t._v(" "),n("p",[t._v("总之 CI 调好了，正式迁移的速度会很快。")]),t._v(" "),n("h2",{attrs:{id:"次麻烦的-历史记录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#次麻烦的-历史记录"}},[t._v("#")]),t._v(" 次麻烦的：历史记录")]),t._v(" "),n("p",[t._v("将 8 个 repo 的历史记录合并在一起，也是一件麻烦事。而且，由于 "),n("code",[t._v("multi-semantic-release")]),t._v(" 依靠 tag 判断版本号，所以最好也能保留 tag，并改为 "),n("code",[t._v("multi-semantic-release")]),t._v(" 的 "),n("code",[t._v("package@1.0.0")]),t._v(" 形式。不保留 tag 也是可以的，只要最后手动给分支打上最新版本的 tag，semantic-release 发版的时候就能算出下一个版本号了。")]),t._v(" "),n("p",[t._v("稍微 Google 了一下，就能找到"),n("a",{attrs:{href:"https://stackoverflow.com/a/10548919/12208030",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并 git 历史记录"),n("OutboundLink")],1),t._v("和"),n("a",{attrs:{href:"https://stackoverflow.com/a/5719854/12208030",target:"_blank",rel:"noopener noreferrer"}},[t._v("重命名 tag"),n("OutboundLink")],1),t._v(" 的方法。")]),t._v(" "),n("p",[t._v("麻烦的是，我们有 8 个 repo，迁移每个 repo 的历史记录都要 5 行 git 命令，稍微错一点就会炸掉。")]),t._v(" "),n("p",[t._v("解决办法是，写成脚本，这样就可以反复执行了，出错了重新 clone 下来再跑一遍就行。为了进一步加速，可以先把所有仓库 clone 到一个 "),n("code",[t._v("origin")]),t._v(" 的文件夹，每次重跑脚本就直接复制一份到 "),n("code",[t._v("local")]),t._v(" 文件夹，在这个文件夹里执行迁移代码。")]),t._v(" "),n("p",[t._v("在脚本语言的选择上，我选择了 Python 而不是 shell，Python 我更熟一点，另外 shell 的只有字符串类型、纯字符串拼接着实有点用不惯。最关键的一点，"),n("s",[t._v("我在 Windows 上开发，要用也是 Powershell")])]),t._v(" "),n("p",[t._v("完整代码就不放全了，影响博客观感。")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename_tags")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://stackoverflow.com/a/16251698/12208030")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chdir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LOCAL_DIR "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    tags "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("popen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git tag'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" old "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" tags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        new "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("replace"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'v'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'@bitme/")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("@'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        commit_hash "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("popen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git rev-list -n 1 ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git tag -d ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("old"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git tag ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("new"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("commit_hash"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://stackoverflow.com/a/10548919/12208030")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("migrate_commits")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" branch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chdir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LOCAL_DIR "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git checkout -b ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git pull origin ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("branch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git filter-repo --to-subdirectory-filter ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("subdir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(" --force'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chdir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LOCAL_DIR "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" get_project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git remote add ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("LOCAL_DIR "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git fetch ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(" --tags'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git merge --allow-unrelated-histories ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'git remote remove ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("project_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"剩下的细枝末节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#剩下的细枝末节"}},[t._v("#")]),t._v(" 剩下的细枝末节")]),t._v(" "),n("p",[t._v("剩下的细枝末节，就是调整某些配置了。大概有以下几点：")]),t._v(" "),n("ol",[n("li",[t._v("删掉 npm 创的 "),n("code",[t._v("package-lock.json")]),t._v("，完全迁移到 pnpm")]),t._v(" "),n("li",[t._v("将 "),n("code",[t._v(".gitignore")]),t._v(" "),n("code",[t._v(".prettierrc")]),t._v(", "),n("code",[t._v(".releaserc.json")]),t._v(" "),n("code",[t._v(".npmrc")]),t._v(" 的公共配置提升到 monorepo 根目录")]),t._v(" "),n("li",[t._v("将 devDepencies 提升到 monorepo 根目录（"),n("code",[t._v("@types/*")]),t._v(" 除外，提升了会报错）")]),t._v(" "),n("li",[t._v("在本地测试每个包是否功能正常。如果报错找不到依赖，可能要考虑 "),n("code",[t._v("shamefully-hoist")]),t._v("，或者在报错的包的 "),n("code",[t._v("package.json")]),t._v(" 补一下缺少的依赖，看看能不能救。")])]),t._v(" "),n("p",[t._v("最后的最后就是调 CI 了，GitHub 和 GitLab 都没有太方便的本地测试方法，很多地方就是本地不挂 CI 挂，然后改一个地方又要重跑 CI 测 3 分钟，着实麻烦。不过 CI 这玩意，配好了就是一直用一直爽。")])])}),[],!1,null,null,null);s.default=e.exports}}]);