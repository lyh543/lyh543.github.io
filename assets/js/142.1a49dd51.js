(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{557:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"系列目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系列目录"}},[t._v("#")]),t._v(" 系列目录")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/_posts/java/spring-boot-rest-api-tutorial/1-hello-world/"}},[t._v("搭建 Spring Boot REST API 项目 (1) -- Hello World")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/_posts/java/spring-boot-rest-api-tutorial/2-database-and-test/"}},[t._v("搭建 Spring Boot REST API 项目 (2) -- 数据库和测试")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/_posts/java/spring-boot-rest-api-tutorial/3-request-and-response/"}},[t._v("搭建 Spring Boot REST API 项目 (3) -- 请求和应答")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/_posts/java/spring-boot-rest-api-tutorial/4-validation/"}},[t._v("搭建 Spring Boot REST API 项目 (4) -- 字段校验")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/_posts/java/spring-boot-rest-api-tutorial/5-serialization/"}},[t._v("搭建 Spring Boot REST API 项目 (5) -- 序列化和反序列化")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/_posts/java/spring-boot-rest-api-tutorial/6-authentication-and-security/"}},[t._v("搭建 Spring Boot REST API 项目 (6) -- 认证和安全")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/_posts/java/spring-boot-rest-api-tutorial/7-docs-generator/"}},[t._v("搭建 Spring Boot REST API 项目 (7) -- 自动生成 REST API 文档")])],1)]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("当时入门的时候没找到系统的 Spring Boot 入门教程，干脆自己写了一个。")]),t._v(" "),s("p",[t._v("不过后来发现还是有优质教程的，是自己没怎么找了：")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV19K4y1L7MT",target:"_blank",rel:"noopener noreferrer"}},[t._v("雷丰阳2021版SpringBoot2零基础入门springboot全套完整版（spring boot2）_哔哩哔哩_bilibili"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 参考文档（英文，Chrome 翻译效果还可以）"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"idea-创建项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea-创建项目"}},[t._v("#")]),t._v(" Idea 创建项目")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/e0c5593e4858620f12134b4275d605704671ccbaceabdd1f380b5672df095b64.png",alt:"Spring Initializr"}})]),t._v(" "),s("p",[t._v("是组里要求用 JDK 1.8 的（我也很无奈啊），个人开发可以选择更新版本的 JDK。")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("img",{attrs:{src:"/images/6078b750944990eaa32e491aa1f013b4ec94ffac740dd213e1a438470ae9eb8c.png",alt:"选择依赖"}})]),t._v(" "),s("p",[t._v("如果创建项目、运行以后自动停下来了，可能是没有添加 "),s("code",[t._v("Spring Web")]),t._v(" 依赖。可以在 "),s("code",[t._v("pom.xml")]),t._v(" 手动添加以下依赖：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-web"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h2",{attrs:{id:"application-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#application-yml"}},[t._v("#")]),t._v(" application.yml")]),t._v(" "),s("p",[t._v("因为创建项目的时候写了数据库，所以即使不用数据库，也要给定 "),s("code",[t._v("spring.datasource.url")]),t._v("。")]),t._v(" "),s("p",[t._v("这里使用更易读的 yaml 替代 properties，所以如果 Idea 创建了 "),s("code",[t._v("src/main/resources/application.properties")]),t._v("，需要先删掉，然后创建 "),s("code",[t._v("src/main/resources/application.yaml")]),t._v("，添加以下内容：")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("datasource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" jdbc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("3306/springbootdemo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("useUnicode=true"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&characterEncoding=utf8&autoReconnect=true&useSSL=false&serverTimezone=Asia/Shanghai")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" root\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("driver-class-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" com.mysql.cj.jdbc.Driver\n")])])]),s("h2",{attrs:{id:"hello-world"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[t._v("#")]),t._v(" Hello world!")]),t._v(" "),s("blockquote",[s("p",[t._v("这里不多讲解 Spring Boot 的工作原理，只讲如何创建一个 Spring Boot 应用。工作原理什么的，可以成功部署一个 Spring Boot 应用后再重新学习，这样就不至于因为东西太多，反而弄得头大。")])]),t._v(" "),s("p",[t._v("Idea 还帮我们编写好了 "),s("code",[t._v("com/lyh543/springbootdemo/SpringBootDemoApplication.java")]),t._v("，所以不需要动它，只需要直接编写页面的 Controller。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/main/java/com/lyh543/springbootdemo/web/RootController.java")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GetMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResponseBody")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RestController")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RootController")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("helloWorld")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("启动 Spring Boot：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.0)\n\n2021-06-07 14:42:06.691  INFO 14280 --- [           main] c.l.s.SpringBootDemoApplication          : Starting SpringBootDemoApplication using Java 1.8.0_291 on yanhuiliu-PC0 with PID 14280 (C:\\Users\\yanhuiliu\\Desktop\\test\\spring-boot-demo\\target\\classes started by yanhuiliu in C:\\Users\\yanhuiliu\\Desktop\\test\\spring-boot-demo)\n2021-06-07 14:42:06.693  INFO 14280 --- [           main] c.l.s.SpringBootDemoApplication          : No active profile set, falling back to default profiles: default\n2021-06-07 14:42:07.186  WARN 14280 --- [           main] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.lyh543.springbootdemo]' package. Please check your configuration.\n2021-06-07 14:42:07.403  INFO 14280 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n2021-06-07 14:42:07.409  INFO 14280 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2021-06-07 14:42:07.409  INFO 14280 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.46]\n2021-06-07 14:42:07.466  INFO 14280 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2021-06-07 14:42:07.466  INFO 14280 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 737 ms\n2021-06-07 14:42:07.938  INFO 14280 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n2021-06-07 14:42:07.966  INFO 14280 --- [           main] c.l.s.SpringBootDemoApplication          : Started SpringBootDemoApplication in 1.702 seconds (JVM running for 2.346)\n2021-06-07 14:42:07.968  INFO 14280 --- [           main] o.s.b.a.ApplicationAvailabilityBean      : Application availability state LivenessState changed to CORRECT\n2021-06-07 14:42:07.971  INFO 14280 --- [           main] o.s.b.a.ApplicationAvailabilityBean      : Application availability state ReadinessState changed to ACCEPTING_TRAFFIC\n2021-06-07 14:42:14.037  INFO 14280 --- [nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\n2021-06-07 14:42:14.038  INFO 14280 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\n2021-06-07 14:42:14.039  INFO 14280 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\n")])])]),s("p",[t._v("访问 "),s("code",[t._v("localhost:8080")]),t._v("，看到 "),s("code",[t._v("Hello world!")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"热更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#热更新"}},[t._v("#")]),t._v(" 热更新")]),t._v(" "),s("p",[t._v("热更新需要安装 "),s("code",[t._v("spring-boot-devtools")]),t._v("，不过创建项目的时候已经安装过了：")]),t._v(" "),s("p",[t._v("如果是idea，需要改以下两个地方：")]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("勾选 "),s("code",[t._v("File")]),t._v(" > "),s("code",[t._v("Settings")]),t._v(" > "),s("code",[t._v("Compiler")]),t._v(" > "),s("code",[t._v("Build Project automatically")])]),t._v(" "),s("li",[t._v("勾选 "),s("code",[t._v("ctrl + shift + alt + /")]),t._v(" > "),s("code",[t._v("Registry")]),t._v(" > "),s("code",[t._v("compiler.autoMake.allow.when.app.running")])])])]),t._v(" "),s("p",[t._v("不过还是要写完以后 10s 左右才会热更新，有点慢。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("Stack Overflow 上给出了另外一种解决办法，把 "),s("code",[t._v("Build")]),t._v(" 绑定到 "),s("code",[t._v("Ctrl + S")]),t._v("。每次写完以后 "),s("code",[t._v("Ctrl + S")]),t._v(" 一下就会立即 "),s("code",[t._v("Build")]),t._v("，Spring Boot 检测到变化后就会在 1s 之后热部署。")])])}),[],!1,null,null,null);a.default=e.exports}}]);