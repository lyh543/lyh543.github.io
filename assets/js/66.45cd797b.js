(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{454:function(_,v,e){"use strict";e.r(v);var t=e(3),o=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"string-length-的复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string-length-的复杂度"}},[_._v("#")]),_._v(" "),v("code",[_._v("string.length()")]),_._v(" 的复杂度")]),_._v(" "),v("p",[_._v("在 "),v("code",[_._v("C++ 11")]),_._v(" 以前是未定义，在 "),v("code",[_._v("C++ 11")]),_._v(" 及以后为常数，使用时须注意。")]),_._v(" "),v("h2",{attrs:{id:"字符串字面量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串字面量"}},[_._v("#")]),_._v(" 字符串字面量")]),_._v(" "),v("p",[v("code",[_._v('R "分隔符( 原始字符 )分隔符"')])]),_._v(" "),v("p",[_._v("示例："),v("code",[_._v('R"66(\\njjnb/)66" == "\\\\njjnb/"')])]),_._v(" "),v("p",[_._v("分隔符也可以为空。示例 2："),v("code",[_._v("'R(njjnb)' == '\\\\njjnb/'")])]),_._v(" "),v("p",[_._v("另有 "),v("code",[_._v("L")]),_._v(", "),v("code",[_._v("u8")]),_._v(", "),v("code",[_._v("u")]),_._v(", "),v("code",[_._v("U")]),_._v(" 作为前缀，类似于66L,表示"),v("code",[_._v("长char")]),_._v("、"),v("code",[_._v("UTF-8")]),_._v("、"),v("code",[_._v("UTF-16")]),_._v("、"),v("code",[_._v("UTF-32")]),_._v("字符。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/language/string_literal",target:"_blank",rel:"noopener noreferrer"}},[_._v("string_literal"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"cin-string-的细节"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cin-string-的细节"}},[_._v("#")]),_._v(" cin >> string 的细节")]),_._v(" "),v("p",[_._v("只以空格为分隔符。输入 "),v("code",[_._v("123:123")]),_._v("，str 即为 "),v("code",[_._v("123:123")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"string-和-iostream-的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string-和-iostream-的关系"}},[_._v("#")]),_._v(" string 和 iostream 的关系")]),_._v(" "),v("blockquote",[v("p",[_._v("转载自：https://www.cnblogs.com/Solstice/archive/2011/07/17/2108715.html")])]),_._v(" "),v("p",[v("code",[_._v("iostream")]),_._v(" 可以与 "),v("code",[_._v("string")]),_._v(" 配合得很好。但是有个问题：谁依赖谁？")]),_._v(" "),v("p",[v("code",[_._v("std::string")]),_._v(" 的 "),v("code",[_._v("operator <<")]),_._v(" 和 "),v("code",[_._v("operator >>")]),_._v(" 是如何声明的？"),v("code",[_._v("string")]),_._v(" 头文件在声明这两个 operators 的时候要不要 include "),v("code",[_._v("iostream")]),_._v(" ？")]),_._v(" "),v("p",[v("code",[_._v("iostream")]),_._v(" 和 "),v("code",[_._v("string")]),_._v(" 都可以单独 "),v("code",[_._v("include")]),_._v(" 来使用，显然 "),v("code",[_._v("iostream")]),_._v(" 头文件里不会定义 "),v("code",[_._v("string")]),_._v(" 的 "),v("code",[_._v("<<")]),_._v(" 和 "),v("code",[_._v(">>")]),_._v(" 操作。但是，如果 "),v("code",[_._v("string")]),_._v(" 要include "),v("code",[_._v("iostream")]),_._v("，岂不是让 "),v("code",[_._v("string")]),_._v(" 的用户被迫也用了 "),v("code",[_._v("iostream")]),_._v("？编译 "),v("code",[_._v("iostream")]),_._v(" 头文件可是相当的慢啊（因为 "),v("code",[_._v("iostream")]),_._v(" 是 template，其实现代码都放到了头文件中）。")]),_._v(" "),v("p",[_._v("标准库的解决办法是定义 "),v("code",[_._v("iosfwd")]),_._v(" 头文件，其中包含 "),v("code",[_._v("istream")]),_._v(" 和 "),v("code",[_._v("ostream")]),_._v(" 等的前向声明 (forward declarations)，这样 "),v("code",[_._v("string")]),_._v(" 头文件在定义输入输出操作符时就可以不必包含 "),v("code",[_._v("iostream")]),_._v("，只需要包含简短得多的 "),v("code",[_._v("iosfwd")]),_._v("。我们自己写程序也可借此学习如何支持可选的功能。")]),_._v(" "),v("p",[_._v("值得注意的是，"),v("code",[_._v("istream::getline()")]),_._v(" 成员函数的参数类型是 "),v("code",[_._v("char*")]),_._v("，因为 "),v("code",[_._v("istream")]),_._v(" 没有包含 "),v("code",[_._v("string")]),_._v("，而我们常用的 "),v("code",[_._v("std::getline()")]),_._v(" 函数是个 non-member function，定义在 "),v("code",[_._v("string")]),_._v(" 里边。")]),_._v(" "),v("p",[_._v("我注：这也解释了，"),v("code",[_._v("cin")]),_._v(" 的所有成员函数都不支持 "),v("code",[_._v("string")]),_._v("，只能只用非成员函数 "),v("code",[_._v("getline")]),_._v("（在 "),v("code",[_._v("string")]),_._v(" 中） 或 "),v("code",[_._v("operator >>")]),_._v("（在 "),v("code",[_._v("xstring")]),_._v(" 中）。")])])}),[],!1,null,null,null);v.default=o.exports}}]);