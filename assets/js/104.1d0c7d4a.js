(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{461:function(t,a,e){"use strict";e.r(a);var s=e(3),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"常用链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用链接"}},[t._v("#")]),t._v(" 常用链接")]),t._v(" "),e("p",[t._v("常用命令可查表："),e("a",{attrs:{href:"/blob/git/git-cheatsheet.pdf"}},[t._v("Git-CheatSheet")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1),t._v(" 也是很好的学习的手段。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://help.github.com/cn/github/getting-started-with-github/github-glossary",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub 词汇表"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://github.github.com/training-kit/downloads/zh_CN/github-git-cheat-sheet/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub 备忘清单"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("本博客参考链接：https://www.liaoxuefeng.com/wiki/896043488029600")])]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("先说一个概念：Git 是目前最流行的"),e("strong",[t._v("版本管理系统")]),t._v("，学会 Git 几乎成了开发者的必备技能。")]),t._v(" "),e("p",[t._v("如果你看不懂这句话，你可以从字面意思理解“版本管理系统”：多个开发者在同一个软件的基础上，开发了不同的版本，他们可以通过 Git 方便、严谨的实现上传、下载、比对、合并代码间的冲突等操作。")]),t._v(" "),e("p",[t._v("而我们最常用的把代码放到 GitHub（或其他 Git 服务器）上的操作，可以把远程服务器也看做一个开发者（虽然他什么也不会修改），我们每次开发完以后，就会将代码上传给他。")]),t._v(" "),e("h2",{attrs:{id:"git-入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-入门"}},[t._v("#")]),t._v(" Git 入门")]),t._v(" "),e("h3",{attrs:{id:"在本地-git-新建仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在本地-git-新建仓库"}},[t._v("#")]),t._v(" 在本地 Git 新建仓库")]),t._v(" "),e("p",[t._v("入门，首先就是新建一个仓库了。对于这第一个概念，"),e("code",[t._v("仓库")]),t._v("，可以从字面理解为存代码的仓库，往往将一个项目的完整代码放在一个仓库。")]),t._v(" "),e("p",[t._v("有两种方法：一是在本地新建一个 Git 仓库，另一种是在 GitHub 上新建库，然后下载到本地。")]),t._v(" "),e("p",[t._v("如果你打算将代码放到 GitHub 上，这里推荐第二种方法。因为在 GitHub 新建了库以后，可能会有一些初始文件、初始设置，可能和本地不同。如果使用使问题更复杂，在初学阶段，可以先跳过这些麻烦的东西。")]),t._v(" "),e("p",[t._v("首先假设你已经在 GitHub 网站上建立了库（或者你想把别人的库下载到本机），链接为 "),e("code",[t._v("https://github.com/lyh543/lyh543.github.io/")]),t._v("。现在想要在当前文件夹中，新建 "),e("code",[t._v("lyh543.github.io")]),t._v(" 文件夹，并将仓库下载到本地：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/lyh543/lyh543.github.io/\n")])])]),e("p",[t._v("本地就多了一个文件夹 "),e("code",[t._v("lyh543.github.io")]),t._v("，内容和网站上的一致。")]),t._v(" "),e("p",[t._v("你也可以使用不同于 "),e("code",[t._v("HTTPS")]),t._v(" 协议的 "),e("code",[t._v("SSH")]),t._v(" 协议（如果你明白这是什么），将上面 clone 的 "),e("code",[t._v("HTTPS")]),t._v(" 链接修改为 "),e("code",[t._v("SSH")]),t._v(" 链接即可。")]),t._v(" "),e("p",[t._v("顺便提一下，在本地新建仓库的方法如下：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" lyh543.github.io\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" lyh543.github.io\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),e("h3",{attrs:{id:"git-上传三连"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-上传三连"}},[t._v("#")]),t._v(" Git 上传三连")]),t._v(" "),e("p",[t._v("在建立好库以后，每次写完代码，就可以按照下面的"),e("a",{attrs:{href:"#git-%E4%B8%8A%E4%BC%A0%E4%B8%89%E8%BF%9E"}},[t._v("上传三连")]),t._v("了。如果该项目只有你的一台设备进行开发（即不会出现不同步的情况），在 99% 的情况，你只会用到以下三条语句。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果本地、服务器端不一致，需要先 git pull，将服务器的内容拉取下来")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --all "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 单文件是 git add <file>")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git status # 这句可以看到到底 add 了哪些东西")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"upload 2 files."')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用文字说明这一次更新了什么东西，推荐写")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),e("p",[t._v("上传完以后，你就可以看到 GitHub 上的代码已经更新。")]),t._v(" "),e("h4",{attrs:{id:"一键三连"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一键三连"}},[t._v("#")]),t._v(" 一键三连")]),t._v(" "),e("p",[t._v("在很熟悉三连操作以后，就会感到有点麻烦了。于是用 "),e("code",[t._v("alias")]),t._v(" 实现了一个命令缩写。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("commit")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git_commit() { git add --all && git commit -m \"$1\" && git push;}; git_commit'")]),t._v("`\n")])])]),e("p",[t._v("但是因为 "),e("code",[t._v("alias")]),t._v(" 不是开机自启的，要想开机自启，可以看 "),e("RouterLink",{attrs:{to:"/notes/linux/linux-tips.html#alias-简化命令"}},[t._v("另一篇博客")]),t._v("，此略。")],1),t._v(" "),e("h2",{attrs:{id:"git-使用-ssh-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-使用-ssh-协议"}},[t._v("#")]),t._v(" Git 使用 SSH 协议")]),t._v(" "),e("p",[t._v("Git for Linux 如果操作 HTTPS 协议链接的仓库，是不能保存密码的，每次 push 都需要输入账号密码，很烦。（Git for Windows 貌似可以走网页认证，好像可以保存）")]),t._v(" "),e("p",[t._v("一个选择是 ssh 协议，使用这个协议可以保存用户信息，很方便。\n第二个方案是走 https，不过让 Git 明文保存密码（不推荐）")]),t._v(" "),e("p",[t._v("多 ssh 秘钥部署可以看链接：https://www.awaimai.com/2200.html")]),t._v(" "),e("h3",{attrs:{id:"在-linux-下-git-使用-ssh-密钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-linux-下-git-使用-ssh-密钥"}},[t._v("#")]),t._v(" 在 Linux 下 Git 使用 ssh 密钥")]),t._v(" "),e("p",[t._v("大概分为三步走：")]),t._v(" "),e("ol",[e("li",[t._v("本地生成密钥对；")]),t._v(" "),e("li",[t._v("设置 GitHub 上的公钥；")]),t._v(" "),e("li",[t._v("修改 Git 的 remote url 为 "),e("code",[t._v("SSH")]),t._v(" 协议。")])]),t._v(" "),e("h4",{attrs:{id:"linux-下本地生成密钥对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-下本地生成密钥对"}},[t._v("#")]),t._v(" Linux 下本地生成密钥对")]),t._v(" "),e("p",[e("code",[t._v('$ ssh-keygen -t rsa -C "lyh543@github.com"')])]),t._v(" "),e("p",[t._v("passphrase 可留空"),e("s",[t._v("因为太懒，不然以后每次 push 都要输这个 passphrase")])]),t._v(" "),e("p",[e("code",[t._v("The key fingerprint is: SHA256:QtXXXXXXXXXXXXXXXXXXXXXXXXXXXXlk lyh543@github.com")])]),t._v(" "),e("h4",{attrs:{id:"设置-github-上的公钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置-github-上的公钥"}},[t._v("#")]),t._v(" 设置 github 上的公钥")]),t._v(" "),e("ol",[e("li",[t._v("查看你的公钥")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXmp lyh543@github.com\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("登陆你的"),e("code",[t._v("github")]),t._v("帐户。然后 "),e("code",[t._v("Account Settings")]),t._v(" -> 左栏点击 "),e("code",[t._v("SSH Keys")]),t._v(" -> 点击 "),e("code",[t._v("Add SSH key")])]),t._v(" "),e("li",[t._v("然后你复制上面的公钥内容，粘贴进“Key”文本域内。 "),e("code",[t._v("title")]),t._v("域，你随便填一个都行。")]),t._v(" "),e("li",[t._v("完了，点击 "),e("code",[t._v("Add key")]),t._v("。")]),t._v(" "),e("li",[t._v("测试一下这个key。")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" -T git@github.com\nThe authenticity of "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'github.com (52.74.223.119)'")]),t._v(" can"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t be established.\nRSA key fingerprint is SHA256:nTXXXXXXXXXXXXXXXXXXXXXXX8.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '")]),t._v("github.com,52.74.223.119"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' (RSA) to the list of known hosts.\nHi lyh543! You'")]),t._v("ve successfully authenticated, but GitHub does not provide shell access.\n")])])]),e("p",[t._v("看到最后一句就是OK了。")]),t._v(" "),e("h4",{attrs:{id:"修改-git-的-remote-url-从-https-改为-ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改-git-的-remote-url-从-https-改为-ssh"}},[t._v("#")]),t._v(" 修改 Git 的 remote url 从 "),e("code",[t._v("https")]),t._v(" 改为 "),e("code",[t._v("ssh")])]),t._v(" "),e("p",[t._v("查看当前（git仓库下的）的remote url")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 需要到仓库根目录下\n$ git remote -v\norigin  https://github.com/lyh543/lyh543.github.io.git (fetch)\norigin  https://github.com/lyh543/lyh543.github.io.git (push)\n")])])]),e("p",[t._v("修改 remote url")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote set-url origin git@github.com:lyh543/lyh543.github.io.git\n")])])]),e("h3",{attrs:{id:"题外话-把-ssh-密钥给服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题外话-把-ssh-密钥给服务器"}},[t._v("#")]),t._v(" 题外话：把 ssh 密钥给服务器")]),t._v(" "),e("p",[t._v("使用 ssh 远程登录服务器的时候，每次都要输入密钥。其实也可以使用 ssh 密钥进行登录。而且甚至没有 git 这么麻烦，还要去官网上加入公钥。")]),t._v(" "),e("p",[t._v("直接一句：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ssh-keygen\nssh-copy-id -i ~/.ssh/id_rsa.pub  root@192.168.x.xxx -p22\n")])])]),e("p",[t._v("即可。")]),t._v(" "),e("h3",{attrs:{id:"windows-下-git-使用-ssh-密钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows-下-git-使用-ssh-密钥"}},[t._v("#")]),t._v(" Windows 下 git 使用 ssh 密钥")]),t._v(" "),e("p",[t._v("Windows 下也可以生成 ssh 密钥对，但是需要使用第三方软件：PuTTYgen，在 Tortoise Git 中自带。由于方法不同，可以在 Windows 和 Linux 使用不同的 ssh Key。")]),t._v(" "),e("ol",[e("li",[t._v("本地生成密钥对；")]),t._v(" "),e("li",[t._v("设置github上的公钥；")]),t._v(" "),e("li",[t._v("设置本地git使用的密钥。")])]),t._v(" "),e("h4",{attrs:{id:"windows-下本地生成密钥对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows-下本地生成密钥对"}},[t._v("#")]),t._v(" Windows 下本地生成密钥对")]),t._v(" "),e("p",[t._v("进入软件，点"),e("code",[t._v("Generate")]),t._v("，然后就开始生成。由于生成时的随机数据是采集鼠标指针的移动，因此务必在生成过程中移动鼠标。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/PuTTYgen_1.jpg",alt:"PuTTYgen_1"}})]),t._v(" "),e("p",[t._v("大约1分钟以后，生成完成，如图2。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/PuTTYgen_2.jpg",alt:"PuTTYgen_2"}})]),t._v(" "),e("p",[t._v("然后 "),e("code",[t._v("Save Private Key")]),t._v(" 把密钥文件存下来。"),e("br"),t._v("\n文本框中的内容是公钥，按照"),e("a",{attrs:{href:"#%E8%AE%BE%E7%BD%AEgithub%E4%B8%8A%E7%9A%84%E5%85%AC%E9%92%A5"}},[t._v("上面的方法")]),t._v("设置github上的密钥。")]),t._v(" "),e("h4",{attrs:{id:"设置本地-git-使用的密钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置本地-git-使用的密钥"}},[t._v("#")]),t._v(" 设置本地 git 使用的密钥")]),t._v(" "),e("p",[t._v("由于笔者使用 Tortoise Git，在一个 reporisitory 中 push 的时候选中"),e("code",[t._v("自动加载 PuTTY密钥")]),t._v("即可。")]),t._v(" "),e("p",[t._v("命令行 Git 另有实现方法。")]),t._v(" "),e("h3",{attrs:{id:"linux-git-保存密码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-git-保存密码"}},[t._v("#")]),t._v(" (Linux) Git 保存密码")]),t._v(" "),e("blockquote",[e("p",[t._v("参考博客：https://blog.csdn.net/xx326664162/article/details/49686241"),e("br"),t._v("\nhttps://www.crifan.com/git_remember_record_user_and_password_no_need_input_again/")])]),t._v(" "),e("p",[t._v("Git的凭据存储有 cache、store、manager 三种方式。可以通过")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global credential.helper store\n")])])]),e("p",[t._v("切换。")]),t._v(" "),e("p",[t._v("其中，如果使用 "),e("code",[t._v("store")]),t._v("，密码将被会明文保存在 "),e("code",[t._v("~/.git-credentials")]),t._v("。感觉不大好。")]),t._v(" "),e("p",[t._v("如果使用 "),e("code",[t._v("cache")]),t._v(" 密码会在内存中保存一段时间。密码永远不会被存储在磁盘中，并且默认在15分钟后从内存中清除。不过时间是可以修改的。")]),t._v(" "),e("p",[t._v("于是，就有人想到把这个时间设置为一个月 "),e("code",[t._v("2592000")]),t._v(" 。")]),t._v(" "),e("p",[t._v("注销以后密码也会被清除，毕竟是存在内存里的。不过每次开机输一次密码也能接受。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global credential.helper cache\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config credential.helper "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cache --timeout=1000000000'")]),t._v("\n")])])]),e("p",[t._v("还有一种在 "),e("code",[t._v("remote.url")]),t._v(" 中加入自己的用户名和密码，更危险，就不表了。")]),t._v(" "),e("h2",{attrs:{id:"git-代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-代理"}},[t._v("#")]),t._v(" Git 代理")]),t._v(" "),e("p",[t._v("经常会有挂上代理，浏览器访问 Github 快到飞起的，但是 Git Clone 却慢死的经历。awsl。")]),t._v(" "),e("p",[t._v("以下方法收集自知乎的同一问题："),e("a",{attrs:{href:"https://www.zhihu.com/question/27159393/answer/141047266",target:"_blank",rel:"noopener noreferrer"}},[t._v("git clone一个github上的仓库，太慢，经常连接失败，但是github官网流畅访问，为什么？"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"shadowsocks-对-github-进行-https-代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shadowsocks-对-github-进行-https-代理"}},[t._v("#")]),t._v(" Shadowsocks 对 Github 进行 HTTPS 代理")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global http.https://github.com.proxy socks5://127.0.0.1:1080\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global https.https://github.com.proxy socks5://127.0.0.1:1080\n")])])]),e("p",[t._v("也要注意 "),e("code",[t._v("1080")]),t._v(" 是 Shadowsocks 代理的端口，可能需要根据自己的代理配置进行修改。"),e("br"),t._v("\n另外使用该方法以后，需要用 HTTPS 协议（而不是 SSH）进行传输。")]),t._v(" "),e("h3",{attrs:{id:"ssh-代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssh-代理"}},[t._v("#")]),t._v(" ssh 代理")]),t._v(" "),e("h4",{attrs:{id:"linux-wsl-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-wsl-1"}},[t._v("#")]),t._v(" Linux/WSL 1")]),t._v(" "),e("blockquote",[e("p",[t._v("参考："),e("a",{attrs:{href:"https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1",target:"_blank",rel:"noopener noreferrer"}},[t._v("macOS 给 Git(Github) 设置代理（HTTP/SSH）"),e("OutboundLink")],1),t._v("的方法。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Host github.com\n  # 走 HTTP 代理\n  # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080\n  # 走 socks5 代理\n  # ProxyCommand nc -v -x 127.0.0.1:1080 %h %p\n")])])]),e("h4",{attrs:{id:"wsl-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wsl-2"}},[t._v("#")]),t._v(" WSL 2")]),t._v(" "),e("p",[t._v("注意如果是 wsl 2，因为 wsl 2 实际上是一个 Hyper-V 虚拟机，因此 Windows 上的代理如果想要被 Linux 使用，上面填 ip 的地方应该填 Windows 在 wsl 网络下的 ip（命令行输入 "),e("code",[t._v("ipconfig")]),t._v("，看到 "),e("code",[t._v("以太网适配器 vEthernet (WSL)")]),t._v(" 的就是）。另外还需要代理软件“允许局域网的连接”。")]),t._v(" "),e("p",[t._v("而且目前 wsl 2 由于是由 Hyper-V 实现的，每次重启 windows，windows 和 wsl 的 ip 都会变，目前没有方法改为静态 ip，只能每次改 ip 了。（")]),t._v(" "),e("h4",{attrs:{id:"windows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[t._v("#")]),t._v(" Windows")]),t._v(" "),e("blockquote",[e("p",[t._v("参考："),e("a",{attrs:{href:"https://www.zhihu.com/question/27159393/answer/809693236",target:"_blank",rel:"noopener noreferrer"}},[t._v("git clone一个github上的仓库，太慢，经常连接失败，但是github官网流畅访问，为什么？ - 戈登走過去的回答 - 知乎"),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Host github.com\n  # 走 HTTP 代理\n  # ProxyCommand "C:\\Program Files\\Git\\mingw64\\bin\\connect.exe" -H 127.0.0.1:1080 %h %p\n  # 走 socks5 代理\n  # ProxyCommand "C:\\Program Files\\Git\\mingw64\\bin\\connect.exe" -S 127.0.0.1:1080 %h %p\n')])])]),e("p",[t._v("不过注意，如果你的 OpenSSH 是通过 "),e("code",[t._v("Windows 10 设置")]),t._v(" - "),e("code",[t._v("应用与功能")]),t._v(" - "),e("code",[t._v("可选功能")]),t._v(" 安装的，此法可能会使 Windows 下 "),e("code",[t._v("ssh")]),t._v(" 出现如下错误：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("C:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Tools"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Git"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("ssh -T git@github.com\nCreateProcessW failed error:87\nposix_spawn: Unknown error\n")])])]),e("p",[t._v("这个 bug 不影响 Git 的使用，并且可以通过卸载后从此处安装解决：https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH")]),t._v(" "),e("p",[t._v("bug 相关可参见：https://github.com/microsoft/vscode-remote-release/issues/1887")]),t._v(" "),e("h3",{attrs:{id:"改-hosts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#改-hosts"}},[t._v("#")]),t._v(" 改 hosts")]),t._v(" "),e("p",[t._v("还有一个方法是修改 Hosts 文件。对于没有代理的开发者，会有一点帮助（都是开发者了为什么还没有代理）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("151.101.72.249 github.http://global.ssl.fastly.net\n192.30.253.112 github.com\n")])])]),e("h2",{attrs:{id:"git-基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-基础"}},[t._v("#")]),t._v(" Git 基础")]),t._v(" "),e("p",[t._v("对于刚入门 Git 的萌新，"),e("code",[t._v("clone")]),t._v(" "),e("code",[t._v("pull")]),t._v(" "),e("code",[t._v("add")]),t._v(" "),e("code",[t._v("commit")]),t._v(" "),e("code",[t._v("push")]),t._v(" 已经够用了。然而，如果要发挥 Git 全部的功能，还需要了解更多的东西。")]),t._v(" "),e("h3",{attrs:{id:"回溯版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回溯版本"}},[t._v("#")]),t._v(" 回溯版本")]),t._v(" "),e("h4",{attrs:{id:"git-status-diff-checkout-查看当前状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-status-diff-checkout-查看当前状态"}},[t._v("#")]),t._v(" git status/diff/checkout 查看当前状态")]),t._v(" "),e("blockquote",[e("p",[t._v("学习链接：https://www.liaoxuefeng.com/wiki/896043488029600/896954074659008#0")])]),t._v(" "),e("p",[t._v("下面只是对上述博客的一些简短的笔记。")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("git status")]),t._v(" 可查看目前 Git 的状态（什么文件被修改过之类的……）")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("git diff readme.txt")]),t._v(" 可查看 "),e("code",[t._v("readme.txt")]),t._v(" 的还没有被 commit 的修改。")]),t._v(" "),e("p",[t._v("对于只是修改了 "),e("code",[t._v("readme.txt")]),t._v(" 文件，还没有进行任何 Git 操作的，可以 "),e("code",[t._v("git checkout -- readme.txt")]),t._v(" 恢复为之前 "),e("code",[t._v("add")]),t._v(" 过的文件。")]),t._v(" "),e("p",[t._v("更多的情况可看"),e("a",{attrs:{href:"https://www.cnblogs.com/liuq/p/9203087.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 之 恢复修改的文件"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"git-log-reflog-reset-版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-log-reflog-reset-版本回退"}},[t._v("#")]),t._v(" git log/reflog/reset 版本回退")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("git log")]),t._v(" 可查看当前分支的"),e("strong",[t._v("所有")]),t._v(" commit 日志。\n可搭配 "),e("code",[t._v("--pretty=oneline")]),t._v(" 简略显示。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log --pretty=oneline\na4a32854a37319561d16f1618cd9c20e0b3290bf (HEAD -> master, origin/master) append GPL\nf4d84ec5d20e8be8f7ef70802b1ba6e654986197 add distributed\nd5fd90e99d8a1d91a34d7aef9e615d122d2a2904 new readme.txt\n65a146ab6bc8b27dbaaed4d0c200d7d0ee8b6b65 add Hello world\n")])])]),e("p",[t._v("前面的一串是 SHA1 值。")]),t._v(" "),e("p",[t._v("回退到上一个版本："),e("code",[t._v("git reset --hard HEAD^")]),e("br"),t._v("\n回退到上两个版本："),e("code",[t._v("git reset --hard HEAD^^")]),t._v(" 或 "),e("code",[t._v("HEAD~2")]),e("br"),t._v("\n回退/前进到指定版本："),e("code",[t._v("git reset --hard a4a3")]),t._v("（到 "),e("code",[t._v("append GPL")]),t._v(" 版本）")]),t._v(" "),e("p",[t._v("如果回退以后想再前进，却忘了 SHA1 值，可以使用 "),e("code",[t._v("git reflog")]),t._v("。")]),t._v(" "),e("p",[t._v("注意至少要写四位，否则会报错：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reset --hard 65a\nfatal: ambiguous argument '65a': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]'\n")])])]),e("h4",{attrs:{id:"相关概念浅析-工作区、暂存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关概念浅析-工作区、暂存区"}},[t._v("#")]),t._v(" 相关概念浅析：工作区、暂存区")]),t._v(" "),e("ul",[e("li",[t._v("工作区 "),e("code",[t._v("working tree")]),t._v("：（对于 test 项目）test 文件夹（"),e("code",[t._v("tree")]),t._v(" 翻译成目录比较好）")]),t._v(" "),e("li",[t._v("版本库 "),e("code",[t._v("Repository")]),t._v("："),e("code",[t._v("test/.git")]),t._v(" 文件夹")]),t._v(" "),e("li",[t._v("暂存区 "),e("code",[t._v("stage/index")]),t._v("：在版本库中（Git 文档中凡是出现 "),e("code",[t._v("stage")]),t._v(" 和 "),e("code",[t._v("index")]),t._v(" 都是暂存区的意思）")]),t._v(" "),e("li",[e("code",[t._v("master")]),t._v("：第一个分支，也在版本库中")]),t._v(" "),e("li",[e("code",[t._v("HEAD")]),t._v("：指向 "),e("code",[t._v("master")]),t._v(" 的指针")])]),t._v(" "),e("p",[t._v("其逻辑关系如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("test 文件夹\n │\n ├─工作区 working tree\n │\n └─版本库 .git 文件夹\n     │\n     ├─ 暂存区\n     │\n     ├─ master 分支\n     │\n     └─ 其他分支\n")])])]),e("ul",[e("li",[e("code",[t._v("git add")]),t._v("：将文件修改添加进暂存区")]),t._v(" "),e("li",[e("code",[t._v("git commit")]),t._v("：将暂存区的东西 commit 到当前分支。（在这之后用 "),e("code",[t._v("git status")]),t._v(" 会显示 "),e("code",[t._v("working tree clean")]),t._v("）")])]),t._v(" "),e("h4",{attrs:{id:"git-diff-checkout-reset-笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-diff-checkout-reset-笔记"}},[t._v("#")]),t._v(" git diff/checkout/reset 笔记")]),t._v(" "),e("p",[t._v("diff 只能比较两份文件，如果是操作中是新建文件/删除文件，"),e("code",[t._v("git diff")]),t._v(" 会提示“没有差异”。")]),t._v(" "),e("p",[t._v("各 diff 的区别：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git diff")]),t._v("：显示工作区和暂存区的差异（即未 add 的内容）")]),t._v(" "),e("li",[e("code",[t._v("git diff --cached")]),t._v("：显示暂存区和 "),e("code",[t._v("HEAD")]),t._v(" 的差异（即未 commit 的内容）")]),t._v(" "),e("li",[e("code",[t._v("git diff HEAD")]),t._v("：显示工作区和 "),e("code",[t._v("HEAD")]),t._v(" 的差异（即未 add 或 commit 的内容）")])]),t._v(" "),e("p",[t._v("在命令后可加文件名，指定比对某文件。")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git checkout -- <file>")]),t._v(" 可以认为是反向 add，是将暂存区的文档修改覆盖工作区的文档；")]),t._v(" "),e("ul",[e("li",[t._v("使用不带参数的 "),e("code",[t._v("git checkout")]),t._v(" 可以查看工作区和暂存区的文件差异。")]),t._v(" "),e("li",[e("code",[t._v("--")]),t._v(" 表示这条命令要无视 "),e("code",[t._v("--")]),t._v(" 后的所有参数（实战中貌似也是可以去掉的）")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git reset HEAD <file>")]),t._v(" 可以认为是反向 commit，是用当前分支的文档覆盖暂存区。（并不会覆盖工作区）")]),t._v(" "),e("ul",[e("li",[t._v("加上 "),e("code",[t._v("--hard")]),t._v(" 参数，"),e("code",[t._v("git reset --hard HEAD <file>")]),t._v(" 就会覆盖工作区了")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/git-checkout-reset-diff.jpg",alt:"Git checkout/reset/diff 对比"}})]),t._v(" "),e("h4",{attrs:{id:"远程库操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程库操作"}},[t._v("#")]),t._v(" 远程库操作")]),t._v(" "),e("p",[t._v("在本地 "),e("code",[t._v("git init")]),t._v(" 了一个库以后，如果需要上传到远程库，就需要设置远程库的地址（地址可以在 GitHub 网页上获取）：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin git@github.com:lyh543/test.git\n")])])]),e("p",[t._v("Git 规定，要给每一台远程主机命名。这里的 "),e("code",[t._v("origin")]),t._v(" 就是 Git 给远程库的默认名字。虽然可以用别的名字，但是推荐 "),e("code",[t._v("origin")]),t._v("。")]),t._v(" "),e("p",[t._v("然后，进行 push：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push -u origin master\n")])])]),e("p",[t._v("push 命令将本地的当前分支上传到 origin 的 master 分支（简写 origin/master）。"),e("br"),t._v(" "),e("code",[t._v("-u")]),t._v("（或 "),e("code",[t._v("--set-upstream")]),t._v("）参数，还顺便将本地的 master 分支和 origin/master 分支进行关联（track），以后就不用指定。")]),t._v(" "),e("h3",{attrs:{id:"branch-分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#branch-分支管理"}},[t._v("#")]),t._v(" branch 分支管理")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552#0",target:"_blank",rel:"noopener noreferrer"}},[t._v("学习链接"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/branch-management.png",alt:"分支管理"}})]),t._v(" "),e("p",[t._v("其他版本控制系统如 SVN 等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。")]),t._v(" "),e("p",[t._v("但 Git 的分支 "),e("code",[t._v("branch")]),t._v(" 是与众不同的，无论创建、切换和删除分支，Git 在 1 秒钟之内就能完成！无论你的版本库是 1 个文件还是 1 万个文件。")]),t._v(" "),e("h4",{attrs:{id:"创建和合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建和合并分支"}},[t._v("#")]),t._v(" 创建和合并分支")]),t._v(" "),e("h5",{attrs:{id:"相关概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),e("p",[t._v("复习一下，"),e("code",[t._v("master")]),t._v(" 是 Git 默认创建的分支，"),e("code",[t._v("HEAD")]),t._v(" 是指向 "),e("code",[t._v("master")]),t._v(" 的一个指针。")]),t._v(" "),e("p",[t._v("其实，分支，是一条 commit 线。")]),t._v(" "),e("p",[t._v("也就是说，Git 中的每一个状态，其实指的是每一次 commit，而分支就是将 commit 串起来了（然后 "),e("code",[t._v("HEAD")]),t._v(" 又指向了当前分支的头）。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/branch.png",alt:"分支"}})]),t._v(" "),e("p",[t._v("所以创建分支的本质就是添加一条线，更改一下 "),e("code",[t._v("HEAD")]),t._v("，很快的。而删除分支，就是删一条线（并不删除 commit），也很快。")]),t._v(" "),e("h5",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[t._v("新建 "),e("code",[t._v("dev")]),t._v(" 分支并切换到该分支：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch dev   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从当前分支新建 dev 分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到 dev 分支")]),t._v("\n")])])]),e("p",[t._v("上述两个过程也可以用一行替代：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b dev\n")])])]),e("p",[t._v("实现的效果如图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/branch-1.png",alt:"新建 dev 分支并切换到该分支"}})]),t._v(" "),e("p",[t._v("顺便一提， "),e("code",[t._v("git checkout")]),t._v(" 的确是有两个功能，一是切换分支，二是将暂存区的某文件修改覆盖工作区的对应文件，不过二需要使用 "),e("code",[t._v("git branch --")]),t._v("。")]),t._v(" "),e("p",[t._v("这之后，就可以在 "),e("code",[t._v("dev")]),t._v(" 分支上修改，然后三连了。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"We are working on a new branch"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" readme.txt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.txt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit on dev branch"')]),t._v("\n")])])]),e("p",[t._v("这之后，我们的仓库状态如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/branch-2.png",alt:"在 dev 上三连后的仓库"}})]),t._v(" "),e("p",[t._v("接下来，将 "),e("code",[t._v("dev")]),t._v(" 上的 commit merge 进 "),e("code",[t._v("master")]),t._v("。")]),t._v(" "),e("p",[t._v("由上图可以看到，直接将 "),e("code",[t._v("master")]),t._v(" 分支线延长至 "),e("code",[t._v("dev")]),t._v(" 即可，所以 Git 能够轻松完成 merge 操作。")]),t._v(" "),e("p",[t._v("这种 merge 又叫 "),e("code",[t._v("fast-forward merge")]),t._v("：")]),t._v(" "),e("blockquote",[e("p",[t._v("A fast-forward merge can occur when there is a linear path from the current branch tip to the target branch."),e("br"),t._v("\nInstead of “actually” merging the branches, all Git has to do to integrate the histories is move (i.e., “fast forward”) the current branch tip up to the target branch tip. -- "),e("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/using-branches/git-merge",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Merge | Atlassian Git Tutorial"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This is the default behavior. -- "),e("code",[t._v("git merge --help")])])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从 dev 切回 master 分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 dev 分支的内容合并到当前分支")]),t._v("\n")])])]),e("p",[t._v("提一句，merge 本质也是一次 commit，其也可以使用 "),e("code",[t._v("-m <msg>")]),t._v(" 来设定 commit 信息，而不是在弹出的文本编辑器中。")]),t._v(" "),e("p",[t._v("最后删除 dev 分支：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d dev "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除已经完成合并的 dev 分支")]),t._v("\n")])])]),e("h4",{attrs:{id:"no-fast-forward-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#no-fast-forward-merge"}},[t._v("#")]),t._v(" no-fast-forward merge")]),t._v(" "),e("p",[t._v("fast-forward merge 的好处是相当快，并且 commit 线简洁，但是简洁的坏处就是丢失了一些信息。")]),t._v(" "),e("p",[t._v("在这种模式下，删除分支后，会丢掉分支信息。")]),t._v(" "),e("p",[e("code",[t._v("git merge")]),t._v(" 默认使用 fast-forward 模式。如果要强制禁用 fast-forward 模式，Git就会在 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息。")]),t._v(" "),e("p",[t._v("使用方法很简单，就是在 "),e("code",[t._v("git merge")]),t._v(" 时增加一个参数：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git merge --no-ff dev\n")])])]),e("blockquote",[e("p",[t._v("2020.8.26 更新：在团队合作时，将自己写的代码 "),e("code",[t._v("merge")]),t._v(" 到合作的分支（如 "),e("code",[t._v("master")]),t._v(" 或 "),e("code",[t._v("dev")]),t._v("）上时，推荐使用 "),e("code",[t._v("--no-ff")]),t._v("，这样 commit 线上会出现分叉，不同人的 commit 会更加明显。")])]),t._v(" "),e("h4",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),e("p",[t._v("有三种情况：在本地删除某分支；在远端删除某分支（即将本地删除分支的操作 push 到远端）；在本地删除远端分支（即远端的已经被其他小伙伴删除，需要删除之前拉取到本地的远端分支）。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在本地删除分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d lyh543\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 origin 远端删除分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -d origin lyh543\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or 'git push origin :lyh543'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# see: https://stackoverflow.com/questions/7303687/why-git-use-the-colon-branch-to-delete-remote-branch")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在本地删除远端的分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -dr origin/lyh543\n")])])]),e("h4",{attrs:{id:"解决冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),e("p",[t._v("上面的分支图都是很简单的(linear)，如果复杂一点，比如两个分支都有自己的提交，"),e("code",[t._v("git merge")]),t._v(" 就不能进行 "),e("code",[t._v("fast-forward merge")]),t._v(" 了。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/branch-3.png",alt:"两个分支都有新的提交"}})]),t._v(" "),e("p",[t._v("对于简单的情况（两个分支只有文件增添，没有文件修改的冲突），Git 仍然可以实现自动合并，如：")]),t._v(" "),e("ul",[e("li",[t._v("在 "),e("code",[t._v("feature1")]),t._v(" 删除了 a.txt")]),t._v(" "),e("li",[t._v("在 "),e("code",[t._v("master")]),t._v(" 新增了 b.txt")])]),t._v(" "),e("p",[t._v("将 "),e("code",[t._v("feature1")]),t._v(" 合并进 "),e("code",[t._v("master")]),t._v(" 后，"),e("code",[t._v("master")]),t._v(" 分支会呈现删除 a.txt，新增 b.txt 的状态。")]),t._v(" "),e("p",[t._v("但是，也会有复杂的情况。如两个分支的某文件内容不同：")]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("master")]),t._v(" 分支的 "),e("code",[t._v("branch.txt")]),t._v(" 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("branch:\nmaster\n")])])]),e("p",[t._v("在 "),e("code",[t._v("dev")]),t._v(" 分支的 "),e("code",[t._v("branch.txt")]),t._v(" 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("branch:\ndev\n")])])]),e("p",[t._v("在 "),e("code",[t._v("master")]),t._v(" 分支下进行 "),e("code",[t._v("git merge dev")]),t._v(" 会报失败：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git merge dev\nAuto-merging branch.txt\nCONFLICT (content): Merge conflict in branch.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n")])])]),e("p",[t._v("这时查看 "),e("code",[t._v("branch.txt")]),t._v("，会是这样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("branch:\n<<<<<<< HEAD\nmaster\n=======\ndev\n>>>>>>> dev\n")])])]),e("p",[t._v("上面标注了两个版本的区别。")]),t._v(" "),e("p",[t._v("现在我们有两个方案：一是放弃合并操作；二是进行合并。")]),t._v(" "),e("p",[t._v("如果想放弃合并操作，只需一句 "),e("code",[t._v("git merge --abort")]),t._v("，就可以回到 "),e("code",[t._v("git merge dev")]),t._v(" 之前的状态（一切都没发生过.jpg）；")]),t._v(" "),e("p",[t._v("如果想进行合并，只需要在当前状态下，修改 "),e("code",[t._v("branch.txt")]),t._v(" 到想要的样子，然后 add 和 commit：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" branch.txt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fix merge confict"')]),t._v("\n")])])]),e("p",[t._v("就完成了 merge 和解决冲突。如何验证呢？可以用带图的 "),e("code",[t._v("git log")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log --graph --pretty=oneline\n")])])]),e("h4",{attrs:{id:"分支管理策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略"}},[t._v("#")]),t._v(" 分支管理策略")]),t._v(" "),e("p",[t._v("在实际开发中，我们应该按照几个基本原则进行分支管理：")]),t._v(" "),e("p",[t._v("首先，"),e("code",[t._v("master")]),t._v(" 分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；")]),t._v(" "),e("p",[t._v("那在哪干活呢？干活都在 "),e("code",[t._v("dev")]),t._v(" 分支上，也就是说，"),e("code",[t._v("dev")]),t._v(" 分支是不稳定的，到某个时候，比如 1.0 版本发布时，再把 "),e("code",[t._v("dev")]),t._v(" 分支合并到 "),e("code",[t._v("master")]),t._v(" 上，在 "),e("code",[t._v("master")]),t._v(" 分支发布 1.0 版本；")]),t._v(" "),e("p",[t._v("你和你的小伙伴们每个人都在 "),e("code",[t._v("dev")]),t._v(" 分支上干活，每个人都有自己的分支，时不时地往 "),e("code",[t._v("dev")]),t._v("分支上合并就可以了（向 "),e("code",[t._v("dev")]),t._v(" 合并自己的代码的时候推荐 "),e("code",[t._v("--no-ff")]),t._v("，从 "),e("code",[t._v("dev")]),t._v(" 分支将小伙伴的代码合并到自己的代码时推荐默认的 "),e("code",[t._v("--ff")]),t._v("）。")]),t._v(" "),e("p",[t._v("所以，团队合作的分支看起来就像这样：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blob/git/branch-4.png",alt:"团队合作的分支"}})]),t._v(" "),e("p",[t._v("而对于一个小 bug 或者一个 issue-101，也可以通过开一个 "),e("code",[t._v("issue-101")]),t._v(" 临时分支，写完、merge 以后，再将临时分支删掉。")]),t._v(" "),e("h4",{attrs:{id:"git-stash-工作区暂存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-工作区暂存"}},[t._v("#")]),t._v(" git stash 工作区暂存")]),t._v(" "),e("p",[t._v("在当前分支的修改还有没 commit 的情况下，切换到其他分支后，这些修改会依然存在。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("git checkout [<branch>]")]),e("br"),t._v("\nTo prepare for working on <branch>, switch to it by updating the index and the files in the working tree, and by pointing HEAD at the branch. "),e("strong",[t._v("Local modifications to the files in the working tree are kept")]),t._v(", so that they can be committed to the <branch>.\n-- "),e("a",{attrs:{href:"https://git-scm.com/docs/git-checkout#Documentation/git-checkout.txt-emgitcheckoutemltbranchgt",target:"_blank",rel:"noopener noreferrer"}},[t._v("git checkout"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("如果我们既不想 commit（当前工作还没做完），也不想将当前分支的修改带到别的分支里，应该怎么做呢？")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n")])])]),e("p",[t._v("使用这句命令，我们就可以把工作区的修改暂存起来，然后让工作区呈现修改前的状态。这之后，使用 "),e("code",[t._v("git status")]),t._v(" 会显示 "),e("code",[t._v("working tree clean")]),t._v("。")]),t._v(" "),e("p",[t._v("然后我们就可以用 "),e("code",[t._v("git checkout")]),t._v(" 切换分支，在别的分支进行工作了。")]),t._v(" "),e("p",[t._v("在别的分支工作完，并切回该分区以后，如何找回来呢？")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出当前的 stash")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将最近的 stash 找回")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将最近的 stash 删除")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将最近的 stash 找回并删除")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop stash@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 还可以指定 stash")]),t._v("\n")])])]),e("h3",{attrs:{id:"remote-远端管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remote-远端管理"}},[t._v("#")]),t._v(" remote 远端管理")]),t._v(" "),e("p",[t._v("这一节的内容其实和分支管理有一些交集，毕竟远端管理其本质也是在管理远端的分支。")]),t._v(" "),e("h4",{attrs:{id:"git-remote-查看远程库的信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-remote-查看远程库的信息"}},[t._v("#")]),t._v(" git remote 查看远程库的信息")]),t._v(" "),e("p",[t._v("查看远程库的信息：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\norigin\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 详细信息")]),t._v("\norigin  git@github.com:lyh543/test.git "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin  git@github.com:lyh543/test.git "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("上面显示了可以抓取 fetch 和推送 push 的 origin 的地址。如果没有推送权限，就看不到 push 的地址。")]),t._v(" "),e("h4",{attrs:{id:"git-push-推送分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-push-推送分支"}},[t._v("#")]),t._v(" git push 推送分支")]),t._v(" "),e("p",[t._v("推送分支，就是把该分支上的所有本地提交推送到远程库。")]),t._v(" "),e("p",[t._v("推送时，要指定本地分支，这样，Git 就会把该分支推送到远程库对应的远程分支上：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),e("p",[t._v("如果要推送其他分支，比如 "),e("code",[t._v("dev")]),t._v("，就改成：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin dev\n")])])]),e("p",[t._v("但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("master")]),t._v(" 分支是主分支，因此要时刻与远程同步；")]),t._v(" "),e("li",[e("code",[t._v("dev")]),t._v(" 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；")]),t._v(" "),e("li",[e("code",[t._v("bug")]),t._v(" 分支只用于在本地修复 bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个 bug；")]),t._v(" "),e("li",[e("code",[t._v("feature")]),t._v(" 分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。")])]),t._v(" "),e("p",[t._v("总之，就是在 Git 中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！")]),t._v(" "),e("h4",{attrs:{id:"git-fetch-从远端拉取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-fetch-从远端拉取"}},[t._v("#")]),t._v(" git fetch 从远端拉取")]),t._v(" "),e("p",[e("code",[t._v("git clone")]),t._v(" 只会获取远程的 "),e("code",[t._v("master")]),t._v(" 分支，如果要获取 "),e("code",[t._v("dev")]),t._v(" 分支，我们应该从 "),e("code",[t._v("origin/dev")]),t._v(" 新建 "),e("code",[t._v("dev")]),t._v(" 分支：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价于 git checkout -b dev origin/dev，见下")]),t._v("\n")])])]),e("blockquote",[e("p",[e("code",[t._v("git checkout [<branch>]")]),t._v("\nIf "),e("code",[t._v("<branch>")]),t._v(" is not found but there does exist a tracking branch in exactly one remote (call it "),e("code",[t._v("<remote>")]),t._v(") with a matching name and --no-guess is not specified, treat as equivalent to\n"),e("code",[t._v("$ git checkout -b <branch> --track <remote>/<branch>")]),t._v("\n-- "),e("a",{attrs:{href:"https://git-scm.com/docs/git-checkout#Documentation/git-checkout.txt-emgitcheckoutemltbranchgt",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-checkout Documentation - Git"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("这也太贴心了吧~ 那就不用记麻烦的了。")]),t._v(" "),e("p",[t._v("然后就可以愉快的在 "),e("code",[t._v("dev")]),t._v(" 分支上进行修改了。")]),t._v(" "),e("p",[t._v("如果远端的内容更新了（比如你的小伙伴向远端 commit 了），但本地还没有更新，可以使用")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 两句的等价形式")]),t._v("\n")])])]),e("p",[t._v("来进行拉取（fetch）。")]),t._v(" "),e("p",[t._v("如果 merge 或 pull 中有冲突，需要按照 "),e("a",{attrs:{href:"#%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81"}},[t._v("解决冲突")]),t._v(" 的套路来合并冲突。")]),t._v(" "),e("h4",{attrs:{id:"git-rebase-变基"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-变基"}},[t._v("#")]),t._v(" git rebase 变基")]),t._v(" "),e("p",[e("code",[t._v("git rebase")]),t._v(" 通过修改 commit 的顺序使得某些情况下的分支图更简洁。")]),t._v(" "),e("p",[t._v("比如以下场景：")]),t._v(" "),e("p",[t._v("小伙伴 A 和 B 在合作开发同一个项目。")]),t._v(" "),e("ul",[e("li",[t._v("小伙伴 A 添加了 "),e("code",[t._v("a.txt")]),t._v("，并进行了 commit  和 push；")]),t._v(" "),e("li",[t._v("小伙伴 B 在没有 fetch 的情况下添加了 "),e("code",[t._v("b.txt")]),t._v("，并进行了 commit 和 push。当然，这里 push 会失败，提示需要 fetch。")]),t._v(" "),e("li",[t._v("小伙伴 B fetch 并 merge，完成了 merge 的过程，可以进行 pull 了。但是……")])]),t._v(" "),e("p",[t._v("此时的 "),e("code",[t._v("git log --graph --pretty=oneline")]),t._v(" 出现了分叉！")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log --graph --pretty=oneline\n*   d2232e76aad5009a86a66399b0d4a1e3feb9e6ef (HEAD -> master) Merge branch 'master' of github.com:lyh543/test\n|\\\n| * 98946ab30bbaf2fbc60531450731a8e840bdf62a (origin/master, origin/HEAD) add a.txt\n* | 2eb60148822f268aa3510304fa409c1bdd2ec9b4 add b.txt\n|/\n*   591c9b045b7b84e75710fa96b1f77cb92ee82a85 remove dev.txt\n")])])]),e("p",[t._v("这也没什么问题。"),e("br"),t._v("\n但是，从理论上，这个分叉完全可以避免：只要 B 能在 commit 前进行 fetch 就可以少一次 merge 了。")]),t._v(" "),e("p",[t._v("于是，这时 B 拍出了 "),e("code",[t._v("git rebase")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: add b.txt\n")])])]),e("p",[t._v("（这里的 rebase 过程比较简单，如果 A B 对同一文件进行了修改，rebase 过程会稍微复杂，但同样能达到效果）")]),t._v(" "),e("p",[t._v("之后，工作区和暂存区都没有什么变化，但是 "),e("code",[t._v("git log --graph --pretty=oneline")]),t._v(" 发生变化了：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log --graph --pretty=oneline\n* 3b3769ddfea3f6ddc0a36e3d5784bd676386030e (HEAD -> master) add b.txt\n* 98946ab30bbaf2fbc60531450731a8e840bdf62a (origin/master, origin/HEAD) add a.txt\n* 591c9b045b7b84e75710fa96b1f77cb92ee82a85 remove dev.txt\n")])])]),e("p",[t._v("分支线的分叉消失了！")]),t._v(" "),e("p",[t._v("也就是说，"),e("code",[t._v("git rebase")]),t._v(" 能通过修改 commit 顺序，使得分支线简单，但是会减少一个 merge 的 commit。")]),t._v(" "),e("p",[t._v("接下来就可以 push 了。")]),t._v(" "),e("h3",{attrs:{id:"tag-标签管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag-标签管理"}},[t._v("#")]),t._v(" tag 标签管理")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE",target:"_blank",rel:"noopener noreferrer"}},[t._v("学习链接"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("Git 可以给历史中的某一个提交打上标签，以示重要。\n比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。")])]),t._v(" "),e("p",[t._v("标签也是一个指针，指向 commit 的。")]),t._v(" "),e("p",[t._v("标签有 轻量标签 "),e("code",[t._v("lightweight")]),t._v(" 和 附注标签 "),e("code",[t._v("annotated")]),t._v("。")]),t._v(" "),e("blockquote",[e("p",[t._v("一个轻量标签很像一个不会改变的分支——它只是一个特定提交的引用。\n然而，附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。 通常建议创建附注标签，这样你可以拥有以上所有信息；但是如果你只是想用一个临时的标签，或者因为某些原因不想要保存那些信息，轻量标签也是可用的。")])]),t._v(" "),e("p",[t._v("添加轻量标签：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag v1.0      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为 HEAD 添加 v1.0 的标签")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag v1.0 366e "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为 commit 366e 添加 v1.0 的标签")]),t._v("\n")])])]),e("p",[t._v("添加附注标签，加一个 "),e("code",[t._v("-a")]),t._v(" 开关就可以。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git tag -a v1.4 -m "my version 1.4"\n')])])]),e("p",[t._v("列出已有标签："),e("code",[t._v("git tag")])]),t._v(" "),e("p",[t._v("查看标签对应的 commit："),e("code",[t._v("git show v1.0")])]),t._v(" "),e("p",[t._v("注意，标签默认不会被 push 至远程服务器（clone 和 fetch 时是会获得的）。")]),t._v(" "),e("p",[t._v("需要显式地 push 标签："),e("code",[t._v("git push origin v1.0")]),e("br"),t._v("\n或 push 时带上 "),e("code",[t._v("--tags")]),t._v("："),e("code",[t._v("git push origin --tags")])]),t._v(" "),e("p",[t._v("删除标签可以使用 "),e("code",[t._v("git tag -d v1.0")]),t._v("。")]),t._v(" "),e("p",[t._v("但是，将删除标签推送至远端就有点复杂了： "),e("code",[t._v("git push origin :refs/tags/v1.0")]),t._v("。")]),t._v(" "),e("p",[t._v("查看标签所指的文件版本： "),e("code",[t._v("git checkout v1.0")])]),t._v(" "),e("p",[t._v("注意这之后会进入 "),e("code",[t._v("detached HEAD")]),t._v(" 的状态，不再有 "),e("code",[t._v("HEAD")]),t._v(" 的概念。"),e("br"),t._v("\n在这个状态下会进行 commit 有一定副作用（具体见手册），推荐新开一个 branch 来进行操作。")]),t._v(" "),e("h3",{attrs:{id:"看完了"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#看完了"}},[t._v("#")]),t._v(" 看完了？")]),t._v(" "),e("p",[t._v("如果看完了，推荐去看看 "),e("a",{attrs:{href:"http://git-scm.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-scm.com"),e("OutboundLink")],1),t._v(" 的教程和手册，这里有官方对命令的解释，你对命令和概念的理解会更加精确。如 "),e("a",{attrs:{href:"https://git-scm.com/docs/git-checkout",target:"_blank",rel:"noopener noreferrer"}},[t._v("git checkout"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"git-小技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-小技巧"}},[t._v("#")]),t._v(" Git 小技巧")]),t._v(" "),e("h3",{attrs:{id:"git-rm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rm"}},[t._v("#")]),t._v(" git rm")]),t._v(" "),e("p",[t._v("以下三种命令等价，都是从工作区删除并提交到暂存区")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("rm readme.txt")]),t._v(" "),e("code",[t._v("git add readme.txt")])]),t._v(" "),e("li",[e("code",[t._v("rm readme.txt")]),t._v(" "),e("code",[t._v("git rm readme.txt")])]),t._v(" "),e("li",[e("code",[t._v("git rm readme.txt")])])]),t._v(" "),e("p",[t._v("而从工作区删除，但是想恢复，只能在使用 "),e("code",[t._v("rm readme.txt")]),t._v(" 的前提下 "),e("code",[t._v("git checkout -- readme.txt")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"amend-修改上次-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#amend-修改上次-commit"}},[t._v("#")]),t._v(" --amend 修改上次 commit")]),t._v(" "),e("p",[t._v("可以使用 "),e("code",[t._v('git commit --amend -m "xxx"')]),t._v(" 以修改上次的 commit。")]),t._v(" "),e("p",[t._v("如果已经 push 了，下次就需要 "),e("code",[t._v("git push -f")]),t._v(" 强制推送。如果还没有 "),e("code",[t._v("push")]),t._v("，就相当于之前的 commit 没发生过，直接 "),e("code",[t._v("git push")]),t._v(" 就行。")]),t._v(" "),e("h3",{attrs:{id:"git-修改设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-修改设置"}},[t._v("#")]),t._v(" git 修改设置")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--local"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" --list "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看设置；--local 用于本地库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --local remote.origin.url git@github.com:lyh543/lyh543.github.io.git "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改设置，项和名用空格间隔")]),t._v("\n")])])]),e("h3",{attrs:{id:"git-修改远端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-修改远端"}},[t._v("#")]),t._v(" git 修改远端")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有远端")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url origin git@github.com:lyh543/lyh543.github.io.git "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改远端")]),t._v("\n")])])]),e("p",[t._v("更多的命令，可以随便敲一个不存在的命令，如 "),e("code",[t._v("git remote hhh")]),t._v(" 来查看所有命令。")]),t._v(" "),e("h3",{attrs:{id:"当你在-branch-外-commit-后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#当你在-branch-外-commit-后"}},[t._v("#")]),t._v(" 当你在 branch 外 commit 后")]),t._v(" "),e("p",[t._v("如果你在 branch 外 commit，然后立即切回 branch，你的 commit 就会掉。")]),t._v(" "),e("p",[t._v("有两个解决方案：")]),t._v(" "),e("ol",[e("li",[t._v("将 commit 的内容变为一个新的 branch，然后在原来的 branch 中 merge 新的 branch；")]),t._v(" "),e("li",[t._v("用下面的 cherry-pick 命令在 branch 中把对应的 commit 捡回来。")])]),t._v(" "),e("h4",{attrs:{id:"cherry-pick-捡-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick-捡-commit"}},[t._v("#")]),t._v(" cherry-pick 捡 commit")]),t._v(" "),e("p",[e("code",[t._v("git cherry-pick")]),t._v(" 是一个“捡” commit 的命令。可以把任意（非当前 branch 的） "),e("code",[t._v("commit")]),t._v(" 拉到本 branch 来。")]),t._v(" "),e("p",[t._v("非当前 branch 的 "),e("code",[t._v("commit")]),t._v(" 可以通过 "),e("code",[t._v("git reflog")]),t._v(" 查看。")]),t._v(" "),e("h2",{attrs:{id:"git-大文件版本管理-git-lfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-大文件版本管理-git-lfs"}},[t._v("#")]),t._v(" Git 大文件版本管理：git-lfs")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://git-lfs.github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-lfs 官网"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://help.github.com/cn/github/managing-large-files/versioning-large-files",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub 中文帮助页面"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Git LFS 是 Github 开发的一个 Git 的扩展，他能够处理 Git 仓库里的大文件（如图片、视频等等），其原理是将 Git 仓库中的大文件替换为一个指针，然后将大文件存在另一个服务器上。这样做的好处有：")]),t._v(" "),e("ul",[e("li",[t._v("可让您存储最大 2 GB 的文件")]),t._v(" "),e("li",[t._v("使得 Git 仓库的容量更大")]),t._v(" "),e("li",[t._v("更快的 Cloning 和 Fetching（大概用的服务器更快）")]),t._v(" "),e("li",[t._v("操作和工作流等和原来完全一样")])]),t._v(" "),e("p",[t._v("以上是官方的，个人感觉可能还会使得每次更新大文件时，他不会再保存在 "),e("code",[t._v(".git")]),t._v(" 文件夹，占取大量硬盘空间了。")]),t._v(" "),e("h3",{attrs:{id:"git-lfs-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-lfs-安装"}},[t._v("#")]),t._v(" git-lfs 安装")]),t._v(" "),e("p",[t._v("Windows 上官网就行。Ubuntu 下：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" git-lfs\n")])])]),e("h3",{attrs:{id:"git-lfs-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-lfs-配置"}},[t._v("#")]),t._v(" git-lfs 配置")]),t._v(" "),e("p",[t._v("对于每个仓库下，第一次需要配置一下（如需要用 git-lfs 管理 psd 和 mp4 文件）")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" lfs "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" lfs track "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.psd"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" lfs track "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.mp4"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" .gitattributes\n")])])]),e("p",[t._v("以后就和常规 "),e("a",{attrs:{href:"#git-%E4%B8%8A%E4%BC%A0%E4%B8%89%E8%BF%9E"}},[t._v("git 上传三连")]),t._v(" 相同了。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" file.psd\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Add design file"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),e("h2",{attrs:{id:"github-使用技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-使用技巧"}},[t._v("#")]),t._v(" GitHub 使用技巧")]),t._v(" "),e("h3",{attrs:{id:"下载最新的-release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载最新的-release"}},[t._v("#")]),t._v(" 下载最新的 release")]),t._v(" "),e("p",[t._v("阅读他人的教程博客时，经常会看到给出 GitHub Release 的某版本的下载链接（下面第一行），但该版本可能已经过时。实际上，GitHub 提供了能重定向到最新版的链接（下面第二行）：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/canton7/SyncTrayzor/releases/download/v1.1.24/SyncTrayzorSetup-x64.exe\nhttps://github.com/canton7/SyncTrayzor/releases/latest/download/SyncTrayzorSetup-x64.exe\n")])])]),e("p",[t._v("在写下这篇博客时，第二行链接能正确地被重定向到第一行：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -I https://github.com/canton7/SyncTrayzor/releases/latest/download/SyncTrayzorSetup-x64.exe\nHTTP/1.1 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("302")]),t._v(" Found\ndate: Wed, 07 Oct "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(":22:26 GMT\ncontent-type: text/html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf-8\nserver: GitHub.com\nstatus: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("302")]),t._v(" Found\nvary: X-PJAX, Accept-Encoding, Accept, X-Requested-With, Accept-Encoding\nlocation: https://github.com/canton7/SyncTrayzor/releases/download/v1.1.24/SyncTrayzorSetup-x64.exe\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);