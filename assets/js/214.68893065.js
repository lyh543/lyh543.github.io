(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{573:function(s,t,e){"use strict";e.r(t);var a=e(3),n=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("blockquote",[t("p",[s._v("本文转载自 "),t("a",{attrs:{href:"https://github.com/halfa",target:"_blank",rel:"noopener noreferrer"}},[s._v("halfa"),t("OutboundLink")],1),s._v(" 的博文 "),t("a",{attrs:{href:"https://mricher.fr/post/boot-from-an-efi-shell/#fnref:1",target:"_blank",rel:"noopener noreferrer"}},[s._v("Boot from an EFI Shell"),t("OutboundLink")],1),s._v("，并进行了翻译。")])]),s._v(" "),t("p",[s._v("今天启动 PVE 集群上的几个虚拟机的时候，出现了下图的报错。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/boot-error.png",alt:"启动错误"}})]),s._v(" "),t("p",[s._v("报错是 "),t("code",[s._v('BdsDxe: failed to load Boot0001 "UEFI QEMU QEMU HARDDISK" from PciRoot(0x0/Pci(0x1E,0x0)/Pci(0x1,0x0)/Pci(0x5,0x0)/Scsi(0x0,0x0): Not Found.')]),s._v("。")]),s._v(" "),t("p",[s._v("引导失败以后，虚拟机尝试通过 PXE 引导，也失败了，最终回到了 EFI shell：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/uefi-init.png",alt:"image"}})]),s._v(" "),t("p",[s._v("这台虚拟机原本应该从 "),t("code",[s._v("VirtIO SCSI")]),s._v(" Controller 引导。图上报错看起来是因为 PCI 总线或者一个（虚拟）存储卡变化*，导致存储在 EFI NVRAM（也就是存储 UEFI 配置的地方）的引导入口（boot entry）指向了不存在的设备，所以引导失败了。")]),s._v(" "),t("p",[s._v("* 估计是它之前用的另一个虚拟控制器被我不小心重命名为了 "),t("code",[s._v("VirtIO")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"解决方案-临时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-临时"}},[s._v("#")]),s._v(" 解决方案（临时）")]),s._v(" "),t("blockquote",[t("p",[s._v("下面是手动引导 EFI 文件的办法。想要修改 EFI 配置，你可以参考 "),t("a",{attrs:{href:"#efi-shell-cheat-sheet"}},[s._v("EFI shell Cheat-sheet")]),s._v("。")])]),s._v(" "),t("p",[s._v("EFI shell 和大部分 shell 一样，可以通过 "),t("code",[s._v("shift")]),s._v(" + "),t("code",[s._v("pageUp")]),s._v(" / "),t("code",[s._v("pageDown")]),s._v(" 来滚动屏幕。可以使用 "),t("code",[s._v("exit")]),s._v(" 命令回到 EFI 管理界面，或者 "),t("code",[s._v("reboot")]),s._v(" 命令重启。")]),s._v(" "),t("p",[s._v("下面的 shell 交互演示了如何加载硬盘、手动引导：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("Shell"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("FS0:\nFS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nDirectory of: FS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n09/22/2019 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(":43 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("DIR"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4,096")]),s._v(" EFI\n04/15/2020 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(":51       "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10,668")]),s._v(" NvVars\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" File"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10,668")]),s._v(" bytes\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" Dir"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nFS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" EFI\nFS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("EFI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" debian\nFS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("EFI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("debian"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" grub64.efi\n")])])]),t("h2",{attrs:{id:"efi-shell-cheat-sheet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#efi-shell-cheat-sheet"}},[s._v("#")]),s._v(" EFI shell Cheat-sheet")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("map")]),s._v(" 命令输出分区和设备的映射表（类似于 "),t("code",[s._v("lsblk")]),s._v("）。"),t("code",[s._v("vol <VOL-NAME>")]),s._v(" 会输出更多信息。")]),s._v(" "),t("li",[s._v("输出引导选项列表：")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("FS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bcfg boot dump -b\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nOption: 06. Variable: Boot0004\n  Desc    - UEFI QEMU HARDDISK QM00001\n  DevPath - PciRoot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("/Pci"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x1,0x1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("/Ata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  Optional- Y\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),t("ul",[t("li",[s._v("移动某个引导选项位置（同时顺移其它引导选项）")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将选项 6 移动到选项 0 的位置（也就是第 1 位），同时顺移其它选项")]),s._v("\nFS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bcfg boot "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("ul",[t("li",[s._v("移除引导选项")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("FS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bcfg boot "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n")])])]),t("ul",[t("li",[s._v("添加引导选项")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("FS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bcfg boot "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" FS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("EFI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("GRUB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("grubx64.efi "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GRUB"')]),s._v("\nTarget "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0007.\nbcfg: Add Boot0007 as "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("ul",[t("li",[t("code",[s._v("help")]),s._v(" 命令的完整输出如下：")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("FS0:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" help.txt\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v("         - Displays, creates, or deletes UEFI Shell aliases.\nattrib        - Displays or modifies the attributes of files or directories.\nbcfg          - Manages the boot and driver options that are stored "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" NVRAM.\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v("            - Displays or changes the current directory.\ncls           - Clears the console output and optionally changes the background and foreground color.\ncomp          - Compares the contents of two files on a byte-for-byte basis.\nconnect       - Binds a driver to a specific device and starts the driver.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v("            - Copies one or "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" files or directories to another location.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v("          - Displays and sets the current "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" the system.\ndblk          - Displays one or "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" blocks from a block device.\ndevices       - Displays the list of devices managed by UEFI drivers.\ndevtree       - Displays the UEFI Driver Model compliant device tree.\ndh            - Displays the device handles "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the UEFI environment.\ndisconnect    - Disconnects one or "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" drivers from the specified devices.\ndmem          - Displays the contents of system or device memory.\ndmpstore      - Manages all UEFI variables.\ndrivers       - Displays the UEFI driver list.\ndrvcfg        - Invokes the driver configuration.\ndrvdiag       - Invokes the Driver Diagnostics Protocol.\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("          - Controls script "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" echoing or displays a message.\nedit          - Provides a full "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("screen")]),s._v(" text editor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" ASCII or UCS-2 files.\neficompress   - Compresses a "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" using UEFI Compression Algorithm.\nefidecompress - Decompresses a "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" using UEFI Decompression Algorithm.\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("          - Identifies the code executed when "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'if'")]),s._v(" is FALSE.\nendfor        - Ends a "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'for'")]),s._v(" loop.\nendif         - Ends the block of a script controlled by an "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'if'")]),s._v(" statement.\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("          - Exits the UEFI Shell or the current script.\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v("           - Starts a loop based on "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'for'")]),s._v(" syntax.\ngetmtc        - Gets the MTC from BootServices and displays it.\ngoto          - Moves around the point of execution "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" a script.\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v("          - Displays the UEFI Shell "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" list or verbose "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" help.\nhexedit       - Provides a full "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("screen")]),s._v(" hex editor "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" files, block devices, or memory.\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("            - Executes commands "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" specified conditions.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ifconfig")]),s._v("      - Modifies the default IP address of the UEFI IPv4 Network Stack.\nifconfig6     - Displays or modifies IPv6 configuration "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" network interface.\nload          - Loads a UEFI driver into memory.\nloadpcirom    - Loads a PCI Option ROM.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("            - Lists the contents of a directory or "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" information.\nmap           - Displays or defines "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" system mappings.\nmemmap        - Displays the memory map maintained by the UEFI environment.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v("         - Creates one or "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" new directories.\nmm            - Displays or modifies MEM/MMIO/IO/PCI/PCIE address space.\nmode          - Displays or changes the console output device mode.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v("            - Moves one or "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" files to a destination within or between "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" systems.\nopeninfo      - Displays the protocols and agents associated with a handle.\nparse         - Retrieves a value from a standard "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),s._v(" output file.\npause         - Pauses a script and waits "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" an operator to press a key.\npci           - Displays PCI device list or PCI "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" configuration space and PCIe extended\nconfiguration space.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v("          - Ping the target "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" with an IPv4 stack.\nping6         - Ping a target machine with UEFI IPv6 network stack.\nreconnect     - Reconnects drivers to the specific device.\nreset         - Resets the system.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("            - Deletes one or "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" files or directories.\nsermode       - Sets serial port attributes.\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v("           - Displays or modifies UEFI Shell environment variables.\nsetsize       - Adjusts the size of a file.\nsetvar        - Displays or modifies a UEFI variable.\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("shift")]),s._v("         - Shifts in-script parameter positions.\nsmbiosview    - Displays SMBIOS information.\nstall         - Stalls the operation "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" a specified number of microseconds.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v("          - Displays or sets the current "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" the system.\ntimezone      - Displays or sets "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" zone information.\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v("         - Updates the filename timestamp with the current system "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" and time.\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v("          - Sends the contents of a "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" to the standard output device.\nunload        - Unloads a driver image that was already loaded.\nver           - Displays UEFI Firmware version information.\nvol           - Displays or modifies information about a disk volume.\n\nHelp usage:help "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("cmd"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("pattern"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("special"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-usage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-verbose"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-section name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("Reference: "),t("a",{attrs:{href:"https://wiki.archlinux.org/index.php/GRUB/EFI_examples",target:"_blank",rel:"noopener noreferrer"}},[s._v("GRUB/EFI examples from the Archlinux Wiki"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);