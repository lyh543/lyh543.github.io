(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{491:function(t,e,s){"use strict";s.r(e);var a=s(3),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("2020.2.12 更新：相比 Owncloud，NextCloud 貌似更新。所以我转投 NextCloud 了。另外知乎上也有很多人安利 seafile。\n2020.2.27 更新：接触了 Docker 以后，发现使用 Docker 搭建更加方便（可从"),e("RouterLink",{attrs:{to:"/notes/linux/docker.html"}},[t._v("这篇博客")]),t._v("中了解）。于是也花了一点时间钻研，搭建好了 NextCloud 和 Seafile，并把方法一并写在下面。")],1)]),t._v(" "),e("h2",{attrs:{id:"安装-owncloud"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-owncloud"}},[t._v("#")]),t._v(" 安装 Owncloud")]),t._v(" "),e("p",[t._v("转载链接：https://zhuanlan.zhihu.com/p/28648363")]),t._v(" "),e("p",[t._v("官方教程：https://doc.owncloud.org/server/9.0/admin_manual/installation/linux_installation.html")]),t._v(" "),e("p",[t._v("按照上面无脑配就可以了。不多说。")]),t._v(" "),e("h2",{attrs:{id:"配置-owncloud"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-owncloud"}},[t._v("#")]),t._v(" 配置 Owncloud")]),t._v(" "),e("p",[t._v("按照知乎的链接装完以后")]),t._v(" "),e("ul",[e("li",[t._v("配置文件在 "),e("code",[t._v("/etc/owncloud/config.php")])]),t._v(" "),e("li",[t._v("云盘文件默认在 "),e("code",[t._v("/var/lib/owncloud/data")]),t._v("，可在开始使用，进入管理员账户的时候修改。")])]),t._v(" "),e("p",[t._v("顺便一提，对于 NextCloud，配置文件在 ``，安装文件在 "),e("code",[t._v("/var/www/html/nextcloud/")]),t._v("。")]),t._v(" "),e("p",[t._v("如果需要进行配置，需要用 apache 用户运行 "),e("code",[t._v("/var/www/html/nextcloud/occ")]),t._v(" 命令，还需要给可执行权限。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("chmod a+x /var/www/html/nextcloud/occ # 给可执行权限\nsudo -u apache /var/www/html/nextcloud/occ --help\n")])])]),e("h2",{attrs:{id:"安装基于-docker-的-nextcloud"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装基于-docker-的-nextcloud"}},[t._v("#")]),t._v(" 安装基于 Docker 的 NextCloud")]),t._v(" "),e("p",[t._v("为什么要用 Docker 呢？这是为了系统的干净吧。不过坏处是，Docker 的 NextCloud 访问宿主机的文件就没那么容易了。当然，两种方法各有所长。")]),t._v(" "),e("p",[t._v("顺便一提，如果使用 Docker 的话，甚至可以在一台 Windows 电脑上部署了，就可以在自己的 Windows 电脑上搭建一个，然后用 "),e("code",[t._v("frp")]),t._v(" 等方式内网穿透到公网了（可参考"),e("RouterLink",{attrs:{to:"/notes/microsoft/windows/use-remote-desktop-with-frp.html"}},[t._v("博客")]),t._v("）。")],1),t._v(" "),e("p",[t._v("首先要安装 Docker 以及 Docker Compose，可参照"),e("RouterLink",{attrs:{to:"/notes/linux/docker.html"}},[t._v("这篇教程")]),t._v("。")],1),t._v(" "),e("p",[t._v("然后需要几个配置文件，我压缩好以后，放在我的网站上，"),e("a",{attrs:{href:"/blob/nextcloud-docker-compose.tar"}},[t._v("链接在这里")]),t._v("，当然也可以通过下面的命令直接从服务器下载：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://blog.lyh543.cn/blob/nextcloud-docker-compose.tar\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -xf nextcloud-docker-compose.tar\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" nextcloud-docker-compose\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" nextcloud\n")])])]),e("p",[t._v("然后一句")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up -d\n")])])]),e("p",[t._v("经过漫长的镜像下载以后，即可在 "),e("code",[t._v("127.0.0.1:7070")]),t._v(" 看到 NextCloud 初始化页面。")]),t._v(" "),e("h3",{attrs:{id:"配置-nextcloud"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-nextcloud"}},[t._v("#")]),t._v(" 配置 Nextcloud")]),t._v(" "),e("p",[t._v("如果需要进入到 "),e("code",[t._v("docker")]),t._v(" 的虚拟机中，可以使用一下命令进入容器的命令行：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[root@iz2ze nextcloud]# docker exec -it nextcloud_web_1 /bin/sh\n/ #\n")])])]),e("p",[t._v("其中 "),e("code",[t._v("nextcloud_web_1")]),t._v(" 为你的容器名，一般来说就是这个，可以通过 "),e("code",[t._v("docker ps")]),t._v(" 查看。")]),t._v(" "),e("p",[t._v("进入以后，就是 shell 的操作了。Nextcloud 文件的目录在 "),e("code",[t._v("/var/www/html")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"添加信任域名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加信任域名"}},[t._v("#")]),t._v(" 添加信任域名")]),t._v(" "),e("p",[t._v("从别的域名访问的时候，NextCloud 会提示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('通过不被信任的域名访问\n请联系您的管理员。如果您就是管理员，请参照 config.sample.php 中的示例编辑 config/config.php 中的 "trusted_domains" 设置。\n')])])]),e("p",[t._v("我们需要在容器里配置文件添加自己的域名。")]),t._v(" "),e("p",[t._v("首先进入容器的命令行：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# docker exec -it nextcloud_web_1 /bin/sh\n")])])]),e("p",[t._v("然后用 vi 修改配置文件：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# vi config/config.php\n")])])]),e("p",[t._v("然后找到 "),e("code",[t._v("trust_domain")]),t._v(" 部分，我的在 30 行附近。")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'trusted_domains'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'example.com:8080'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("p",[t._v("按 "),e("code",[t._v("i")]),t._v(" 进入编辑模式，然后添加自己的域名。")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'trusted_domains'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("array")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'example.com:8080'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'cloud.example.com'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("p",[t._v("然后按 "),e("code",[t._v("esc")]),t._v(" 退出编辑模式，再依次按 "),e("code",[t._v(":wq")]),t._v(" 后回车，保存并退出。再输入 "),e("code",[t._v("exit")]),t._v(" 退出 NextCloud 容器的命令行，刷新页面即可。")]),t._v(" "),e("h2",{attrs:{id:"安装基于-docker-的-seafile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装基于-docker-的-seafile"}},[t._v("#")]),t._v(" 安装基于 Docker 的 Seafile")]),t._v(" "),e("p",[t._v("这里我们基于 "),e("a",{attrs:{href:"https://github.com/HumanBrainProject/seafile-compose/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HumanBrainProject/seafile-compose"),e("OutboundLink")],1),t._v(" 来配置 Seafile。")]),t._v(" "),e("p",[t._v("为什么要用 Docker 呢？这是为了系统的干净吧。不过坏处是，Docker 的 NextCloud 访问宿主机的文件就没那么容易了。当然，两种方法各有所长。")]),t._v(" "),e("p",[t._v("顺便一提，如果使用 Docker 的话，甚至可以在一台 Windows 电脑上部署了，就可以在自己的 Windows 电脑上搭建一个，然后用 "),e("code",[t._v("frp")]),t._v(" 等方式内网穿透到公网了（可参考"),e("RouterLink",{attrs:{to:"/notes/microsoft/windows/use-remote-desktop-with-frp.html"}},[t._v("博客")]),t._v("）。")],1),t._v(" "),e("p",[t._v("首先要安装 Docker 以及 Docker Compose，可参照"),e("RouterLink",{attrs:{to:"/notes/linux/docker.html"}},[t._v("这篇教程")]),t._v("。")],1),t._v(" "),e("p",[t._v("然后我们下载前面提到的项目：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果还没有安装 git，记得安装")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/HumanBrainProject/seafile-compose\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" seafile-compose\n")])])]),e("p",[t._v("但是！这个模板直接使用貌似会在一个过程中卡住。在修改一个地方以后，我才能够正常的进行部署。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("nano")]),t._v(" seafile_dev_docker/Dockerfile\n")])])]),e("p",[t._v("在这里，我们修改第三行起的 "),e("code",[t._v("RUN")]),t._v(" 语句，将其拆分为几个 "),e("code",[t._v("RUN")]),t._v(" 语句，顺便也替换了中科大的镜像源。")]),t._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" sed -i "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/archive.ubuntu.com/mirrors.ustc.edu.cn/g'")]),t._v(" /etc/apt/sources.list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    && apt update")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-get install -qq -y --no-install-recommends "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      vim "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      htop "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      net-tools "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      psmisc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      git "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      wget "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      curl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      build-essential "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-dev "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-pip "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-setuptools "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-wheel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      libmysqlclient-dev")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-get clean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" rm -rf /var/lib/apt/lists/*")]),t._v("\n")])])]),e("p",[t._v("所以完整的 "),e("code",[t._v("seafile_dev_docker/Dockerfile")]),t._v(" 应该如下：")]),t._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu:16.04")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" sed -i "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/archive.ubuntu.com/mirrors.ustc.edu.cn/g'")]),t._v(" /etc/apt/sources.list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    && apt update")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-get install -qq -y --no-install-recommends "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      vim "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      htop "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      net-tools "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      psmisc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      git "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      wget "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      curl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      build-essential "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-dev "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-pip "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-setuptools "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      python-wheel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      libmysqlclient-dev")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-get clean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" rm -rf /var/lib/apt/lists/*")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" DOCKERIZE_VERSION v0.6.1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" wget https://github.com/jwilder/dockerize/releases/download/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DOCKERIZE_VERSION")]),t._v("/dockerize-linux-amd64-"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DOCKERIZE_VERSION")]),t._v(".tar.gz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DOCKERIZE_VERSION")]),t._v(".tar.gz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    && rm dockerize-linux-amd64-"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DOCKERIZE_VERSION")]),t._v(".tar.gz")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" SEAFILE_VERSION=6.3.3 SEAFILE_SERVER=seafile-server")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir -p /opt/seafile/conf && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    mkdir -p /opt/seafile/data && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    mkdir -p /opt/seafile/pids && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    mkdir -p /opt/seafile/ccnet && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    mkdir -p /opt/seafile/sockets && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    mkdir -p /opt/seafile/logs && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    openssl genrsa -out /opt/seafile/ccnet/mykey.peer 4096 && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    touch /opt/seafile/logs/seafile.log && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    touch /opt/seafile/logs/ccnet.log && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    touch /opt/seafile/logs/seahub.log")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir -p /opt/seafile/ && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    curl -sSL -o - https://download.seadrive.org/seafile-server_"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${SEAFILE_VERSION}")]),t._v("_x86-64.tar.gz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    | tar xzf - -C /opt/seafile/ && "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    ln -s /opt/seafile/seafile-server-"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${SEAFILE_VERSION}")]),t._v(" /opt/seafile/seafile-server-latest")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" LD_LIBRARY_PATH=/opt/seafile/seafile-server-latest/seafile/lib:/opt/seafile/seafile-server-latest/seafile/lib64:"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$LD_LIBRARY_PATH")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" SEAFILE_DATA_DIR=/opt/seafile/data CCNET_CONF_DIR=/opt/seafile/ccnet SEAFILE_CENTRAL_CONF_DIR=/opt/seafile/conf SEAFILE_CONF_DIR=/opt/seafile/seafile-data")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PYTHONPATH=/opt/seafile/seafile-server-"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${SEAFILE_VERSION}")]),t._v("/seafile/lib64/python2.7/site-packages:/opt/seafile/seafile-server-6.3.3/seahub:/opt/seafile/seafile-server-6.3.3/seahub/thirdpart:"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PYTHONPATH")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./requirements.txt /tmp/requirements.txt")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" pip install --no-cache-dir --disable-pip-version-check "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n                -r /tmp/requirements.txt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n                -r /opt/seafile/seafile-server-"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${SEAFILE_VERSION}")]),t._v("/seahub/requirements.txt")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" config /opt/seafile/conf/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ccnet /opt/seafile/ccnet/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" scripts /opt/seafile")]),t._v("\n")])])]),e("p",[t._v("然后使用该项目提供的命令进行构建：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker-compose \\\n  -f docker-compose.yaml \\\n  up \\\n  --force-recreate \\\n  --renew-anon-volumes \\\n  --build\n")])])]),e("p",[t._v("整个过程比较慢，最后如果看到了 "),e("code",[t._v("seahub_1")]),t._v(" 开头的行，应该是配置完毕了。此时访问 "),e("code",[t._v("yourip:8000")]),t._v("，如果出现了 Seafile 登录页面，那么你就成功了 3/4 了。")]),t._v(" "),e("p",[t._v("接下来按 "),e("code",[t._v("Ctrl+C")]),t._v(" 停止，然后重新让他以后台形式运行：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker-compose up -d\n")])])]),e("p",[t._v("前面的 "),e("code",[t._v("docker-compose")]),t._v(" 命令只用于第一个构建 Docker，之后就用常规的 "),e("code",[t._v("docker-compose up -d")]),t._v(" 即可。运行完以后可以检查一下 "),e("code",[t._v("8000")]),t._v(" 端口是否正常。")]),t._v(" "),e("p",[t._v("剩下的 1/4 就是注册新账户了。这里 Seafile 不像 NextCloud 在第一次登陆时创建管理员账户，而是需要调用容器内的 Python 脚本。")]),t._v(" "),e("p",[t._v("在宿主机执行以下命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker-compose exec seahub python /opt/seafile/seafile-server-latest/seahub/manage.py createsuperuser\n")])])]),e("p",[t._v("如果正常，就会出现下面的情况：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" seahub python /opt/seafile/seafile-server-latest/seahub/manage.py createsuperuser\n/opt/seafile/seafile-server-6.3.3/seahub/thirdpart/requests/__init__.py:80: RequestsDependencyWarning: urllib3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.19")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" or chardet "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(".4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" doesn't match a supported version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n  RequestsDependencyWarning"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nE-mail address: lxl361429916@live.com\nPassword:\nPassword "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("again"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\nSuperuser created successfully.\n")])])]),e("p",[t._v("前面的 Warning 可以忽略。注册完账户以后，就可以在 "),e("code",[t._v("8000")]),t._v(" 端口登陆了。")]),t._v(" "),e("h3",{attrs:{id:"可能报错及解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可能报错及解决方案"}},[t._v("#")]),t._v(" 可能报错及解决方案")]),t._v(" "),e("h4",{attrs:{id:"第一次配置时卡住"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一次配置时卡住"}},[t._v("#")]),t._v(" 第一次配置时卡住")]),t._v(" "),e("p",[t._v("如果第一次配置的时候卡住，出现了下面的内容：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# docker-compose \\\n>   -f docker-compose.yaml \\\n>   up \\\n>   --force-recreate \\\n>   --renew-anon-volumes \\\n>   --build\nBuilding ccnet\nStep 1/15 : FROM ubuntu:16.04\n ---\x3e 77be327e4b63\nStep 2/15 : RUN apt update     && apt-get install -qq -y --no-install-recommends       vim       htop       net-tools       psmisc       git       wget       curl       build-essential       python-dev       python-pip       python-setuptools       python-wheel       libmysqlclient-dev     && apt-get clean     && rm -rf /var/lib/apt/lists/*\n ---\x3e Running in 379f2d9271b1\n\nWARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n\nGet:1 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]\nGet:2 http://security.ubuntu.com/ubuntu xenial-security InRelease [109 kB]\nGet:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [109 kB]\nGet:4 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages [1063 kB]\nGet:5 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [107 kB]\nGet:6 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages [1558 kB]\nGet:7 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages [12.7 kB]\nGet:8 http://security.ubuntu.com/ubuntu xenial-security/universe amd64 Packages [620 kB]\nGet:9 http://security.ubuntu.com/ubuntu xenial-security/multiverse amd64 Packages [6280 B]\nGet:10 http://archive.ubuntu.com/ubuntu xenial/restricted amd64 Packages [14.1 kB]\nGet:11 http://archive.ubuntu.com/ubuntu xenial/universe amd64 Packages [9827 kB]\nGet:12 http://archive.ubuntu.com/ubuntu xenial/multiverse amd64 Packages [176 kB]\nGet:13 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 Packages [1432 kB]\nGet:14 http://archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 Packages [13.1 kB]\nGet:15 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 Packages [1021 kB]\nGet:16 http://archive.ubuntu.com/ubuntu xenial-updates/multiverse amd64 Packages [19.3 kB]\nGet:17 http://archive.ubuntu.com/ubuntu xenial-backports/main amd64 Packages [7942 B]\nGet:18 http://archive.ubuntu.com/ubuntu xenial-backports/universe amd64 Packages [8807 B]\nFetched 16.4 MB in 1min 46s (153 kB/s)\nReading package lists...\nBuilding dependency tree...\nReading state information...\nAll packages are up to date.\n")])])]),e("p",[t._v("可能是你没有修改 "),e("code",[t._v("Dockerfile")]),t._v("，请按照上面的方法修改 "),e("code",[t._v("Dockerfile")]),t._v("，然后重新 "),e("code",[t._v("docker-compose")])]),t._v(" "),e("h4",{attrs:{id:"设置密码时报错"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置密码时报错"}},[t._v("#")]),t._v(" 设置密码时报错")]),t._v(" "),e("p",[t._v("如果设置密码时报错：")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("seahub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("accounts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DoesNotExist"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" User matching query does "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" exits"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("p",[t._v("可能是数据库的容器自己退出了。可以用 "),e("code",[t._v("docker ps --all")]),t._v("，然后看 "),e("code",[t._v("seafile-compose_db_1")]),t._v(" 的 "),e("code",[t._v("STATUS")]),t._v(" 是 "),e("code",[t._v("UP")]),t._v(" 还是 "),e("code",[t._v("EXIT")]),t._v("。")]),t._v(" "),e("p",[t._v("如果确实是 "),e("code",[t._v("EXIT")]),t._v(" 退出了，那么 "),e("code",[t._v("docker-compose up -d")]),t._v(" 即可重启。")])])}),[],!1,null,null,null);e.default=n.exports}}]);