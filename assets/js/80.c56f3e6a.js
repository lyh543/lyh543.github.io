(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{497:function(t,a,s){"use strict";s.r(a);var e=s(3),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("傅爷 nb!")]),t._v(" "),s("h2",{attrs:{id:"短路语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短路语句"}},[t._v("#")]),t._v(" 短路语句")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'q'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"一直没有学过去的-malloc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一直没有学过去的-malloc"}},[t._v("#")]),t._v(" 一直没有学过去的 malloc")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"变量的生存期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的生存期"}},[t._v("#")]),t._v(" 变量的生存期")]),t._v(" "),s("p",[t._v("C++ (11) 有四种存储变量的方案，这四种方案生成的变量有不同的生存期。")]),t._v(" "),s("ul",[s("li",[t._v("自动生存期")])]),t._v(" "),s("p",[t._v("用法：函数（或其他语句块 "),s("code",[t._v("local scope")]),t._v("、函数的形式参数、名称空间）中声明变量。"),s("br"),t._v("\n生存期：函数执行过程中。")]),t._v(" "),s("p",[t._v("这种变量之间没有联系，互不相干（同时也可以用相同的名字）。")]),t._v(" "),s("p",[t._v("函数不能声明在代码块中，不然它就不能在其他函数中被使用，这一点也不“函数”。")]),t._v(" "),s("ul",[s("li",[t._v("静态生存期")])]),t._v(" "),s("p",[t._v("静态生存期分为三种。")]),t._v(" "),s("ol",[s("li",[t._v("external linkage（文件间可见）")])]),t._v(" "),s("p",[t._v("在 C++ 中，变量有两种声明（declaration）方式："),s("br"),t._v("\na. 一种是定义（或定义声明，defining declaration，definition），这种会分配内存；"),s("br"),t._v("\nb. 另一种是引用声明（refering declaration，declaration），不分配内存，只是引用已经存在的变量。")]),t._v(" "),s("p",[t._v("用法：在函数外 "),s("code",[t._v("int g = 1000;")]),t._v("。")]),t._v(" "),s("p",[t._v("在其他文件使用 "),s("code",[t._v("g")]),t._v(" 时，需要加 "),s("code",[t._v("external")]),t._v(" 并且不能赋初值（否则 "),s("code",[t._v("external")]),t._v(" 无效，是定义声明），这便是引用声明。")]),t._v(" "),s("p",[t._v("显然，如果某变量有引用声明，该变量就只能有一个定义声明。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("internal linkage（单文件中的函数可见）")])]),t._v(" "),s("p",[t._v("用法：在函数外 "),s("code",[t._v("static i = 1000;")]),t._v("。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("no linkage（仅在一个函数/代码块可见）")])]),t._v(" "),s("p",[t._v("用法：在函数内 "),s("code",[t._v("static t = 1000;")]),t._v("。")]),t._v(" "),s("p",[t._v("这三种变量都会在程序运行过程中一直存在。由于这部分变量占用内存是不变的，程序干脆在运行的一开始，就分配一块内存来存这些静态变量。")]),t._v(" "),s("p",[t._v("编译器还会隐式自动将静态生存期的变量按位模式初始化为 0。对于有用常量表达式赋初值的静态变量，编译器会做一些计算（注意是编译器来做，"),s("code",[t._v("sizeof")]),t._v(" 也算是这种计算，另外 C++ 11 后的 "),s("code",[t._v("constexpr")]),t._v(" 也被包含在内）；对于复杂的（如，需调用函数），则需要动态初始化。")]),t._v(" "),s("ul",[s("li",[t._v("动态生存期")])]),t._v(" "),s("p",[t._v("用法及生存期：从 "),s("code",[t._v("new")]),t._v(" 开始，直到 "),s("code",[t._v("delete")]),t._v("。")]),t._v(" "),s("p",[t._v("这之中包含了 "),s("code",[t._v("register")]),t._v(" 变量。在 C++ 11 以前，"),s("code",[t._v("register")]),t._v(" 变量会使用 CPU 缓存进行存储，对于频繁访问的变量使用 "),s("code",[t._v("register")]),t._v(" 能够是程序更快。"),s("br"),t._v("\n不过在 C++ 11 以前，也有编译器会自动进行处理，不需要手动 "),s("code",[t._v("register")]),t._v("。C++ 11 直接弃用了 "),s("code",[t._v("register")]),t._v("，把这步完全交给了编译器，"),s("code",[t._v("register")]),t._v(" 更像是提示程序员，该变量会被反复使用。")]),t._v(" "),s("ul",[s("li",[t._v("线程生存期")])]),t._v(" "),s("p",[t._v("并行运算使用，C++ 11 后。")]),t._v(" "),s("h3",{attrs:{id:"内存分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存分配"}},[t._v("#")]),t._v(" 内存分配")]),t._v(" "),s("p",[t._v("内存空间分为四个部分：静态数据区、代码区、栈区、堆区。")]),t._v(" "),s("ul",[s("li",[t._v("静态数据区：全局变量、static存储类的局部变量、常量")]),t._v(" "),s("li",[t._v("代码区：函数代码")]),t._v(" "),s("li",[t._v("栈区：auto存储类的局部变量、函数的形参、函数调用时的有关信息（如返回值）")]),t._v(" "),s("li",[t._v("堆区：动态变量")])]),t._v(" "),s("p",[t._v("静态数据区和代码区的大小是固定的，而栈区和堆区的大小随程序的运行不断变化（不过操作系统会对其空间最大值有一定的限制）。")]),t._v(" "),s("p",[t._v("编译程序隐式自动将静态生存期的变量按位模式初始化为 0，其他变量不对其进行初始化（使用空间中的已有值，因此是不固定的）")]),t._v(" "),s("h2",{attrs:{id:"后缀表达式-堆栈-计算题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后缀表达式-堆栈-计算题"}},[t._v("#")]),t._v(" 后缀表达式+堆栈=计算题")]),t._v(" "),s("p",[t._v("有点香")]),t._v(" "),s("h2",{attrs:{id:"多文件编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多文件编写"}},[t._v("#")]),t._v(" 多文件编写")]),t._v(" "),s("p",[t._v("头文件里有以下部分：")]),t._v(" "),s("ul",[s("li",[t._v("函数原型")]),t._v(" "),s("li",[t._v("常量（"),s("code",[t._v("#define")]),t._v(" 或 "),s("code",[t._v("const")]),t._v("）")]),t._v(" "),s("li",[t._v("类和结构的定义（它们不涉及到变量，仅告诉编译器如何创建结构变量）")]),t._v(" "),s("li",[t._v("模板的定义（它只告诉编译器如何生成函数的定义）")]),t._v(" "),s("li",[t._v("内联函数")])]),t._v(" "),s("ol",[s("li",[t._v("多个头文件可以相互引用，但是反复引用前记得加 "),s("code",[t._v("#pragma once")]),t._v("，或者使用 "),s("code",[t._v("#ifndef FILENAME_H_")]),t._v(" 宏定义判断是否被引用过。")]),t._v(" "),s("li",[t._v("结构/类的声明（与其成员函数）、内联函数的定义和非内联函数的声明必须放在 "),s("code",[t._v(".h")]),t._v("，非内联函数的函数定义必须放在 "),s("code",[t._v(".cpp")]),t._v(" 里（不然会造成多次编译，参考："),s("a",{attrs:{href:"https://www.zhihu.com/question/58547318/answer/157433980",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么c++要“在头文件中声明，在源文件中定义”？ - vczh的回答 - 知乎"),s("OutboundLink")],1),t._v("）")]),t._v(" "),s("li",[t._v("最后要在 "),s("code",[t._v("cpp")]),t._v(" 文件里 "),s("code",[t._v('#include "mycpp.h"')])])]),t._v(" "),s("h2",{attrs:{id:"工程开发实现一个大的功能-正则匹配器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工程开发实现一个大的功能-正则匹配器"}},[t._v("#")]),t._v(" 工程开发实现一个大的功能（正则匹配器）")]),t._v(" "),s("p",[t._v("先从最简单的功能做起，然后慢慢加功能（不然会手忙脚乱的）")]),t._v(" "),s("h2",{attrs:{id:"函数与过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数与过程"}},[t._v("#")]),t._v(" 函数与过程")]),t._v(" "),s("p",[t._v("函数：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("过程：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("voud "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    game"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    game"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("工程开发偏向"),s("strong",[t._v("纯函数")])]),t._v(" "),s("ol",[s("li",[t._v("看清函数名、参数和注释，函数过程就不重要了")]),t._v(" "),s("li",[t._v("参数一定、返回值一定，测试方便")])])])}),[],!1,null,null,null);a.default=n.exports}}]);