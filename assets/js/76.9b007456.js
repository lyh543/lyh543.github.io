(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{433:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("此篇博客来自《数据库管理及应用》课程的第三章。教材为《数据库系统及应用》（第 2 版，魏祖宽 主编）。")]),t._v(" "),s("h2",{attrs:{id:"sql-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-简介"}},[t._v("#")]),t._v(" SQL 简介")]),t._v(" "),s("blockquote",[s("p",[t._v("SQL：Structured Query Language")])]),t._v(" "),s("blockquote",[s("p",[t._v("SQL 决不仅仅是一个查询工具，还用于控制 DBMS 提供给用户的所有功能：")]),t._v(" "),s("ul",[s("li",[t._v("数据定义(Data definition)：SQL 可用于定义被存放数据的结构和组织，以及数据项之间的关系。")]),t._v(" "),s("li",[t._v("数据检索(Data retrieval)：SQL 能使用户或应用程序从数据库中检索数据并使用这些数据。")]),t._v(" "),s("li",[t._v("数据操纵(Data manipulation)： 用户或应用程序通过 SQL 更改数据库，如增加新数据，删除旧数据，修改已存入的数据等。")]),t._v(" "),s("li",[t._v("存取控制(Access control)：SQL 可用来限制用户检索，增加和修改数据的权限，保护所存储的数据不被非法存取。")]),t._v(" "),s("li",[t._v("数据共享(Data sharing)：SQL 可用于调整数据让并发用户共享，以保证用户之间彼此不受影响。")]),t._v(" "),s("li",[t._v("数据完整性(Data integrity)：SQL 能对数据库的完整性条件作出规定，以使其不会因为修改紊乱或系统出错而被破坏。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("SQL 有以下特点：")]),t._v(" "),s("ul",[s("li",[t._v("支持数据库的三级模式")]),t._v(" "),s("li",[t._v("高度非过程化")]),t._v(" "),s("li",[t._v("面向集合的操作方式（操作对象和结果均为集合）")]),t._v(" "),s("li",[t._v("集 DDL（数据定义语言）、DML（数据操作语言）、DCL （数据控制语言）的功能于一体。下面是三部分用到的关键词：\n"),s("ul",[s("li",[t._v("DDL：CREATE、DROP、ALTER")]),t._v(" "),s("li",[t._v("DML： SELECT、INSERT、UPDATE、DELETE")]),t._v(" "),s("li",[t._v("DCL：GRANT、REVOKE")])])])])]),t._v(" "),s("h2",{attrs:{id:"sql-server-运行环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-server-运行环境"}},[t._v("#")]),t._v(" SQL Server 运行环境")]),t._v(" "),s("p",[t._v("环境配置这部分就请百度吧。")]),t._v(" "),s("p",[t._v("Server 方面，教材讲的是 SQL Server 2000。当然也可以使用最新版的 SQL Server 2019。")]),t._v(" "),s("p",[t._v("编辑器方面，可以使用 SQL Server 配套的 SQL Server Management Studio，也可以使用 VS Code 的 "),s("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=ms-mssql.mssql",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL 插件"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.sqlstyle.guide/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL 样式指南"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"数据库操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[t._v("#")]),t._v(" 数据库操作")]),t._v(" "),s("p",[t._v("开始讲语法之前，先说两点：")]),t._v(" "),s("ol",[s("li",[t._v("SQL Server 对大小写不敏感")]),t._v(" "),s("li",[t._v("注释的形式为 "),s("code",[t._v("--单行注释")]),t._v(" 和 "),s("code",[t._v("/*跨行注释*/")])])]),t._v(" "),s("h3",{attrs:{id:"创建数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建数据库"}},[t._v("#")]),t._v(" 创建数据库")]),t._v(" "),s("blockquote",[s("p",[t._v("数据库中的所有数据和对象（如表、存储过程、触发器和视图）都存储在三种操作系统文件中：")]),t._v(" "),s("ol",[s("li",[t._v("第一类是主文件，扩展名为 "),s("code",[t._v("mdf")]),t._v("（priMary Database Files），该文件包含数据库的启动信息及数据信息，每个数据库都有一个主文件。")]),t._v(" "),s("li",[t._v("第二是次要文件，也称从文件，扩展名为 "),s("code",[t._v("ndf")]),t._v("（secoNdary Database Files），这些文件含有主文件以外的所有数据。可选。次要文件的主要用处是，当数据库中的数据量非常大时，需要多个次要文件来提高数据访问效率，或使用多个次要文件将数据扩展到多个不同的磁盘驱动器上。")]),t._v(" "),s("li",[t._v("第三类是事务日志，扩展名为 "),s("code",[t._v("ldf")]),t._v("（Log Databse Files），这些文件包含用于恢复数据库的日志信息。每个数据库都必须至少有一个日志文件。")])])]),t._v(" "),s("p",[t._v("创建数据库的过程可以像下面这么简单。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Database")]),t._v(" HIS\n")])])]),s("p",[t._v("也可以指定一些参数：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" HIS\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v("                          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ON PRIMARY 关键字，表明与该关键字相邻的文件为主文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("   NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HIS_DATA1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- SQL Server 使用的逻辑名称")]),t._v("\n    FILENAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D:\\HIS_DATA1.mdf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 文件名")]),t._v("\n    SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 文件的初始大小")]),t._v("\n    MAXSIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 文件的最大大小")]),t._v("\n    FILEGROWTH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- SQLServer 每次扩大文件的大小，默认为 10%")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("   NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HIS_DATA2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILENAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D:\\HIS_DATA2.ndf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ndf 是次要文件")]),t._v("\n    SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MAXSIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILEGROWTH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLOG "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v("                               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- LOG ON 为关键字，见后")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("   NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HIS_LOG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILENAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D:\\ HIS_LOG.ldf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("MB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MAXSIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v("MB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILEGROWTH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("MB "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("LOG ON")]),t._v(" 用来指定数据库的 SQL Server 事务日志将存储在一个与数据库对象不同的设备上。如果数据库所在的物理设备被破坏而日志还可以使用（如果该日志所在的设备没有被破坏），使用一个以前的数据库备份和一个未破坏的日志的脱机复制，可以将数据库恢复到发生故障时刻的数据库的状态。")]),t._v(" "),s("h3",{attrs:{id:"修改数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改数据库"}},[t._v("#")]),t._v(" 修改数据库")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" HIS\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FILE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("   NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HIS_DATA3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILENAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d:\\data\\HIS_DATA3.ndf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MAXSIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILEGROWTH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" HIS\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODIFY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FILE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("   NAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HIS_DATA2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILENAME "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d:\\data\\HIS_DATA1.mdf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MAXSIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FILEGROWTH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" HIS\nREMOVE "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FILE")]),t._v(" HIS_DATA2\n")])])]),s("p",[t._v("可以看到有三种操作："),s("code",[t._v("ADD FILE")]),t._v("、"),s("code",[t._v("MODIFY FILE")]),t._v("、"),s("code",[t._v("REMOVE FILE")]),t._v("，其中前两者要指定的参数创建数据库相同。")]),t._v(" "),s("h3",{attrs:{id:"删除数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除数据库"}},[t._v("#")]),t._v(" 删除数据库")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" HIS\n")])])]),s("p",[t._v("不能删除系统数据库（"),s("code",[t._v("msdb")]),t._v("，"),s("code",[t._v("master")]),t._v("，"),s("code",[t._v("model")]),t._v(" 和 "),s("code",[t._v("tempdb")]),t._v("）")]),t._v(" "),s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("p",[t._v("看看就好（逃")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("数据类型")]),t._v(" "),s("th",[t._v("功能")]),t._v(" "),s("th",[t._v("范围")]),t._v(" "),s("th",[t._v("注释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("CHAR(n)")])]),t._v(" "),s("td",[t._v("固定长度字符串")]),t._v(" "),s("td",[t._v("长度范围 1~8000")]),t._v(" "),s("td",[t._v("默认 1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("NCHAR(n)")])]),t._v(" "),s("td",[t._v("固定长度 Unicode 字符串")]),t._v(" "),s("td",[t._v("长度范围 1~4000")]),t._v(" "),s("td",[t._v("默认 1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("VARCHAR(n)")])]),t._v(" "),s("td",[t._v("变长字符串")]),t._v(" "),s("td",[t._v("长度范围 1~8000")]),t._v(" "),s("td",[t._v("默认 1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("NVARCHAR(n)")])]),t._v(" "),s("td",[t._v("变长 Unicode 字符串")]),t._v(" "),s("td",[t._v("长度范围 1~4000")]),t._v(" "),s("td",[t._v("默认 1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("TEXT")])]),t._v(" "),s("td",[t._v("变长字符数据")]),t._v(" "),s("td",[t._v("最长 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msup",[s("mn",[t._v("2")]),s("mn",[t._v("31")])],1),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^{31}-1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mtight"},[t._v("3")]),s("span",{staticClass:"mord mtight"},[t._v("1")])])])])])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" 字节")],1),t._v(" "),s("td",[t._v("行中存储指向第一个数据页的指针。实际的文本是以 B-树 页面存储")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("NTEXT")])]),t._v(" "),s("td",[t._v("变长 Unicode 字符数据")]),t._v(" "),s("td",[t._v("最长 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msup",[s("mn",[t._v("2")]),s("mn",[t._v("30")])],1),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^{30}-1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mtight"},[t._v("3")]),s("span",{staticClass:"mord mtight"},[t._v("0")])])])])])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" 字节")],1),t._v(" "),s("td",[t._v("同上")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("DEC(n,m)")]),s("br"),s("code",[t._v("DECIMAL(n,m)")]),s("br"),s("code",[t._v("NUMERIC(n,m)")])]),t._v(" "),s("td",[t._v("数值型，n 是总位数，m 是小数点右边的位数")]),t._v(" "),s("td",[t._v("n 范围 1~38"),s("br"),t._v("m 范围 0~n")]),t._v(" "),s("td",[t._v("默认 n=38, m=0")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("INT")]),s("br"),s("code",[t._v("INTEGER")])]),t._v(" "),s("td",[t._v("整数")]),t._v(" "),s("td",[t._v("范围 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("−")]),s("msup",[s("mn",[t._v("2")]),s("mn",[t._v("31")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("-2^{31}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[t._v("−")]),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mtight"},[t._v("3")]),s("span",{staticClass:"mord mtight"},[t._v("1")])])])])])])])])])])])])]),t._v("~"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msup",[s("mn",[t._v("2")]),s("mn",[t._v("31")])],1),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^{31}-1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mtight"},[t._v("3")]),s("span",{staticClass:"mord mtight"},[t._v("1")])])])])])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])])])],1),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("FLOAT(n)")])]),t._v(" "),s("td",[t._v("浮点数，n 是尾数位数")]),t._v(" "),s("td",[t._v("范围 1~53")]),t._v(" "),s("td",[t._v("如果 n 为 1~24 则指定单精度；如果 n 为 25~53 则指定双精度（8字节）；默认 53")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("REAL")])]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td",[t._v("等价于 "),s("code",[t._v("FLOAT(24)")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SMALLDATETIME")])]),t._v(" "),s("td",[t._v("四字节日期和时间")]),t._v(" "),s("td",[t._v("日期范围 "),s("code",[t._v("?")]),t._v(" ~ "),s("code",[t._v("6-6-2079")])]),t._v(" "),s("td",[t._v("时间精度是自午夜开始的 1 分钟之内")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("DATETIME")])]),t._v(" "),s("td",[t._v("八字节日期和时间")]),t._v(" "),s("td",[t._v("日期范围 "),s("code",[t._v("?")]),t._v(" ~ "),s("code",[t._v("12-31-9999")])]),t._v(" "),s("td",[t._v("时间精度：3.33毫秒之内")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("BINARY(n)")])]),t._v(" "),s("td",[t._v("定长二进制数据")]),t._v(" "),s("td",[t._v("长度范围 1~8000 字节")]),t._v(" "),s("td",[t._v("默认 1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("VARBINARY(n)")])]),t._v(" "),s("td",[t._v("变长二进制数据")]),t._v(" "),s("td",[t._v("长度范围 1~8000 字节")]),t._v(" "),s("td",[t._v("默认 1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("IMAGE")])]),t._v(" "),s("td",[t._v("变长二进制数据，用于储存图形数据")]),t._v(" "),s("td",[t._v("最长 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msup",[s("mn",[t._v("2")]),s("mn",[t._v("31")])],1),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^{31}-1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mtight"},[t._v("3")]),s("span",{staticClass:"mord mtight"},[t._v("1")])])])])])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" 字节")],1),t._v(" "),s("td",[t._v("行中存储指向第一个数据页的指针。实际的数字以 B-树 的页面存储")])])])]),t._v(" "),s("h2",{attrs:{id:"表操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表操作"}},[t._v("#")]),t._v(" 表操作")]),t._v(" "),s("h3",{attrs:{id:"创建表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建表"}},[t._v("#")]),t._v(" 创建表")]),t._v(" "),s("p",[t._v("下面的代码将创建一个 "),s("code",[t._v("Medicine")]),t._v(" 表，包含五个属性，并且定义了数据类型。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Medicine "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Mno    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 主键")]),t._v("\n    Mname  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 非空")]),t._v("\n    Mprice "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 非空")]),t._v("\n    Munit  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'克'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 默认值为 '克'")]),t._v("\n    Mtype  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("常用的完整性约束如下：")]),t._v(" "),s("ul",[s("li",[t._v("主键约束："),s("code",[t._v("PRIMARY KEY")])]),t._v(" "),s("li",[t._v("唯一性约束："),s("code",[t._v("UNIQUE")])]),t._v(" "),s("li",[t._v("非空值约束："),s("code",[t._v("NOT NULL")])]),t._v(" "),s("li",[t._v("外键约束："),s("code",[t._v("FOREIGN KEY")])])]),t._v(" "),s("p",[t._v("主键也同时需要满足非空、唯一。")]),t._v(" "),s("p",[t._v("下面是外键的演示：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeMaster "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Rno       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Pno       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Dno       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    DGno      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Rdatetime "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATETIME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Rno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Mno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Mamount "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decimal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" Rnofk "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--最后一行的逗号是可选的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"外键约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外键约束"}},[t._v("#")]),t._v(" 外键约束")]),t._v(" "),s("p",[t._v("最后一张表 "),s("code",[t._v("RecipeDetail")]),t._v(" 用两种方法进行了外键约束。")]),t._v(" "),s("p",[t._v("一种形式是在列后面进行约束：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("Mno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- FOREIGN KEY 后的 Mno 指的是该表的属性列的名称，即第一个 Mno")]),t._v("\n")])])]),s("p",[t._v("另一种形式是作为表级的约束：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" RnoForeignKey "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- RnoForeignKey 是外键名称（而非外键列名称），不需和后面保持一致，也可以省略")]),t._v("\n")])])]),s("h3",{attrs:{id:"修改表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改表"}},[t._v("#")]),t._v(" 修改表")]),t._v(" "),s("p",[t._v("修改表有四种操作，如下：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" 〈基表名〉\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("数据类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--更改列")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("新列名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("数据类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("约束规则"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--新增列")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--删除列")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("约束规则"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--删除约束规则")]),t._v("\n")])])]),s("p",[t._v("如下的代码向处方明细表 "),s("code",[t._v("RecipeDetail")]),t._v(" 增加一列存储药品单价。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" Price "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Decimal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意，使用 "),s("code",[t._v("ALTER TABLE")]),t._v(" 语句在表中增加列，如果新增列定义为 "),s("code",[t._v("NOT NULL")]),t._v(" 列，必须用 "),s("code",[t._v("Default")]),t._v(" 指定缺省值。否则，没有指定缺省值，当给表增加新列时，表中原有记录的新增列将自动为 "),s("code",[t._v("NULL")]),t._v("，这样就会违背 "),s("code",[t._v("NOT NULL")]),t._v(" 的定义而出错。\n在 "),s("code",[t._v("CREATE TABLE")]),t._v(" 时，"),s("code",[t._v("NOT NULL")]),t._v(" 列可以不指定缺省值。"),s("br"),t._v("\n但即使表中没有一个记录，SQL Server 2000 也不允许用 "),s("code",[t._v("ALTER TABLE")]),t._v(" 指定没有缺省值的 "),s("code",[t._v("NOT NULL")]),t._v(" 列。")])]),t._v(" "),s("h3",{attrs:{id:"删除表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除表"}},[t._v("#")]),t._v(" 删除表")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeMaster\n")])])]),s("p",[t._v("此外，还可以使用参数：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RESTRICT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- RESTRICT：拥有表的对象（Check、Foreign Key、视图、触发器、存储过程、函数等）时禁止删除；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- CASCADE：级联删除表的所有对象")]),t._v("\n")])])]),s("h2",{attrs:{id:"数据操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据操作"}},[t._v("#")]),t._v(" 数据操作")]),t._v(" "),s("h3",{attrs:{id:"数据查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据查询"}},[t._v("#")]),t._v(" 数据查询")]),t._v(" "),s("p",[t._v("在介绍查询语句的格式之前，我们先来看一下用 "),s("code",[t._v("SELECT")]),t._v(" 、"),s("code",[t._v("FROM")]),t._v(" 和 "),s("code",[t._v("WHERE")]),t._v(" 表达的简单查询语句。")]),t._v(" "),s("p",[t._v("从关系 "),s("code",[t._v("Doctor(Dno, Dname, Dsex, Dage, Ddeptno, Dlevel, Dsalary)")]),t._v(" 中找出所有主任医师级别的男医生的信息，其 SQL 语句为：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dlevel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'主任医师'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("该查询语句显示了大部分 SQL 查询语句的结构特征，即 "),s("code",[t._v("select-from-where")]),t._v(" 形式。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("FROM")]),t._v(" 语句说明了查询语句针对的关系，在这里就是对 "),s("code",[t._v("Doctor")]),t._v(" 关系；")]),t._v(" "),s("li",[s("code",[t._v("WHERE")]),t._v(" 是一个条件语句，说明了我们查询的元组需要满足的条件；")]),t._v(" "),s("li",[s("code",[t._v("SELECT")]),t._v(" 说明要输出元组的哪些属性列。这里使用 "),s("code",[t._v("SELECT *")]),t._v(" 输出了所有属性列。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.sqlstyle.guide/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL 样式指南"),s("OutboundLink")],1),t._v(" 中指出，关键字应当右对齐，元素名应当左对齐，形成两边向中间对齐的“川流”。（对于双关键字如 "),s("code",[t._v("ORDER BY")]),t._v("，第二个关键字 "),s("code",[t._v("BY")]),t._v(" 应在川流右边，和元素一样左对齐）")]),t._v(" "),s("p",[t._v("说完了查询语句的最基础的 "),s("code",[t._v("select-from-where")]),t._v(" 形式，下面我们来说说查询语句的基本结构。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("目标列表达式"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("目标列表达式"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" …\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名或视图名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名或视图名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" …\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("新表名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("从上面我们可以看到：")]),t._v(" "),s("ul",[s("li",[t._v("上述各子句的排列顺序不能改变")]),t._v(" "),s("li",[s("code",[t._v("SELECT")]),t._v(" 子句和 "),s("code",[t._v("FROM")]),t._v(" 子句是必须的，其他子句都是可选的")])]),t._v(" "),s("p",[t._v("该语句执行顺序如下：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("FROM")]),t._v("：指定数据的来源。")]),t._v(" "),s("li",[s("code",[t._v("WHERE")]),t._v("：依据约束条件对元组进行过滤。")]),t._v(" "),s("li",[s("code",[t._v("GROUP BY")]),t._v("：对元组进行分组。")]),t._v(" "),s("li",[s("code",[t._v("HAVING")]),t._v("：依据分组的选择条件对组进行过滤（与 "),s("code",[t._v("GROUP BY")]),t._v(" 搭配使用）。")]),t._v(" "),s("li",[s("code",[t._v("SELECT")]),t._v("：对上述结果按照列表达式选出元组中的属性分量值，形成结果集。\n"),s("ul",[s("li",[s("code",[t._v("DISTINCT")]),t._v(" 选项表示去掉结果集中的重复元组；")]),t._v(" "),s("li",[t._v("系统默认为 "),s("code",[t._v("ALL")]),t._v("，表示不去重复。")])])]),t._v(" "),s("li",[s("code",[t._v("ORDER BY")]),t._v("：对结果集按指定列进行排序\n"),s("ul",[s("li",[s("code",[t._v("ASC")]),t._v(" 表示将结果按升序排序（默认) ；")]),t._v(" "),s("li",[s("code",[t._v("DESC")]),t._v(" 表示按降序排序。")])])]),t._v(" "),s("li",[s("code",[t._v("INTO")]),t._v("：将结果放入指定的新表（默认输出到屏幕）。")])]),t._v(" "),s("h4",{attrs:{id:"简单查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单查询"}},[t._v("#")]),t._v(" 简单查询")]),t._v(" "),s("p",[t._v("本节介绍单表查询，即数据源只涉及一张表的查询。")]),t._v(" "),s("h5",{attrs:{id:"select"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" SELECT")]),t._v(" "),s("p",[t._v("上面讲了 "),s("code",[t._v("SELECT *")]),t._v(" 可以查询所有列，如果用户只对一部分属性列感兴趣，可以使用：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Ddeptno\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n")])])]),s("p",[t._v("语句的效果是：从 "),s("code",[t._v("Doctor")]),t._v(" 表中取出一个元组，取出该元组在属性 "),s("code",[t._v("Dname")]),t._v("、属性 "),s("code",[t._v("Dno")]),t._v(" 和属性 "),s("code",[t._v("Ddeptno")]),t._v(" 上的分董值，形成一个新的元组输出。对 "),s("code",[t._v("Doctor")]),t._v(" 表中的其他元组做相同的处理。")]),t._v(" "),s("p",[t._v("注意，上面的语句输出的属性列是按照 "),s("code",[t._v("SELECT")]),t._v(" 后面内容的顺序，可以和原表不同。")]),t._v(" "),s("p",[t._v("如果想要去掉重复内容，可以使用 "),s("code",[t._v("DISTINCT")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" Ddeptno\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n")])])]),s("p",[t._v("如果想查询所有内容，就是前文的 "),s("code",[t._v("SELECT *")]),t._v(" 语法。")]),t._v(" "),s("p",[s("code",[t._v("SELECT")]),t._v(" 的内容，还可以是属性列的库函数运算表达式、属性列与常量之间的算术运算表达式。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询医生的姓名及年薪")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n")])])]),s("p",[t._v("以上计算的表达式的列不会有列标题。我们可以使用“别名”：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 结果的表头为 姓名 和 年薪，而非 Dname 和（空）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 年薪\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- AS 可省略，即上面的代码和下面等价：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dname 姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" 年薪\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n")])])]),s("p",[s("code",[t._v("AS")]),t._v(" 可省略（但为了代码的可读性，不推荐删除）。")]),t._v(" "),s("p",[t._v("如果省略了 "),s("code",[t._v("AS")]),t._v("，并且别名中有空格，需要给别名加引号。")]),t._v(" "),s("p",[t._v("表也可以有别名。但是当为表指定了别名时，在查询语句中的其他用到表名的地方都要使用别名，不能再使用原表名。")]),t._v(" "),s("h5",{attrs:{id:"where"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#where"}},[t._v("#")]),t._v(" WHERE")]),t._v(" "),s("p",[t._v("下面我们主要说 "),s("code",[t._v("WHERE")]),t._v(" 后的 "),s("code",[t._v("<行选择条件>")]),t._v("。")]),t._v(" "),s("ol",[s("li",[t._v("比较大小运算符（用 "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("θ")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\theta")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("θ")])])])])]),t._v(" 统称）有 "),s("code",[t._v(">")]),t._v(" "),s("code",[t._v("<")]),t._v(" "),s("code",[t._v("=")]),t._v(" "),s("code",[t._v("<>")]),t._v(" "),s("code",[t._v("!=")]),t._v(" "),s("code",[t._v(">=")]),t._v(" "),s("code",[t._v("<=")]),t._v("（其中 "),s("code",[t._v("!=")]),t._v(" 等价于 "),s("code",[t._v("<>")]),t._v("。MSSQL 还有非标准的 "),s("code",[t._v("!<")]),t._v(" "),s("code",[t._v(">!")]),t._v("，但也等价于 "),s("code",[t._v(">=")]),t._v(" 和 "),s("code",[t._v("<=")]),t._v("）。")],1)]),t._v(" "),s("p",[t._v("所有的 "),s("code",[t._v("<行选择条件>")]),t._v(" 还可以配合逻辑运算符 "),s("code",[t._v("AND")]),t._v(" "),s("code",[t._v("OR")]),t._v(" "),s("code",[t._v("NOT")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询男医生的信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dsex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询年龄在 40 岁以下的医生信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询年龄在 40 岁以下的男医生信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Dsex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("确定集合 "),s("code",[t._v("IN")]),t._v("。"),s("code",[t._v("IN")]),t._v(" 的含义是指当属性列的值与指定集合中的某一个常量相等时，结果为真。"),s("code",[t._v("NOTIN")]),t._v(" 含义正好相反。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询部门编号为 102, 103 和 201 的医生信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Ddeptno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'102'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'103'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'201'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 等价于 WHERE Ddeptno='102' OR Ddeptno='103' OR Ddeptno='201' */")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("确定范围 "),s("code",[t._v("BETWEEN ... AND")]),t._v("。其含义是当属性列的取值在上限值和下限值的范围内，结果为真。"),s("code",[t._v("NOT BETWEEN ... AND")]),t._v(" 含义正好相反。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询年龄在 35~40 岁之间的医生信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*等价于 WHERE Dage>=35 AND Dage<=40 */")]),t._v("\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("字符串比较。字符串比较可以用到以下运算符：")])]),t._v(" "),s("ul",[s("li",[t._v("直接使用 "),s("code",[t._v("=")]),t._v(" 来判断两个字符串完全相同；")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v(">")]),t._v(" "),s("code",[t._v("<")]),t._v(" 等比较运算符，比较的是其 ASCII 或 Unicode 码；")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("LIKE")]),t._v(" 关键字搭配通配符。SQL Server 提供了以下通配符：\n"),s("ul",[s("li",[s("code",[t._v("_")]),t._v(" 匹配任意一个字符")]),t._v(" "),s("li",[s("code",[t._v("%")]),t._v(" 匹配任意长的字符")]),t._v(" "),s("li",[s("code",[t._v("[]")]),t._v(" 匹配一定范围内的任何单个字符，如 "),s("code",[t._v("[abcdef]")]),t._v(" 或 "),s("code",[t._v("[a-f]")]),t._v(" 匹配 "),s("code",[t._v("a")]),t._v("、"),s("code",[t._v("b")]),t._v("……或 "),s("code",[t._v("f")]),t._v(" 字符")]),t._v(" "),s("li",[s("code",[t._v("[^]")]),t._v(" 匹配范围之外的字符")]),t._v(" "),s("li",[t._v("如果用户查询的字符传本身就含有 "),s("code",[t._v("%")]),t._v(" 等字符，要使用 "),s("code",[t._v("ESCAPE")]),t._v(" 对通配符进行转义。（SQL Server 默认为 "),s("code",[t._v("\\")]),t._v("，但也推荐显式地指定转义字符）")])])])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询副级职称的医生信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dlevel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'副％'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询姓“欧阳”且全名为三个汉字的医生的姓名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dname\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("  Dname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'欧阳_'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询包含 “葡萄糖_5%_150mL” 的药物")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Medicine\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Mname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%葡萄糖\\_5\\%\\_150mL%'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ESCAPE")]),t._v(" '\\'\n")])])]),s("p",[t._v("对于中文占几个字符的问题，在 SQL Server 2000 和 2019 版上，我得到了相同的测试结果：")]),t._v(" "),s("blockquote",[s("p",[t._v("对于 "),s("code",[t._v("CHAR")]),t._v(" "),s("code",[t._v("varchar")]),t._v(" "),s("code",[t._v("nvarchar")]),t._v(" 和 "),s("code",[t._v("text")]),t._v(" 类型，一个 "),s("code",[t._v("_")]),t._v(" 等价于一个汉字，即 "),s("code",[t._v("'欧阳_'")]),t._v(" 匹配欧阳开头的三个汉字；\n对于 "),s("code",[t._v("nchar")]),t._v("，结果有些出人意料，对于 "),s("code",[t._v("nchar(10)")]),t._v(" 类型的列，"),s("code",[t._v("欧阳________")]),t._v("（共八个下划线）才能匹配到欧阳开头的三个汉字，并且，同时也能匹配欧阳开头的四个汉字。")])]),t._v(" "),s("p",[t._v("对于后面这点，我没有继续深入下去，只是简单"),s("a",{attrs:{href:"https://stackoverflow.com/questions/612430/when-must-we-use-nvarchar-nchar-instead-of-varchar-char-in-sql-server?answertab=votes#tab-top",target:"_blank",rel:"noopener noreferrer"}},[t._v("搜索了一下"),s("OutboundLink")],1),t._v("，得到以下的结论：")]),t._v(" "),s("blockquote",[s("p",[t._v("如果会在一列中出现不同语言，一定要使用 "),s("code",[t._v("nvarchar")]),t._v("。")])]),t._v(" "),s("p",[t._v("对于纯中文，那就尽量使用 "),s("code",[t._v("nvarchar")]),t._v("，绝对不要使用 "),s("code",[t._v("nchar")]),t._v(" 吧。")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("空值 "),s("code",[t._v("NULL")]),t._v("。"),s("code",[t._v("NULL")]),t._v(" 在数据库表示不确定的值。空和非空语法格式分别为 "),s("code",[t._v("IS NULL")]),t._v(" 和 "),s("code",[t._v("IS NOT NULL")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询没有药品信息的处方")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeDetail\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Mno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n")])])]),s("h5",{attrs:{id:"order-by"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#order-by"}},[t._v("#")]),t._v(" ORDER BY")]),t._v(" "),s("p",[s("code",[t._v("ORDER BY")]),t._v(" 在输出的时候对元组进行排序。默认为升序 "),s("code",[t._v("ASC")]),t._v("（小的在前）。降序关键字为 "),s("code",[t._v("DESC")]),t._v("。")]),t._v(" "),s("p",[t._v("当排序列含空值时，若为按升序排序，排序列为空值的元组最后显示；若为按降序排序，排序列为空值的元组最先显示。也就是说，在排序中可以把 "),s("code",[t._v("NULL")]),t._v(" 理解成极大值。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询所有男医生的基本信息，按照年龄升序输出显示")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Dage\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询所有医生信息，按部门编号升序排序，相同元素按年龄降序排序显示")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Ddeptno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v("\n")])])]),s("h5",{attrs:{id:"top"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[t._v("#")]),t._v(" TOP")]),t._v(" "),s("p",[s("code",[t._v("TOP")]),t._v(" 的功能是：")]),t._v(" "),s("blockquote",[s("p",[t._v("使用 "),s("code",[t._v("SELECT")]),t._v(" 语句进行查询时，可能只希望列出结果集中的前儿个结果而不是全部结果。例如，"),s("br"),t._v("\n统计医生的年薪时只取薪水最高的前三名，这时就可以使用 "),s("code",[t._v("TOP")]),t._v(" 谓词限制输出的结果。")])]),t._v(" "),s("p",[s("code",[t._v("TOP")]),t._v(" 的语法如下：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TOP")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("percent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" TIES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("加上 "),s("code",[t._v("percent")]),t._v("，表示查询的是前 n%；加上 "),s("code",[t._v("WITH TIES")]),t._v("，表示包括并列的结果。")]),t._v(" "),s("p",[s("code",[t._v("TOP")]),t._v(" 放在 "),s("code",[t._v("SELECT")]),t._v(" 后，查询列表之前。如有 "),s("code",[t._v("DISTINCT")]),t._v("，则在 "),s("code",[t._v("DISTINCT")]),t._v(" 后。")]),t._v(" "),s("p",[s("code",[t._v("TOP")]),t._v(" 通常与 "),s("code",[t._v("ORDER BY")]),t._v(" 一起。如果不使用 "),s("code",[t._v("ORDER BY")]),t._v("，系统会按照主键进行排序。")]),t._v(" "),s("p",[t._v("值得注意的是，当使用 "),s("code",[t._v("WITH TIES")]),t._v(" 时，要求必须使用 "),s("code",[t._v("ORDER BY")]),t._v("。（请读者思考为什么？）")]),t._v(" "),s("p",[t._v("下面是两个例子：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询医院年龄最大的三名医生姓名，年龄。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TOP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询医院年龄最大的医生姓名，年龄。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TOP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" TIES Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v("\n")])])]),s("h5",{attrs:{id:"聚合函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数"}},[t._v("#")]),t._v(" 聚合函数")]),t._v(" "),s("p",[t._v("聚合函数（Aggregate Functions）又称统计函数、集合函数、聚类函数、聚集函数，是指把数据集进行统计、求和、求平均等汇总操作的函数。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 统计在岗医生人数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Diagnosis\n")])])]),s("p",[t._v("聚类函数的输出只有一行。如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("行数")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("青年医生人数")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("5")])])])]),t._v(" "),s("p",[t._v("常用的聚类函数有："),s("code",[t._v("count()")]),t._v("、"),s("code",[t._v("sum()")]),t._v("、"),s("code",[t._v("avg()")]),t._v("、"),s("code",[t._v("max()")]),t._v("、"),s("code",[t._v("min()")]),t._v("。")]),t._v(" "),s("p",[t._v("以上函数都可以在列名前添加 "),s("code",[t._v("DISTINCT")]),t._v(" 关键字，表示不计算重复分量值。")]),t._v(" "),s("h5",{attrs:{id:"group-by"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#group-by"}},[t._v("#")]),t._v(" GROUP BY")]),t._v(" "),s("p",[t._v("上面的查询结果都是整体或者整体的聚合函数，使用 "),s("code",[t._v("GROUP BY")]),t._v(" 函数可以将数据按分组输出、对每一组数据按照聚合函数进行统计输出。")]),t._v(" "),s("p",[t._v("根据 ISO 标准，若使用了 "),s("code",[t._v("GROUP BY")]),t._v(" 子句，"),s("code",[t._v("SELECT")]),t._v(" 目标列中的每一项在每一个组中都必须是单值的（相同），即 "),s("code",[t._v("SELECT")]),t._v(" 语句的查询目标列只能是： "),s("code",[t._v("GROUP BY")]),t._v(" 分组依据的列、聚集函数、常量，或前三种形式的组合。")]),t._v(" "),s("p",[t._v("以下代码不能运行：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" employer_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" department"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("salary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" employer_salary\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" department"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- employer_name 在同 department 下可能有不同值，因此是非单值的项")]),t._v("\n")])])]),s("p",[t._v("下面是按部门编号统计不同部门的医生人数的代码：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 按部门编号统计不同部门的医生人数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Ddeptno 部门编码"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 人数\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Ddeptno\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n** 1. SQL 先将医生按照他们所属的部门进行分组，这样就将所有的医生分为四组。\n**    在每一组中，所有的医生具有相同的部门编号。\n** 2. 对每一组，SQL 计算该组的人员个数。\n*/")]),t._v("\n")])])]),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" name\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" reviewer A\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" rating B\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rid\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" rid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),s("p",[s("code",[t._v("HAVING")]),t._v(" 和 "),s("code",[t._v("WHERE")]),t._v(" 的语法类似，但 "),s("code",[t._v("HAVING")]),t._v(" 是和 "),s("code",[t._v("GROUP BY")]),t._v(" 搭配使用的。在 "),s("code",[t._v("WHERE")]),t._v("、"),s("code",[t._v("GROUP BY")]),t._v("、"),s("code",[t._v("HAVING")]),t._v(" 同时出现时，代码的执行顺序如下：")]),t._v(" "),s("ol",[s("li",[t._v("按 "),s("code",[t._v("WHERE")]),t._v(" 子句找出满足条件的数据行；")]),t._v(" "),s("li",[t._v("按 "),s("code",[t._v("GROUP BY")]),t._v(" 子句指定的列，对经 "),s("code",[t._v("WHERE")]),t._v(" 子句筛选后的结果进行分组；")]),t._v(" "),s("li",[s("code",[t._v("HAVING")]),t._v(" 子句在 "),s("code",[t._v("GROUP BY")]),t._v(" 分组之后选择符合条件的分组结果。")])]),t._v(" "),s("p",[t._v("借助下面的例子能很好的理解这三者的关系。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 按部门统计男医生的平均年龄不超过 40 岁的部门编号，并按平均年龄升序显示")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Ddeptno 部门编号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 平均年龄\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Ddeptno\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"连接查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接查询"}},[t._v("#")]),t._v(" 连接查询")]),t._v(" "),s("blockquote",[s("p",[t._v("同时涉及多个关系表的查询称为连接查询。"),s("br"),t._v("\n用来连接两个表的条件称为连接条件或连接谓词。"),s("br"),t._v("\n多表间的连接运算遵循笛卡儿规则，但“笛卡儿”查询是无条件查询。这种连接操作会产生大量的无意义的数据记录。因此，在进行连接时加上一些限制条件，进行连接运算，这样产生的数据记录是笛卡儿连接结果集的子集。进行连接运算的表，必须存在着有某种关系的公共列，连接运算实际是比较各表的公共列值，如果满足条件的连接产生组合输出行。")])]),t._v(" "),s("h5",{attrs:{id:"连接操作的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接操作的实现"}},[t._v("#")]),t._v(" 连接操作的实现")]),t._v(" "),s("p",[t._v("连接操作的执行大致有三种方法：嵌套循环法，排序合并法和索引连接法。")]),t._v(" "),s("p",[t._v("下面简单介绍这三种方法的执行步骤。")]),t._v(" "),s("ol",[s("li",[t._v("循环嵌套法 (NESTED-LOOP)\n"),s("ol",[s("li",[t._v("在表 1 中找到第一个元组，然后从头开始扫描表 2，逐一查找满足连接条件的元组，找到后就将表 1 中的第一个元组与该元组拼接起来，形成结果表中一个元组。")]),t._v(" "),s("li",[t._v("对表 1 剩下的元组依次执行该操作，直到表 1 中的全部元组都处理完毕。")])])]),t._v(" "),s("li",[t._v("排序合并法 (SORT-MERGE)\n"),s("ol",[s("li",[t._v("按连接属性对表 1 和表 2 排序。")]),t._v(" "),s("li",[t._v("对表 1 的第一个元组，从头开始扫描表 2，顺序查找满足连接条件的元组，找到后就将表 1 中的第一个元组与该元组拼接起来，形成结果表中一个元组。当遇到表 2 中第一条大于表 1 连接字段值的元组时，对表 2 的查询不再继续。")]),t._v(" "),s("li",[t._v("找到表 1 的第二条元组，然后从刚才的中断点处继续顺序扫描表 2，查找满足连接条件的元组，查询的方法与上面类似。")]),t._v(" "),s("li",[t._v("重复上述操作，直到表 1 或表 2 中的全部元组都处理完毕为止。")])])]),t._v(" "),s("li",[t._v("索引连接法 (INDEX-JOIN)\n"),s("ol",[s("li",[t._v("对表 2 按连接字段建立索引。")]),t._v(" "),s("li",[t._v("对表 1 中的每个元组，依次根据其连接字段值查询表 2 的索引，从中找到满足条件的元组，找到后就将表 1 中的一个元组与该元组拼接起来，形成结果表中一个元组。")])])])]),t._v(" "),s("h5",{attrs:{id:"内连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内连接"}},[t._v("#")]),t._v(" 内连接")]),t._v(" "),s("p",[t._v("连接方式有内连接和外连接。内连接只在两个表中找出满足连接条件的结果并输出，而外连接会输出一张表的所有元组和另一张表满足连接条件的记录。相比而言，内连接更常用。")]),t._v(" "),s("p",[t._v("内连接的方式依旧是 "),s("code",[t._v("select-from-where")]),t._v("，只是需要指出列来自哪一张表。")]),t._v(" "),s("p",[t._v("自然连接分为等值连接（"),s("code",[t._v("WHERE")]),t._v(" 的条件是 "),s("code",[t._v("=")]),t._v("）和非等值连接（其他）。等值连接如下面四例："),s("s",[t._v("非等值连接咕咕咕了")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 内连接")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询每个处方的用药信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" RecipeDetail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeDetail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Medicine\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" RecipeDetail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mno\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询急诊内科医生的出诊信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dept\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v("\n       Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DdeptNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v("\n       Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'急诊内科'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 下例为自然连接")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询开出处方的医生信息。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Pno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Ddeptno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dlevel\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doctor D\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 当为表指定了别名时，在查询语句中的其他用到表名的地方都要使用别名，不能再使用原表名")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询急诊内科每位医生的出诊数量。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 出诊数量\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dept\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v("\n       Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Ddeptno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Deptno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v("\n       Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'急诊内科'")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dname\n")])])]),s("p",[t._v("自连接是一种特殊的内连接。")]),t._v(" "),s("blockquote",[s("p",[t._v("它是指相互连接的表在物理上为同一张表，但可以在逻辑上分为两张表。使用自连接时必须为两个表取别名，使之在逻辑上成为两张表。可以把自连接理解为同一张表（或视图）的两个副本之间的连接，使用不同别名来区别副本，处理过程与不同表之间的连接相同。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在医院部门表中，需要医院的各部门名称和上级部门名称")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptName 部门名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptName 上级部门\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dept "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" B\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ParentDeptNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptNo\n")])])]),s("h5",{attrs:{id:"外连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外连接"}},[t._v("#")]),t._v(" 外连接")]),t._v(" "),s("p",[t._v("外连接在前面简单说过了，就是输出表 1，和两张表的连接情况。下面是书上的详细介绍：")]),t._v(" "),s("blockquote",[s("p",[t._v("内连接操作只从两个表中找出满足连接条件记录的结果输出。"),s("br"),t._v("\n在某些应用中，我们也希望输出那些不满足连接条件的元组的信息。比如查看全部医生所属的部门信息，包括暂时没有医生的部门情况。\n如果用内连接实现，则只能找出有医生的部门信息，对不满足关系表 "),s("code",[t._v("Doctor.DdeptNo=Dept.DeptNo")]),t._v(" 条件的元组是查找不出来的。\n这种情况就需要用外连接来实现。即两张表的连接查询，要输出一张表的所有元组，另外一张表输出满足连接条件的记录。如果没有满足条件的元组，则用 "),s("code",[t._v("NULL")]),t._v(" 匹配输出。\n我们称这种连接查询为外连接，是其他连接方式的扩展。")])]),t._v(" "),s("p",[t._v("SQL SERVER数据库系统的命令格式如下："),s("s",[t._v("看不懂预警")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("查询列表"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("新表名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("基表"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("视图"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 别名"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    {"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("}\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("基表"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("视图"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 别名"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("连接条件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("我们现在只需要关注第四行：")]),t._v(" "),s("blockquote",[s("p",[t._v("其中，"),s("code",[t._v("LEFT OUTER JOIN")]),t._v(" 表示左外连，输出左表的所有记录相关列值；右表输出与左表匹配的记录（如果没有与左表匹配的记录，则使用 "),s("code",[t._v("NULL")]),t._v(" 匹配输出）；"),s("br"),t._v(" "),s("code",[t._v("RIGHT OUTER JOIN")]),t._v(" 表示右外连，输出右表的所有记录相关列值；左表输出与右表匹配的记录（如果没有与右表匹配的记录，则使用 "),s("code",[t._v("NULL")]),t._v(" 匹配输出）；\n"),s("code",[t._v("FULL OUTER JOIN")]),t._v(" 表示全外连接，是左外连接与右外连接所产生结果的并集。")])]),t._v(" "),s("p",[t._v("下面是外连接的例子：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在医院部门表中，查询医院的各部门名称和该部门医生姓名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DeptName 部门名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DName 医生姓名\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Doctor\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Ddep1no\n")])])]),s("p",[t._v("上面这个例子的输出如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("行号")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("部门名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("医生姓名")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("XX 医院")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("门诊部")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("消化内科")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("杨财")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("急诊内科")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("郝亦伟")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("急诊内科")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("罗晓")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("门内三诊室")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("刘伟")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("社区医疗部")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("NULL")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("家庭病床病区")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("邓英超")])])])]),t._v(" "),s("p",[t._v("内连接能方便的实现这样的功能吗？如果只使用上面介绍的内连接，只会输出存在医生的部门，而不会输出医生为 "),s("code",[t._v("NULL")]),t._v(" 的部门。"),s("br"),t._v("\n如果使用右外连，可能有医生的部门名称会出现 "),s("code",[t._v("NULL")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"嵌套查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#嵌套查询"}},[t._v("#")]),t._v(" 嵌套查询")]),t._v(" "),s("p",[t._v("SQL 支持嵌套查询。那么，在哪里可以嵌套呢？")]),t._v(" "),s("p",[t._v("可以在 "),s("code",[t._v("WHERE")]),t._v(" 和 "),s("code",[t._v("FROM")]),t._v(" 的地方进行嵌套。")]),t._v(" "),s("p",[t._v("来看一个 "),s("code",[t._v("WHERE")]),t._v(" 嵌套的例子：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询与医生刘伟有诊断关系患者姓名。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Pname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Patient\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Pno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘伟'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("外层的查询被称为主查询（或父查询），内层的 "),s("code",[t._v("SELECT")]),t._v(" 查询子句被称为子查询。子查询还允许嵌套子查询，但最多嵌套 255 层。")]),t._v(" "),s("p",[t._v("该查询的执行顺序如下：")]),t._v(" "),s("ol",[s("li",[t._v("首先执行 "),s("code",[t._v("SELECT Ono FROM Doctor WHERE Dname='刘伟'")]),t._v("，返回 "),s("code",[t._v("21")]),t._v("；")]),t._v(" "),s("li",[t._v("然后执行 "),s("code",[t._v("SELECT Pno FROM RecipeMaster WHERE Ono ='21'")]),t._v("，返回"),s("code",[t._v("201")]),t._v("；")]),t._v(" "),s("li",[t._v("最后执行 "),s("code",[t._v("SELECT Pname FROM Patient WHERE Pno IN('201')")]),t._v("，返回查询结果。")])]),t._v(" "),s("p",[t._v("注意该查询的写法。当医院有且仅有一个名字叫刘伟的医生时，该查询才能正确运行；如果有多个或者没有名字叫刘伟的医生，该查询将会出错。"),s("br"),t._v("\n主要原因是比较运算符 "),s("code",[t._v("=")]),t._v("、"),s("code",[t._v("<>")]),t._v("、"),s("code",[t._v("<")]),t._v("、"),s("code",[t._v("<=")]),t._v("、"),s("code",[t._v(">")]),t._v("、"),s("code",[t._v(">=")]),t._v(" 只能与返回单值的子查询相连。所以，建议这些运算符最好不要与子查询连接使用，最好用 "),s("code",[t._v("IN")]),t._v("、"),s("code",[t._v("NOTIN")]),t._v("、"),s("code",[t._v("ANY")]),t._v("、"),s("code",[t._v("ALL")]),t._v("、"),s("code",[t._v("EXISTS")]),t._v("、"),s("code",[t._v("NOT EXISTS")]),t._v(" 等比较运算符代替。")]),t._v(" "),s("h5",{attrs:{id:"in"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in"}},[t._v("#")]),t._v(" IN")]),t._v(" "),s("p",[s("code",[t._v("IN")]),t._v(" 在 "),s("a",{attrs:{href:"#where"}},[t._v("WHERE")]),t._v(" 部分已经提到过了，这里仅放一下配合嵌套查询的语法：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询所开处方不包含药品“胃立康片”的医生姓名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dname\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" \n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Rno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Rno\n                  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeDetail\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Mno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Mno\n                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Medicine\n                         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Mname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'胃立康片'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h5",{attrs:{id:"any-all"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#any-all"}},[t._v("#")]),t._v(" ANY ALL")]),t._v(" "),s("p",[t._v("上面的 "),s("code",[t._v("IN")]),t._v(" 是查询子表有没有这个分量值，而 "),s("code",[t._v("ANY")]),t._v(" 做的事情是配合比较运算符，查询子表中是否有值满足这个比较式。"),s("code",[t._v("ALL")]),t._v(" 则配合比较运算符，查询子表中是否所有值都满足这个比较式。")]),t._v(" "),s("p",[s("code",[t._v("ALL")]),t._v(" 关键字可省略。（顺便，"),s("code",[t._v("SELECT")]),t._v(" 后的 "),s("code",[t._v("ALL")]),t._v(" 也可以省略）")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询小于任何男医生年龄的女医生姓名和年龄")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 年龄\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dsex＝"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ALL 可省略")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dage\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h5",{attrs:{id:"exists"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exists"}},[t._v("#")]),t._v(" EXISTS")]),t._v(" "),s("p",[t._v("嵌套查询中，还可用 "),s("code",[t._v("EXISTS")]),t._v(" 运算符与相关子查询相连。其形式如下：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("子查询"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("带 "),s("code",[t._v("EXISTS")]),t._v(" 谓词的子查询不返回查询的数据，只产生逻辑真值和逻辑假值。"),s("br"),t._v("\n基本思想为：如果 "),s("code",[t._v("EXISTS")]),t._v(" 运算符限定的子查询有查询记录返回，那么该条件为真，否则为假。"),s("code",[t._v("NOT EXISTS")]),t._v(" 则反之。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用相关查询")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询给姓名为“刘景”的患者开过处方的医生。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 医生编号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsex "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 性别"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       age "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 年龄"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dlevel "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 职称\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Patient\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Patient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘景'")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Patient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("该查询还可以使用如下的不相关子查询：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用不相关查询")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询给姓名为“刘景”的患者开过处方的医生。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 医生编号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsex "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 性别"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       age "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 年龄"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dlevel "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 职称\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Pno\n                  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Patient\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Patient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘景'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("除此之外，还可以用连接查询。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用连接查询")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询给姓名为“刘景”的患者开过处方的医生。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 医生编号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dsex "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 性别"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 年龄"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dlevel "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 职称\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RecipeMaster "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Patient "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" P\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Pname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘景'")]),t._v("\n")])])]),s("p",[t._v("这说明同一个查询可以有多种实现方式。")]),t._v(" "),s("p",[t._v("由于查询优化器可以对多表连接查询进行更多的优化，总体上来说，"),s("strong",[t._v("多表连接查询")]),t._v("的执行效率会高于子查询的执行效率。")]),t._v(" "),s("h5",{attrs:{id:"from-嵌套"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from-嵌套"}},[t._v("#")]),t._v(" FROM 嵌套")]),t._v(" "),s("p",[t._v("上面一例还可以使用 "),s("code",[t._v("FROM")]),t._v(" 嵌套。"),s("s",[t._v("有完没完啦")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用连接查询和 FROM 嵌套")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询给姓名为“刘景”的患者开过处方的医生。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 医生编号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dsex "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 性别"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 年龄"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dlevel "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 职称\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Patient\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Patient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno\n           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Patient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘景'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" R\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n")])])]),s("p",[t._v("注意，由于 "),s("code",[t._v("FROM")]),t._v(" 嵌套子查询的结果没有名字，必须给它取一个别名。")]),t._v(" "),s("h4",{attrs:{id:"集合查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合查询"}},[t._v("#")]),t._v(" 集合查询")]),t._v(" "),s("blockquote",[s("p",[t._v("在关系代数中可以用集合操作的并、交、差来组合关系。在查询结果上， SQL 提供了对应的操作，条件是这些查询结果提供的关系具有相同的属性和属性类型列表。保留字 "),s("code",[t._v("UNION")]),t._v("、"),s("code",[t._v("INTERSECT")]),t._v("、"),s("code",[t._v("EXCEPT")]),t._v(" 分别对应关系代数中的并、交和差运算符。\n进行集合查询连接多个 "),s("code",[t._v("SELECT")]),t._v(" 语句时，只能在最后 "),s("code",[t._v("SELECT")]),t._v(" 查询表达式之后指定 "),s("code",[t._v("ORDER BY")]),t._v(" 子句，决定查询记录的输出顺序。但 "),s("code",[t._v("ORDER BY")]),t._v(" 子句后面不能引用列名，仅能引用相应列在查询列表中的顺序号。")])]),t._v(" "),s("p",[t._v("算了直接看例子吧。")]),t._v(" "),s("blockquote",[s("p",[t._v("在医院数据库中，为了提高系统处理效率，要定期对患者的诊断信息归档。假定患者诊断归档信息表为 DiagnosisBak, 如果医生要查询患者“刘景”的近期和历史诊断信息，以便分析患者的病因。其查询语句如下：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DGno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 诊断号"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 医生姓名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Symptom "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 症状"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Diagnosis "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 诊断"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DiagDateTime "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 时间\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" DiagnosisBak "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" DiagB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Patient P\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DiagB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DiaB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘景'")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DGno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Symptom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DiagDateTime\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Diagnosis "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Patient "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" P\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DiaB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'刘景'")]),t._v("\n")])])]),s("h3",{attrs:{id:"数据插入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据插入"}},[t._v("#")]),t._v(" 数据插入")]),t._v(" "),s("h4",{attrs:{id:"插入元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入元组"}},[t._v("#")]),t._v(" 插入元组")]),t._v(" "),s("p",[t._v("也就是一行一行地插入。使用 "),s("code",[t._v("insert-into-values")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DDeptNO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dlevel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'145'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'王军'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'101'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'医师'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("可以省略表名 "),s("code",[t._v("Doctor")]),t._v("，表示向目标表所有列插入数据；")]),t._v(" "),s("li",[t._v("可以省略列名 "),s("code",[t._v("(Dno,Dname,Dsex,Dage,DDeptNO,Dlevel)")]),t._v("，但 VALUE 就必须按照默认的顺序；使用列名，可以交换顺序；")]),t._v(" "),s("li",[t._v("对于省略部分列名的情况，对应列使用默认值，或 "),s("code",[t._v("NULL")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Doctor\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'145'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'王军'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'101'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'医师'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"插入子查询的结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入子查询的结果"}},[t._v("#")]),t._v(" 插入子查询的结果")]),t._v(" "),s("p",[t._v("用 "),s("code",[t._v("insert-into-select")]),t._v("，把查询内容直接插到另一个表。不求两个表列名相同，只求长度、对于位置的数据类型兼容。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 统计每个医生每天诊断的患者数量，并把结果存入数据库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" DiagNum "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DiagDate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PatientNum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rdatetime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DGno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rdatetime\n")])])]),s("h3",{attrs:{id:"数据修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据修改"}},[t._v("#")]),t._v(" 数据修改")]),t._v(" "),s("p",[t._v("如果某些数据发生了变化，就需要对表中已有的数据进行修改。")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("update-set-where")]),t._v(" 语句对数据进行修改，其语句的一般格式为：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("基表名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("…\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("条件表达式"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("其功能就是修改指定表中满足 "),s("code",[t._v("WHERE")]),t._v(" 子句条件的元组，将这些元组在 "),s("code",[t._v("SET")]),t._v(" 子句给出的属性列分量值用 "),s("code",[t._v("<表达式>")]),t._v(" 的值取代。")]),t._v(" "),s("p",[t._v("如果省略 "),s("code",[t._v("WHERE")]),t._v(" 子句，则表示要修改表中所有元组（称作无条件修改）。")]),t._v(" "),s("p",[s("code",[t._v("UPDATE")]),t._v(" 语句中 "),s("code",[t._v("WHERE")]),t._v(" 子句的作用和写法同 "),s("code",[t._v("SELECT")]),t._v(" 语句中的 "),s("code",[t._v("WHERE")]),t._v(" 子句一样。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 无条件修改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 将所有医生的年龄增加 1 岁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" Doctor\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 修改某一元组的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 将编号为 '423' 的患者的社会保险号，修改为 '20073425'。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" Patient\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" Pino "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'20073425'")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'423'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 带子查询的修改语句")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 将门诊部所有医生的工资上浮 10%")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" Doctor\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Ddeptno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DeptNo\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DeptName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'门诊部'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"数据删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据删除"}},[t._v("#")]),t._v(" 数据删除")]),t._v(" "),s("p",[t._v("当确定不再需要某些元组时，可以使用删除语句 "),s("code",[t._v("DELETE")]),t._v("。删除语句的一般格式为：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("即表明"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("行选择条件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("其功能是从指定表中删除满足 "),s("code",[t._v("WHERE")]),t._v(" 子句条件的所有元组。")]),t._v(" "),s("p",[t._v("如果省略 "),s("code",[t._v("WHERE")]),t._v(" 子句，则表示删除表中所有元组，但表的定义仍在字典中。也就是说，"),s("code",[t._v("DELETE")]),t._v("语句删除的是表中的数据，而不是关于表的定义。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除所有医生的记录")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 这条 DELETE 语句删除了 Doctor 表中的所有元组，使 Doctor 表成为空表")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除某一个元组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 将编号为 '423' 的患者从系统中删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Patient\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'423'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 将门诊部所有医生的信息删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Ddeptno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DeptNo\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DeptName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'门诊部'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[t._v("#")]),t._v(" 视图")]),t._v(" "),s("p",[t._v("在数据库的基本概念中降到数据库的三层模式结构（外模式、模式、内模式）。而外模式对应到数据库中的概念就是视图。")]),t._v(" "),s("blockquote",[s("p",[t._v("视图是一种特殊类型的表。它是从一个或多个基表（或视图）导出的表，是基本表的部分行或列数据的组合。\n视图可定义在一个或多个基表上，或者其他视图上。\n视图本身并不存储任何数据，只提供了一种访问基表中数据的方法。\n可以简单地认为视图是一个逻辑虚表。\n数据库中只存放视图的定义，而不存放视图包含的数据。当基本表中的数据发生变化后，从视图查询出的数据也会随之变化。从这个意义上说，视图就像一个窗口，用户透过它可以看到自己感兴趣的数据。"),s("br"),t._v("\n当视图建立后，用户可以像基表一样对视图进行数据查询，在某些特殊情况下，还可以对视图进行修改和插入操作。")])]),t._v(" "),s("h3",{attrs:{id:"视图的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视图的定义"}},[t._v("#")]),t._v(" 视图的定义")]),t._v(" "),s("p",[t._v("定义视图的 SQL 语句是 "),s("code",[t._v("CREATE VIEW")]),t._v("，其一般格式为：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("视图名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ［ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("视图列名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ］\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("子查询"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPTION")]),t._v(" J\n")])])]),s("p",[t._v("（一千行纪念！）")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("视图列名")]),t._v("可以省略，如果省略了，则视图的列名由查询语句中查询结果显示的列名组成。但下列三种情况下必须明确指定 "),s("code",[t._v("视图列名")]),t._v("：\n"),s("ol",[s("li",[t._v("某个目标列不是单纯的属性名，而是聚集函数或列表达式")]),t._v(" "),s("li",[t._v("多表连接时选出几个同名列作为视图的字段")]),t._v(" "),s("li",[t._v("需要在视图中为某个列启用新的更合适的名字")])])]),t._v(" "),s("li",[t._v("若视图列表不省略，则属性列的个数应与子查询的目标列个数相一致。")]),t._v(" "),s("li",[t._v("视图不能为列指定数据类型和长度，而是默认为数据源的类型和长度。")]),t._v(" "),s("li",[s("code",[t._v("<子查询>")]),t._v(" 可以是任意的 "),s("code",[t._v("SELECT")]),t._v(" 语句，但不允许包含 "),s("code",[t._v("ORDER BY")]),t._v(" 子句和 "),s("code",[t._v("DISTINCT")]),t._v(" 短语。")]),t._v(" "),s("li",[s("code",[t._v("WITH CHECK OPTION")]),t._v(" 选项表示对视图进行更新操作（插入、修改和删除）时会进行检查，要保证插入、修改和删除的行满足视图定义中 "),s("code",[t._v("<子查询>")]),t._v(" 的条件表达式。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 为消化内科诊断的患者信息建立一个视图")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" DiagView\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DGno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Pname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n              Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Symptom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DiagDateTime\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Diagnosis "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Patient "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" P\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DdeptNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" \n              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DeptNo\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DeptName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'消化内科'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("本例中省略了视图 "),s("code",[t._v("DiagView")]),t._v(" 的列名，隐含视图列名由子查询中SELECT 目标列组成。")]),t._v(" "),s("p",[t._v("RDBMS 执行 "),s("code",[t._v("CREATE VIEW")]),t._v(" 语句的结果只是把视图的定义存入数据字典，并不执行其中的 "),s("code",[t._v("SELECT")]),t._v(" 语句。\n只有对视图执行查询操作时，才按视图的定义从相应基本表中检索数据。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 为消化内科诊断的患者信息建立一个视图\n   要求进行修改和插入操作时仍需保证该视图只有消化内科的患者 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" DiagView\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DGno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Pname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n              Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Symptom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DiagDateTime\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Diagnosis "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Patient "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" P\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DdeptNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" \n              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DeptNo\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DeptName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'消化内科'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPTION")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 这意味着，以后对该视图进行修改、删除操作时\n   RDBMS 会自动加上 DeptName='消化内科' 的条件\n   若进行插入操作，RDBMS 自动检查插入医生的 DeptName 属性列的值是否为消化内科\n   如果不是则拒绝执行操作 */")]),t._v("\n")])])]),s("p",[t._v("视图不仅可以建立在基本表上，还可以建立在已定义好的视图上，或建立在基本表和视图之上。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 为消化内科 2007 年诊断的患者信息建立一个视图。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" DiagView_check_2007\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" DiagView_check\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DiagDateTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2007-1-1'")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" DiagDateTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2007-12-30'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 这里的视图 DiagView_check_2007 就是建立在视图 DiagView_check 之上的")]),t._v("\n")])])]),s("p",[t._v("定义视图时可以根据应用的需要设置一些派生属性列，这样的视图称为带表达式的视图。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 将消化内科医生的年薪建立一个视图")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" Doc_Deg_sal "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Salary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DdeptNo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DeptNo\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DeptName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'消化内科'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 视图中的 Salary 属性列的值通过计算得到")]),t._v("\n")])])]),s("p",[t._v("还可以用带有聚集函数和 "),s("code",[t._v("GROUP BY")]),t._v(" 子句的查询来定义视图，这种视图称为分组视图。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 定义视图反映各部门的医生人数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" Dept_num "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Deptno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dnumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Ddeptno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Ddeptno\n")])])]),s("p",[t._v("上面两例中，由于 "),s("code",[t._v("SELECT")]),t._v(" 语句中的目标列包含有表达式和聚集函数，且在查询语句中没有为这样的列指定别名，则在 "),s("code",[t._v("CREATE VIEW")]),t._v(" 中必须明确定义视图的各个属性列名。")]),t._v(" "),s("h3",{attrs:{id:"视图的删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视图的删除"}},[t._v("#")]),t._v(" 视图的删除")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("视图名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("CASCADE")]),t._v(" 级联删除语句，把该视图和它导出的所有视图一起删除。")]),t._v(" "),s("p",[t._v("若基本表被删除，由该基本表导出的所有视图仍存在，但已无法使用。删除这些视图需显式地使用 "),s("code",[t._v("DROP VIEW")]),t._v(" 语句。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除视图 DiagView_check")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" DiagView_check\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 由于 DiagView_check 视图还导出了 DiagView_check_2007 视图，\n   上述删除操作将被使 DiagView_check_2007 视图不能再使用\n   可以使用级联删除语句将两个视图都删除 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" DiagView_check "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),t._v("\n")])])]),s("h3",{attrs:{id:"视图的查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视图的查询"}},[t._v("#")]),t._v(" 视图的查询")]),t._v(" "),s("p",[t._v("视图的查询和"),s("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2"}},[t._v("基本表查询")]),t._v("完全一样。")]),t._v(" "),s("h3",{attrs:{id:"视图的更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视图的更新"}},[t._v("#")]),t._v(" 视图的更新")]),t._v(" "),s("p",[t._v("根据视图的定义，一个视图要么是只读的视图要么是可更新的视图。")]),t._v(" "),s("p",[t._v("对一个只读的视图就只能执行 "),s("code",[t._v("SELECT")]),t._v(" 语句。所有视图都至少是可读的。")]),t._v(" "),s("p",[t._v("对可更新的视图，用户就可以执行 "),s("code",[t._v("INSERT")]),t._v("、"),s("code",[t._v("UPDATE")]),t._v(" 或 "),s("code",[t._v("DELETE")]),t._v(" 操作。")]),t._v(" "),s("blockquote",[s("p",[t._v("这里提到的操作，均为对数据的更新操作，而不是 "),s("code",[t._v("DELETE VIEW")]),t._v(" 等对视图本身的操作。")])]),t._v(" "),s("p",[t._v("由于视图是不存储数据的虚表，数据是来自其他基表的部分数据，对视图的更新最终是对基表的更新。因此只能对特殊的视图进行更新。下面将介绍视图更新操作的限制条件。")]),t._v(" "),s("ol",[s("li",[t._v("只能对直接定义在一个基表上的视图进行插入、修改、删除等更新操作。")])]),t._v(" "),s("blockquote",[s("p",[t._v("对定义在"),s("strong",[t._v("多个基表或多个其他视图")]),t._v("之上的视图，数据库管理系统不允许进行更新操作。")])]),t._v(" "),s("p",[t._v("上面这一点其实有一点歧义。"),s("br"),t._v("\n首先肯定的是，SQL Server 不允许会影响多个基表的修改操作；"),s("br"),t._v("\n然而，如果修改操作不会影响到多个基表（举个例子，视图 V1 基于基表 T，视图 V2 为 V1 和 T 的连接的结果，则修改 V2 只会影响到基表 T），这种操作是允许的。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在医院数据库中，创建了医生与患者的诊断信息视图")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 该视图为不可修改视图")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" DiagView\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DGno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Pname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Symptom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DiagDateTime\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Diagnosis Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doctor Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Patient P\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Diag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pno\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("如果视图数据只来源于一个基表，但 "),s("code",[t._v("SELECT")]),t._v(" 语句含有 "),s("code",[t._v("GROUP BY")]),t._v("、"),s("code",[t._v("DISTINCT")]),t._v(" 或聚集函数等，除可执行删除操作外，不能进行插入或修改操作。")])]),t._v(" "),s("p",[t._v("这个操作感觉从逻辑上说没有问题，可能会在数据库的实现上可能导致效率低下。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在医院数据库中，统计每位医生每天诊断工作量，建立如下视图")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 该视图除可执行删除操作外，不能进行插入或修改操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" DiagNum "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DiagDate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PatientNum）\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rdatetime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DGno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" RecipeMaster\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rdatetime\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("如果视图中包含由表达式计算的列，则不允许进行更新操作。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在药品信息表中，为药品单价提高 15% 后建立药品价格视图")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 不能修改该视图中的药品单价")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" MedicineNewPrice "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Newprice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Munit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mtype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mprice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Munit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mtype\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Medicine\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Mprice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("如果视图满足上述 3 个条件，但该视图中没有包含基表的所有 "),s("code",[t._v("NOT NULL")]),t._v(" 列，则不能对该视图进行插入操作。")])]),t._v(" "),s("p",[t._v("原因是，对视图的插入实际是对基表的插入操作。"),s("br"),t._v("\n当视图没有包含基表的所有 "),s("code",[t._v("NOT NULL")]),t._v(" 列时，在向视图进行插入时（实际上是向基表插入），系统会默认认为，视图中没有包含的那些列的分量值为 "),s("code",[t._v("NULL")]),t._v("，这与基本定义中的 "),s("code",[t._v("NOT NULL")]),t._v(" 相矛盾。")]),t._v(" "),s("h3",{attrs:{id:"视图的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视图的作用"}},[t._v("#")]),t._v(" 视图的作用")]),t._v(" "),s("p",[s("s",[t._v("复制粘贴警告")])]),t._v(" "),s("p",[t._v("视图是定义在基本表之上的一个虚表，对视图的操作最终是对基本表的操作，且视图操作中有许多限制条件。这样看来视图似乎没有什么作用。但实际上，如果能合理地利用视图将带来许多好处。")]),t._v(" "),s("ol",[s("li",[t._v("视图能简化用户的操作")])]),t._v(" "),s("p",[t._v("当视图中数据不是直接来自基本表时，定义视图能够简化用户的操作。")]),t._v(" "),s("ul",[s("li",[t._v("基于多张表连接形成的视图")]),t._v(" "),s("li",[t._v("基于复杂嵌套查询的视图")]),t._v(" "),s("li",[t._v("含导出属性的视图")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("视图对重构数据库提供一定程度的逻辑独立性")])]),t._v(" "),s("p",[t._v("当我们重构数据库时会改变数据库的逻辑结构，如增加新的关系或改变原有关系的属性列等。要保证数据的逻辑独立性，使用户的应用程序不受影响，就要使用户的外模式保持不变。")]),t._v(" "),s("p",[t._v("视图是构建外模式的一种方式。")]),t._v(" "),s("p",[t._v("数据库重构最常见的方法是把基本表做“垂直“划分，将一个基本表分成多个基本表。例如将医生 "),s("code",[t._v("Doctor")]),t._v(" 关系表：")]),t._v(" "),s("p",[s("code",[t._v("Doctor(Dno,Dname,Dsex,Dage,Ddeptno,Dlevel,Dsalary)")])]),t._v(" "),s("p",[t._v("分为 "),s("code",[t._v("Doctor_x(Dno,Dname,Dsex,Dage)")]),t._v(" 和 "),s("code",[t._v("Doctor_y(Dno,Ddeptno,Dlevel,Dsalary)")]),t._v(" 两个关系。那么用户应用程序中原来对 "),s("code",[t._v("Doctor")]),t._v(" 关系的操作就要转换为对 "),s("code",[t._v("Doctor_x")]),t._v(" 和 "),s("code",[t._v("Doctor_y")]),t._v(" 的操作，修改麻烦。")]),t._v(" "),s("p",[t._v("这时可建立一个 "),s("code",[t._v("Doctor")]),t._v(" 视图：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VIEW")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Ddeptno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dlevel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsalary\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Doctor_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Ddeptno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dlevel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dsalary\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Doctor_y\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Doctor_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Doctor_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno\n")])])]),s("p",[t._v("这样应用程序就不必修改。")]),t._v(" "),s("p",[t._v("当然，视图只能在一定程度上提供数据的逻辑独立性。如果视图是不可更新的，则应用程序中修改数据的语句仍要随着基本表结构的改变而改变。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("视图为用户提供多个视角看待同一数据")])]),t._v(" "),s("li",[s("p",[t._v("提高数据的安全性")])])]),t._v(" "),s("p",[t._v("对不同用户定义不同视图，使得每个用户只能看到他有权看到的数据.")]),t._v(" "),s("p",[t._v("例如，医生关系中每个医生的薪水是保密的。就可以定义一个不包括薪水字段的视图供用户操作，不让用户直接操作基本表。这样，就在一定程度上提高了数据的安全性。")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("保证数据的完整性")])]),t._v(" "),s("p",[t._v("若在视图定义时使用了 "),s("code",[t._v("WITH CHECK OPTION")]),t._v(" 选项，那么 SQL 就能保证进入基本表中的元组都能满足 "),s("code",[t._v("WHERE")]),t._v(" 子句中给出的限定条件。")]),t._v(" "),s("h2",{attrs:{id:"索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),s("ul",[s("li",[t._v("建立索引是加快查询速度的有效手段")]),t._v(" "),s("li",[t._v("索引由 DBMS 内部实现，属于内模式范畴")]),t._v(" "),s("li",[t._v("建立索引\n"),s("ul",[s("li",[t._v("DBA或表的属主（即建立表的人）根据需要建立")]),t._v(" "),s("li",[t._v("有些 DBMS 自动建立以下列上的索引: "),s("code",[t._v("PRIMARY KEY")]),t._v(" 和 "),s("code",[t._v("UNIQUE")])])])]),t._v(" "),s("li",[t._v("维护索引\n"),s("ul",[s("li",[t._v("DBMS 自动完成")])])]),t._v(" "),s("li",[t._v("使用索引\n"),s("ul",[s("li",[t._v("DBMS自动选择是否使用索引以及使用哪些索引")])])])]),t._v(" "),s("h3",{attrs:{id:"索引的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引的分类"}},[t._v("#")]),t._v(" 索引的分类")]),t._v(" "),s("p",[t._v("根据索引与数据表的存储特点可以分为：聚簇索引、非聚簇索引和唯一索引。")]),t._v(" "),s("ol",[s("li",[t._v("聚簇索引")])]),t._v(" "),s("ul",[s("li",[t._v("建立聚簇索引后，基表中数据也需要按指定的聚簇属性值的升序或降序存放。也即聚簇索引的索引项顺序与表中记录的物理顺序一致")]),t._v(" "),s("li",[t._v("在一个基本表上最多只能建立一个聚簇索引")]),t._v(" "),s("li",[t._v("聚簇索引的用途：对于某些类型(范围查找)的查询，可以提高查询效率")]),t._v(" "),s("li",[t._v("聚簇索引的适用范围\n"),s("ul",[s("li",[t._v("很少对基表进行增删操作")]),t._v(" "),s("li",[t._v("很少对其中的变长列进行修改操作")])])])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" CLUSTER "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" Stusname\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Sname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",[s("li",[t._v("非聚簇索引")])]),t._v(" "),s("ul",[s("li",[t._v("数据存储在一个地方，索引存储在另一个地方，索引带有指针指向数据的存储位置。")]),t._v(" "),s("li",[t._v("索引中的项目按索引键值的顺序存储，而表中的信息按另一种顺序存储（也可以由聚簇索引规定）。")]),t._v(" "),s("li",[t._v("在搜索数据值时，先对非聚集索引进行搜索，找到数据值在表中的位置，然后从该位置直接检索数据。")]),t._v(" "),s("li",[t._v("由于索引包含描述查询所搜索的数据值在表中的精确位置的条目，这使非聚集索引成为精确匹配查询的最佳方法。")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("唯一索引")])]),t._v(" "),s("ul",[s("li",[t._v("唯一索引确保索引列不包含重复的值。在多列唯一索引的情况下，该索引可以确保索引列中每个值组合都是唯一的。")]),t._v(" "),s("li",[t._v("聚集索引和非聚集索引都可以是唯一的。因此，只要列中的数据是唯一的，就可以在同一个表上创建一个唯一的聚集索引和多个唯一的非聚集索引。")]),t._v(" "),s("li",[t._v("创建PRIMARY KEY或UNIQUE约束会在表中指定的列上自动创建唯一索引。")]),t._v(" "),s("li",[t._v("在同一个列组合上创建唯一索引而不是非唯一索引可为查询优化器提供附加信息，所以最好创建唯一索引。")])]),t._v(" "),s("h3",{attrs:{id:"索引的原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引的原则"}},[t._v("#")]),t._v(" 索引的原则")]),t._v(" "),s("ol",[s("li",[t._v("选择数据量较大的表建立索引")])]),t._v(" "),s("p",[t._v("一般来说，对于数据量较大的表，数据库系统越有机会找到最短路径，索引越能更好地改善响应的时间，越能显示出优势。")]),t._v(" "),s("p",[t._v("索引对于列中的数据多而杂的列是特别有用。例如，在医院信息系统中，如果对患者诊断信息建立索引，速度提高的效果就比较明显。但是，不适宜在性别列上建立索引，因为有大量重复值，对其索引反而会降低查询速度。")]),t._v(" "),s("p",[t._v("对于数据量较小的表最好不要建立索引，因为对小表索引，速度提高不仅不明显，反而会增大系统的开销，除非有特殊需要，要建立唯一索引来加强唯一。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("建立索引的数量要适量（需要付出代价）")])]),t._v(" "),s("p",[t._v("尽管对一个基表可以建立多个索引，提高查询速度，但不宜建立太多的索引，最好不超过 3 个。")]),t._v(" "),s("ul",[s("li",[t._v("索引要占用磁盘空间")]),t._v(" "),s("li",[t._v("系统要维护索引结构，维护索引结构系统要花费一定的开销，尤其是经常要插入或删除的表，其维护索引结构的代价是很大的，因此建立索引会减慢插入、修改、删除的执行速度。")])]),t._v(" "),s("p",[t._v("用户应该在加快查询速度和降低更新速度之间作出权衡。对于一个仅用来查询的表来讲，建立多个索引是比较合适的，但对更新操作比较频繁的表来讲最好少建立一些索引。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("选择合适的时机建立索引")])]),t._v(" "),s("p",[t._v("通常，建立索引应选择在表中装入数据之后。如果先建立索引后装入数据，则每次插入一行数据都要对索引进行更新，这样会很浪费时间。")]),t._v(" "),s("p",[t._v("但是，如果要保证装入数据的唯一性，则只能以牺牲系统性能为代价，而在装入数据前建立唯一性索引。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("优先考虑主键列建立索引")])]),t._v(" "),s("p",[t._v("当主键包含多列时，最好把数据差异最多的列放在索引命令列表的首位。")]),t._v(" "),s("p",[t._v("如果各列数据种类相近，则最好把经常用到的列放在前面。")]),t._v(" "),s("p",[t._v("最好选择包含大量非重复值的列，如医生编号。")]),t._v(" "),s("p",[t._v("如果只有很少的非重复值，如性别只有男和女，最好不要使用索引查询，此时采用顺序扫描更为有效。")]),t._v(" "),s("h3",{attrs:{id:"索引的创建与删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引的创建与删除"}},[t._v("#")]),t._v(" 索引的创建与删除")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建单列索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在药品基本信息表中，在药品名称上，按照升序创建非聚簇索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NONCLUSTERED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" MedIndex\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建复合索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在处方详细信息表中，在处方编码和药品编码上，创建聚簇索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CLUSTERED")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" RDIndex\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeDetail "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建唯一索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 在医生基本信息表上，在医生编码上，创建唯一索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" DoctorIndex\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除 DoctorIndex 索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" DoctorIndex \n")])])]),s("h2",{attrs:{id:"完整性约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整性约束"}},[t._v("#")]),t._v(" 完整性约束")]),t._v(" "),s("p",[t._v("完整性约束是加在数据库模式上的一个具体条件，它规定什么样的数据能够存储到数据库系统中。")]),t._v(" "),s("p",[t._v("按照完整性约束条件作用的对象分：")]),t._v(" "),s("ul",[s("li",[t._v("类型约束")]),t._v(" "),s("li",[t._v("属性约束")]),t._v(" "),s("li",[t._v("关系变量约束")]),t._v(" "),s("li",[t._v("数据库约束")])]),t._v(" "),s("p",[t._v("按照完整性约束条件声明时的位置分：")]),t._v(" "),s("ul",[s("li",[t._v("列级约束")]),t._v(" "),s("li",[t._v("表级约束")])]),t._v(" "),s("p",[t._v("按状态分类")]),t._v(" "),s("ul",[s("li",[t._v("静态: 对静态对象的约束是反映数据库状态合理性的约束")]),t._v(" "),s("li",[t._v("动态: 对动态对象的约束是反映数据库状态变迁的约束，新旧值之间满足的约束")])]),t._v(" "),s("h3",{attrs:{id:"主键约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主键约束"}},[t._v("#")]),t._v(" 主键约束")]),t._v(" "),s("p",[t._v("分为以下三种写法：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--列级约束")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeMaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Rno       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    DGno      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Rdatetime "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATETIME")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--表级约束：单属性主键")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Mno    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Mname  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Mprice "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Munit  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Mtype  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--表级约束：多属性组合主键")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Rno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Mno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Mamount "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"unique-约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unique-约束"}},[t._v("#")]),t._v(" UNIQUE 约束")]),t._v(" "),s("p",[t._v("写法：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       DeptNo       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       DeptName     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       ParentDeptNo "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Manager      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("注意：")]),t._v(" "),s("ul",[s("li",[t._v("在一个关系中，"),s("code",[t._v("PRIMARY KEY")]),t._v(" 只有一个，而 "),s("code",[t._v("UNIQUE")]),t._v(" 可以声明多个；")]),t._v(" "),s("li",[s("code",[t._v("PRIMARY KEY")]),t._v(" 要求属性取值不能为 "),s("code",[t._v("NULL")]),t._v("，而 "),s("code",[t._v("UNIQUE")]),t._v(" 允许属性取空值，允许多个空值同时存在")])]),t._v(" "),s("h3",{attrs:{id:"not-null-约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#not-null-约束"}},[t._v("#")]),t._v(" NOT NULL 约束")]),t._v(" "),s("p",[t._v("写法：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Diagnosis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       DGno      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Pno       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dno       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Symptom   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Diagnosis "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       DGtime    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATETIME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Rfee      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"check-约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#check-约束"}},[t._v("#")]),t._v(" Check 约束")]),t._v(" "),s("p",[t._v("Check 约束即可自定义约束。")]),t._v(" "),s("p",[t._v("Check 表级约束：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Dno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dname   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dsex    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dage    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Ddeptno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dlevel  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dsalary "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dsex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" Dage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"fk-约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fk-约束"}},[t._v("#")]),t._v(" FK 约束")]),t._v(" "),s("p",[t._v("Foreign Key 的值必须为：")]),t._v(" "),s("ul",[s("li",[t._v("空值，或")]),t._v(" "),s("li",[t._v("等于对应某个 Primary Key 中某个主码值")])]),t._v(" "),s("p",[t._v("FK 列级约束：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Dno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dname   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dsex    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dage    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Ddeptno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DeptNo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dlevel  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dsalary "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("或表级约束：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Doctor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Dno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dname   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dsex    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dage    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Ddeptno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dlevel  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Dsalary "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DeptNo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"完整性策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整性策略"}},[t._v("#")]),t._v(" 完整性策略")]),t._v(" "),s("p",[t._v("即检查完整性，以及违反完整性时的操作。")]),t._v(" "),s("p",[t._v("违反完整性时，一般会有如下情况：")]),t._v(" "),s("ul",[s("li",[t._v("违反实体完整性规则、用户定义的完整性规则的操作，一般拒绝执行")]),t._v(" "),s("li",[t._v("违反参照完整性的操作，可以拒绝执行；或者接受这个操作，同时执行一些附加的操作，以保证数据库的状态正确")])]),t._v(" "),s("h4",{attrs:{id:"受限策略-restricted"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#受限策略-restricted"}},[t._v("#")]),t._v(" 受限策略（RESTRICTED）")]),t._v(" "),s("p",[t._v("当出现违背参照完整性规则的更新操作请求时，系统拒绝执行该操作。")]),t._v(" "),s("p",[t._v("这是系统的默认操作。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Rno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Mno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Mamount "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如上代码，如果删除了被上表引用的 Medicine.Mno 属性，则系统会阻止此次修改。")]),t._v(" "),s("h4",{attrs:{id:"置空策略-set-null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#置空策略-set-null"}},[t._v("#")]),t._v(" 置空策略（SET-NULL）")]),t._v(" "),s("p",[t._v("如果删除了被上表引用的 Medicine.Mno 属性，则对应的 RecipeDetail.Mno\n值将被置为 0。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Rno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Mno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Mamount "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"级联策略-cascade"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#级联策略-cascade"}},[t._v("#")]),t._v(" 级联策略（CASCADE）")]),t._v(" "),s("p",[t._v("不拒绝用户操作请求，而是连带处理参照数据。")]),t._v(" "),s("p",[t._v("如果删除/修改了被上表引用的 Medicine.Mno 属性，则对应的 RecipeDetail.Mno\n值所在行将被删除/修改。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Rno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Mno     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Mamount "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Medicine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"域约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#域约束"}},[t._v("#")]),t._v(" 域约束")]),t._v(" "),s("p",[t._v("看起来就是定义自己的数据类型，可以进行 "),s("code",[t._v("CHECK")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 定义域")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" DOMAIN SexVal "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--使用域")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Patient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Pno   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Pname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Psex  SexVal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 自己定义的域")]),t._v("\n       Page  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Pino  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Pid   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上述代码等价于如下代码：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Patient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       Pno   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Pname "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Psex  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Page  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Pino  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       Pid   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Psex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("但是使用域有统一约束、便于修改的好处。")]),t._v(" "),s("h3",{attrs:{id:"断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[t._v("#")]),t._v(" 断言")]),t._v(" "),s("p",[t._v("断言可以理解为全局范围的 "),s("code",[t._v("CHECK()")]),t._v("，相比于上述的 "),s("code",[t._v("CHECK()")]),t._v(" 只能在但表中。")]),t._v(" "),s("p",[t._v("但需要注意的是：")]),t._v(" "),s("ul",[s("li",[t._v("当创建断言时，系统要检测其有效性。如果断言有效，则以后只有不破坏断言的数据库修改才被允许。")]),t._v(" "),s("li",[t._v("如果断言比较复杂，则检测会带来相当大的开销。因此，使用断言应该特别小心。")])]),t._v(" "),s("p",[t._v("代码：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" ASSERTION salarycheck "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" x\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Dsalary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ANY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Dsalary\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Doctor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" y \n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Deptno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Deptno\n                     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Dno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Manager\n                           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Dept \n                          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Deptno "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Deptno\n                     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上述代码涉及了三层嵌套，大致含义是，"),s("code",[t._v("CHECK")]),t._v(" 不存在有医生（取自 "),s("code",[t._v("x")]),t._v(" 表）的薪水高于医生（取自 "),s("code",[t._v("y")]),t._v(" 表），其中二者同部门（"),s("code",[t._v("Dept")]),t._v("），且后者是前者部门的经理（"),s("code",[t._v("Manager")]),t._v("）。")]),t._v(" "),s("h3",{attrs:{id:"修改完整性约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改完整性约束"}},[t._v("#")]),t._v(" 修改完整性约束")]),t._v(" "),s("p",[t._v("任何时候都可以添加、修改、删除约束。")]),t._v(" "),s("p",[t._v("因此，为了对约束进行修改、删除，有必要对约束进行命名（虽然不命名也是能运行的，但是不推荐）。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除约束")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" pkRecipeDetailRnoMno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 增加约束")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" pkRecipeDetailRnoMno "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" RecipeDetail\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" fkRecipeDetailMnoMedicine "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Medicine "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Doctor\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" checkPsex "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Psex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" DOMAIN rfee "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" rfee_test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--删除断言")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" ASSERTION salarycheck"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"自主访问控制-dac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自主访问控制-dac"}},[t._v("#")]),t._v(" 自主访问控制（DAC）")]),t._v(" "),s("p",[t._v("需要考虑以下三个部分：")]),t._v(" "),s("ul",[s("li",[t._v("主体，如某张三用户")]),t._v(" "),s("li",[t._v("客体，如某张表，或某数据的所有表")]),t._v(" "),s("li",[t._v("控制策略，也就是权限，如 SELECT、UPDATE 权限等")])]),t._v(" "),s("p",[t._v("其中 SQL Server 的权限分为以下 15 种：")]),t._v(" "),s("ul",[s("li",[t._v("访问数据的权限：\n"),s("ul",[s("li",[s("code",[t._v("SELECT")]),t._v("（读取权限）：读数据，但不能修改数据")]),t._v(" "),s("li",[s("code",[t._v("INSERT")]),t._v("（插入权限）：插入新的数据，但不能修改已有数据")]),t._v(" "),s("li",[s("code",[t._v("UPDATE")]),t._v("（修改权限）：修改数据，但不能删除数据")]),t._v(" "),s("li",[s("code",[t._v("DELETE")]),t._v("（删除权限）：删除数据")])])]),t._v(" "),s("li",[t._v("修改数据库模式（SQL 92标准）的权限：\n"),s("ul",[s("li",[s("code",[t._v("INDEX")]),t._v("（索引权限）：建立或删除索引")]),t._v(" "),s("li",[s("code",[t._v("CREATE")]),t._v("（创建权限）：建立新的关系表")]),t._v(" "),s("li",[s("code",[t._v("ALTER")]),t._v("（修改权限）：对关系表中的属性进行增加、删除")]),t._v(" "),s("li",[s("code",[t._v("DROP")]),t._v("（删除权限）：删除关系表。")])])]),t._v(" "),s("li",[t._v("其它权限\n"),s("ul",[s("li",[s("code",[t._v("REFERENCE")]),t._v(" 权限：允许用户在建立关系的完整性约束中引用一个参照关系")]),t._v(" "),s("li",[s("code",[t._v("USAGE")]),t._v(" 权限：授权用户使用一个指定的域")]),t._v(" "),s("li",[s("code",[t._v("TRIGGER")]),t._v(" 权限：授权用户定义关系表中触发器的权利")]),t._v(" "),s("li",[s("code",[t._v("EXECUTE")]),t._v(" 权限：授予用户执行一个函数或过程的权利")]),t._v(" "),s("li",[s("code",[t._v("UNDER")]),t._v(" 权限：授权用户建立一给定类的子类")])])])]),t._v(" "),s("h3",{attrs:{id:"授权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#授权"}},[t._v("#")]),t._v(" 授权")]),t._v(" "),s("p",[t._v("授权，就是将对"),s("code",[t._v("客体")]),t._v("操作的"),s("code",[t._v("权限")]),t._v("授予"),s("code",[t._v("主体")]),t._v("。其语法如下：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" {"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("all")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("privileges")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("privilege{"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" privilege…"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("}}\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" tablename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("viewname\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PUBLIC")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("user_name{"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("user_name…}"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPTION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n")])])]),s("ul",[s("li",[s("code",[t._v("ALL PRIVILEGES")]),t._v(" ：所有权限的总称")]),t._v(" "),s("li",[t._v("数据对象可以是基本表，也可以是视图")]),t._v(" "),s("li",[t._v("用户名可以代表单一用户也可以代表一个角色（见后）")]),t._v(" "),s("li",[s("code",[t._v("PUBLIC")]),t._v(" 是所有数据库用户的总称")]),t._v(" "),s("li",[s("code",[t._v("WITH GRANT OPTION")]),t._v("：受权者可以将此权限转授给其他用户")]),t._v(" "),s("li",[t._v("一个用户如果是表的创建者，他就自动拥有了对所创建表的所有权利以及将该表权利授予其他用户的权利，而且不能取消")])]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeDetail "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" LiXia"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeMaster "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" LiXia "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPTION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mprice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Medicine "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" WangHao"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" REFERENCE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Medicine "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" ZhangYang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v("，"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeDetail "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" MengFan "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPTION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"收回权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#收回权限"}},[t._v("#")]),t._v(" 收回权限")]),t._v(" "),s("p",[t._v("格式：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REVOKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" {"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIVILEGES")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("privilege{"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" Privilege…"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("}}\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" tablename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("viewname\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PUBLIC")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("user_name{"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("user_name…}"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RESTRICT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REVOKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeDetail "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" LiXia"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REVOKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mprice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Medicine "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" WangHao"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REVOKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeMaster "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" LiXia"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("RESTRICT")]),t._v(" 和 "),s("code",[t._v("CASCADE")]),t._v(" 详细介绍可见 "),s("a",{attrs:{href:"#%E5%8F%97%E9%99%90%E7%AD%96%E7%95%A5%EF%BC%88RESTRICTED%EF%BC%89"}},[t._v("受限策略（RESTRICTED）")]),t._v(" 和 "),s("a",{attrs:{href:"#%E7%BA%A7%E8%81%94%E7%AD%96%E7%95%A5%EF%BC%88CASCADE%EF%BC%89"}},[t._v("级联策略（CASCADE）")]),t._v("。在权限部分也是类似的概念。")]),t._v(" "),s("p",[t._v("从一个用户那里收回权限可能导致其他用户也失去该权限。这一行为称为级联回收 "),s("code",[t._v("CASCADE")]),t._v("。在大多数数据库系统中，级联回收是默认行为。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 指定为受限策略")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REVOKE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeMaster "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" LiXia "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RESTRICT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#角色"}},[t._v("#")]),t._v(" 角色")]),t._v(" "),s("p",[t._v("对于角色有如下理解：")]),t._v(" "),s("ul",[s("li",[t._v("角色可以看作是一组操作的集合（“老师”这个角色可修改成绩表、修改名次表）；")]),t._v(" "),s("li",[t._v("角色是授权模板（可按“老师”的模板给张老师、王老师授权）")]),t._v(" "),s("li",[t._v("一个用户可经授权而拥有多个角色，一个角色也可有多个用户")])]),t._v(" "),s("p",[t._v("代码如下：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建角色")]),t._v("\nCRETAE ROLE Administrators"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 角色授权")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" RecipeMaster "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" Administrators"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 角色授予用户或其他角色")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" Administrators "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" LiXia"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" ROLE Manager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" Administrators "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" Manager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GRANT")]),t._v(" Manager "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" WangHao"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 角色 Manager 除具有直接赋予它的权限外，还继承了角色 Administrators 具有的权限。")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);