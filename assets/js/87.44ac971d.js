(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{503:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("参考 https://www.runoob.com/cplusplus/cpp-exceptions-handling.html")])]),t._v(" "),a("p",[t._v("C++ 自带的异常处理，可以用来处理 "),a("code",[t._v("除数为 0")]),t._v("、"),a("code",[t._v("加法溢出")]),t._v(" 等一些情况。虽然我们可以使用普通的 "),a("code",[t._v("if")]),t._v(" 来判断，但是也可以使用 C++ 提供的一些异常。")]),t._v(" "),a("p",[t._v("这样的好处，是用标准统一了异常处理，方便了一些操作，也“提高了代码的复用性”。")]),t._v(" "),a("h2",{attrs:{id:"三个关键字-try-throw-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三个关键字-try-throw-catch"}},[t._v("#")]),t._v(" 三个关键字：try throw catch")]),t._v(" "),a("p",[a("code",[t._v("try")]),t._v(" "),a("code",[t._v("catch")]),t._v(" "),a("code",[t._v("throw")]),t._v(" 是 C++ 为异常处理设定的关键字。从字面上来理解：")]),t._v(" "),a("ul",[a("li",[t._v("throw: 当问题出现时，程序会抛出 "),a("code",[t._v("throw")]),t._v(" 一个异常。")]),t._v(" "),a("li",[t._v("catch: 用于捕获 "),a("code",[t._v("catch")]),t._v(" 异常。")]),t._v(" "),a("li",[t._v("try: 尝试 "),a("code",[t._v("try")]),t._v(" 触发异常。它后面通常跟着一个或多个 "),a("code",[t._v("catch")]),t._v(" 块。")])]),t._v(" "),a("p",[t._v("从代码上来看：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// try 块")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果出错，就进行 throw")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ExceptionType e1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// catch 块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ExceptionType e2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// catch 块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"异常处理的机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理的机制"}},[t._v("#")]),t._v(" 异常处理的机制")]),t._v(" "),a("p",[t._v("看到这里可能还是一脸懵逼。我们需要 "),a("code",[t._v("throw")]),t._v(" 什么？"),a("code",[t._v("catch")]),t._v(" 什么？")]),t._v(" "),a("p",[t._v("我看到的教程中很少明确指出了这一点：C++ 中，我们"),a("strong",[t._v("需要 "),a("code",[t._v("throw")]),t._v(" 的是一个对象，在 "),a("code",[t._v("catch")]),t._v(" 中通过判断对象的类")]),t._v("来判断是否执行。")]),t._v(" "),a("p",[t._v("比如，我们在 "),a("code",[t._v("try")]),t._v(" 块中 "),a("code",[t._v("throw")]),t._v(" 了一个字符串 "),a("code",[t._v('"divided by zero"')]),t._v("，在 "),a("code",[t._v("catch")]),t._v(" 中，我们就需要判断是不是 "),a("code",[t._v("const char *")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"divided by zero"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" errorString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" errorString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("输入 "),a("code",[t._v("2 0")]),t._v(" 时，会输出 "),a("code",[t._v("divided by zero")]),t._v("，然而还是运行错误，执行到了 15 行 "),a("code",[t._v("a / b")]),t._v("。这说明：")]),t._v(" "),a("ul",[a("li",[t._v("异常被 catch 后，会跳过 try 剩下的语句，执行对应的 catch 代码块，然后按顺序向下继续执行 catch 代码块后的第一句。")])]),t._v(" "),a("p",[t._v("看到这里，你可能觉得这功能还是很蠢：当你想要 "),a("code",[t._v("catch")]),t._v(" 两种错误时，"),a("code",[t._v("throw")]),t._v(" 一个字符串是行不通的（因为 "),a("code",[t._v("catch")]),t._v(" 识别的是类型），这又怎么办呢？")]),t._v(" "),a("h2",{attrs:{id:"异常类和-c-标准异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常类和-c-标准异常"}},[t._v("#")]),t._v(" 异常类和 C++ 标准异常")]),t._v(" "),a("p",[t._v("上文说道，一个字符串不好用。于是：")]),t._v(" "),a("p",[t._v("C++ 提供了一个异常类 "),a("code",[t._v("std::exception")]),t._v("（定义在 "),a("code",[t._v("<exception>")]),t._v("），他是所有的异常的父类。")]),t._v(" "),a("p",[t._v("除了构造函数、复制构造函数、析构函数以外，他只有一个 "),a("code",[t._v("const char * what()")]),t._v(" 成员函数，还是个虚函数（简单的说，即父类声明、子类实现的函数）。这个函数是用来读取异常的字符串。")]),t._v(" "),a("p",[t._v("除此之外，C++ 还提供了 C++ 标准异常，定义在 "),a("code",[t._v("<stdexcept>")]),t._v(" 中，他们都是继承于 "),a("code",[t._v("std::exception")]),t._v(" 类。他们除了实现 "),a("code",[t._v("what()")]),t._v(" 以外，还在 "),a("code",[t._v("<exception>")]),t._v(" 上加了两个构造函数，参数分别为 "),a("code",[t._v("const string &")]),t._v(" 和 "),a("code",[t._v("const char *")]),t._v("。这就起到了传递字符串的效果：由字符串构造，由 "),a("code",[t._v("what()")]),t._v(" 输出字符串。")]),t._v(" "),a("p",[a("s",[t._v("这也是为什么这篇异常处理会被插上面向对象的标签")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2015/05/exceptions_in_cpp.png",alt:"C++ 标准异常"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://en.cppreference.com/w/cpp/error/exception",target:"_blank",rel:"noopener noreferrer"}},[t._v("cppreference"),a("OutboundLink")],1),t._v(" 上也提到了所有 C++ 标准异常。")]),t._v(" "),a("p",[t._v("既然有了异常类，那么传递一个对象，判断类的类型，就是水到渠成的想法了。")]),t._v(" "),a("h2",{attrs:{id:"定义新的异常类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义新的异常类"}},[t._v("#")]),t._v(" 定义新的异常类：")]),t._v(" "),a("p",[t._v("我们通过公有继承 "),a("code",[t._v("std::exception")]),t._v(" 来定义自己的 "),a("code",[t._v("MyException")]),t._v(" 类。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<exception>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("exception")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//what() 是异常类提供的一个公共方法，它已被所有子异常类重载。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("what")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C++ Exception"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyException"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyException caught"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("what")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("exception"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//其他的错误")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面的代码会返回如下的结果：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("MyException caught\nC"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" Exception\n")])])]),a("h2",{attrs:{id:"which-one-断言、异常处理和-return-false"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#which-one-断言、异常处理和-return-false"}},[t._v("#")]),t._v(" Which one: 断言、异常处理和 return false")]),t._v(" "),a("p",[t._v("当程序遇到预期可能的错误时，可以进行"),a("a",{attrs:{href:"../assert"}},[t._v("断言")]),t._v(" "),a("code",[t._v("assert")]),t._v("、异常处理和返回一个错误返回值表示执行错误。那么到底该选择哪个呢？")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/23669218",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎"),a("OutboundLink")],1),t._v("上有这个问题。结论基本是：")]),t._v(" "),a("ul",[a("li",[t._v("三个词可以分为两类：一类是 "),a("code",[t._v("assert")]),t._v("，另一类是异常处理和返回错误值。因为 "),a("code",[t._v("assert")]),t._v(" 应当是程序出了 bug 才会触发（程序应当“留下证据然后立即自爆”），另两个可能是用户输入了错误的内容触发的。应当修改错误或者引导用户进行正确输入。")]),t._v(" "),a("li",[t._v("针对采用return value 还是 exception，没有一定的结论。"),a("a",{attrs:{href:"https://stackoverflow.com/questions/99683/which-and-why-do-you-prefer-exceptions-or-return-codes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stack Overflow"),a("OutboundLink")],1),t._v(" 有一个针对这个问题的讨论，不过基本上没有结论，我比较喜欢的是抛出异常会强迫调用者处理，返回值则不会。无论那种，基本上都要有一堆的处理语句。"),a("a",{attrs:{href:"https://www.zhihu.com/question/23669218/answer/28175134",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"坑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#坑"}},[t._v("#")]),t._v(" 坑")]),t._v(" "),a("p",[t._v("这篇博客对异常处理讲的很草率"),a("s",[t._v("马上期末考试了没时间深究了啊啊啊啊")]),t._v("\n有空再更。")])])}),[],!1,null,null,null);s.default=e.exports}}]);