(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{499:function(e,t,v){"use strict";v.r(t);var _=v(3),a=Object(_.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("这篇博文本来是想在"),t("a",{attrs:{href:"https://uestc-msc.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("俱乐部"),t("OutboundLink")],1),e._v("博客写的，不过最近俱乐部博客正计划用 WordPress 重构，链接可能会失效，于是就放到个人博客了。")]),e._v(" "),t("p",[e._v("本文将简要介绍 Windows Subsystem for Linux、Ubuntu、Git 的配置及简单使用。")]),e._v(" "),t("h2",{attrs:{id:"为什么要学习-git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习-git"}},[e._v("#")]),e._v(" 为什么要学习 Git")]),e._v(" "),t("p",[e._v("Git 是什么？为什么要学习 Git？")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/cb1fc2ef186277050e48b76d580429774e3563302ca061e8aecf7609daf138c3.png",alt:"Git —— 维基百科"}})]),e._v(" "),t("p",[e._v("什么叫 "),t("strong",[e._v("分布式")]),e._v(" "),t("strong",[e._v("版本控制")]),e._v(" 软件？")]),e._v(" "),t("p",[e._v("什么是"),t("strong",[e._v("版本控制")]),e._v("？假设你正在写一个非常重要的程序，为了保险，你可能会对每天下班时的版本进行存档、备份；同时，由于你可能在一个基础版本 A 上尝试添加新功能，写到一半（称作版本 B）失败了，需要回到 A；但是过了几天你又发现 B 版本的代码有可以借鉴的部分，所以需要结合最新的版本和 B 的代码。如果不借助软件来进行管理，可能后果就是你创建了一堆 "),t("code",[e._v("程序-1.0")]),e._v(" "),t("code",[e._v("程序-2.0")]),e._v(" "),t("code",[e._v("程序-20201119")]),e._v(" "),t("code",[e._v("程序-新功能（失败了呜呜呜）")]),e._v(" "),t("code",[e._v("程序-定稿（修改版）-真定稿")]),e._v(" 文件夹。")]),e._v(" "),t("p",[e._v("更混乱的是，软件开发通常不是一个人，要是几个人的一堆版本混在一起，要进行管理就更混乱了。")]),e._v(" "),t("p",[e._v("于是，我们需要版本控制软件 "),t("code",[e._v("Version Control Software")]),e._v(" 来做这件事情。")]),e._v(" "),t("h3",{attrs:{id:"git-版本控制基本概念-提交和分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-版本控制基本概念-提交和分支"}},[e._v("#")]),e._v(" Git 版本控制基本概念：提交和分支")]),e._v(" "),t("p",[e._v("Git 做的事情，就是在项目文件夹中创建一个 "),t("code",[e._v(".git")]),e._v(" 文件夹，保存你的每一次提交 "),t("code",[e._v("commit")]),e._v("（"),t("code",[e._v("git")]),e._v(" 的版本管理以提交为单位）。")]),e._v(" "),t("p",[e._v("对于单人的项目，你随时可以进行一次提交 "),t("code",[e._v("git commit")]),e._v("，保存这个版本的代码，也可以回到之前的任意一次提交时的版本。这些都是以提交为基础，可见提交真的是 Git 最重要的概念。")]),e._v(" "),t("p",[e._v("对于多人项目，Git 引入了分支 "),t("code",[e._v("branch")]),e._v(" 的概念。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/507901ad15d4d4baf42025e8dfd5dda7d41708df6bcf68861f57cc8a80c3d66c.png",alt:"分支和提交（时间线为从左到右）"}})]),e._v(" "),t("p",[e._v("在 Git 图上，提交是每一个点（这个点保存了你提交时的代码版本），分支就是由点（提交）串起来的线。")]),e._v(" "),t("p",[e._v("上图的 Git 仓库中存在四个分支，正式版 "),t("code",[e._v("master")]),e._v("、开发版 "),t("code",[e._v("dev")]),e._v("、每个人的工作分支 "),t("code",[e._v("michael")]),e._v(" "),t("code",[e._v("bob")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("master")]),e._v(" 分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；")]),e._v(" "),t("p",[e._v("那在哪干活呢？Michael 和 Bob 都在自己的分支上干活，每个人都有自己的分支。每个人的开发分支都是从 "),t("code",[e._v("dev")]),e._v(" 分裂出来的；开发得差不多后，时不时地往 "),t("code",[e._v("dev")]),e._v(" 分支上合并 "),t("code",[e._v("merge")]),e._v(" 自己的代码。等到一个稳定的版本要发布时（如 "),t("code",[e._v("v1.0.0")]),e._v("），就把 "),t("code",[e._v("dev")]),e._v(" 的代码合并到 "),t("code",[e._v("master")]),e._v("。")]),e._v(" "),t("p",[e._v("即使是单人的项目也可以弄一堆分支出来，用于开发新功能什么的。当然，单人的项目一般不会有这么多分支，就是一条直线。比如，我的博客的分支图（由 VS Code 的 "),t("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git Graph 插件"),t("OutboundLink")],1),e._v("生成）如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/76a5e8c02e8ab89fded97a4be98f72a885c42799dc9b630455d19f410a595501.png",alt:"我的博客的分支图"}})]),e._v(" "),t("h3",{attrs:{id:"git-分布式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-分布式"}},[e._v("#")]),e._v(" Git 分布式")]),e._v(" "),t("p",[e._v("Git 为什么是"),t("strong",[e._v("分布式")]),e._v("的呢？")]),e._v(" "),t("p",[e._v("Git 每次是把远端（GitHub 或其他同类网站）的整个库克隆下来 "),t("code",[e._v("git clone")]),e._v("，提交是在本地创建一个新的点（提交），而上传到远端需要使用 "),t("code",[e._v("git push")]),e._v(" 进行推送。所以，Git 中本地和云端的内容是基本相同的，Git 库内容不仅存于云端，还分布在每个开发者的电脑上。")]),e._v(" "),t("p",[e._v("Git 远端的默认名为 "),t("code",[e._v("origin")]),e._v("，所以你可能会看到 "),t("code",[e._v("origin/master")]),e._v("，这指的是这个仓库在 GitHub（或同类网站）上的 "),t("code",[e._v("master")]),e._v(" 分支。")]),e._v(" "),t("p",[e._v("我们平时最好在提交之后，及时 "),t("code",[e._v("push")]),e._v(" 至 GitHub 上，这也是起了将代码备份到云端的效果（顺便一提，数据无价，备份很重要！！！！这学期我们班已经有三个人电脑挂了，要是没有备份，实验报告和论文就没了）。")]),e._v(" "),t("h2",{attrs:{id:"为什么要学习-wsl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习-wsl"}},[e._v("#")]),e._v(" 为什么要学习 WSL")]),e._v(" "),t("p",[e._v("Git 软件本身是跨平台的，为什么不直接在 Windows 上使用 Git，而是在 WSL 上使用 Git 呢？")]),e._v(" "),t("p",[e._v("我在 WSL 下使用 Git，最大的原因是 Linux 命令行的自动补全：")]),e._v(" "),t("p",[e._v("在 bash 或 zsh 等 shell 中输入 "),t("code",[e._v("git")]),e._v(" （"),t("code",[e._v("git")]),e._v(" 后有空格）然后按两次 "),t("code",[e._v("Tab")]),e._v("，它会提示接下来可能的命令；"),t("br"),e._v("\n输入 "),t("code",[e._v("git a")]),e._v(" 然后按两次 "),t("code",[e._v("Tab")]),e._v("，它会提示 "),t("code",[e._v("a")]),e._v(" 开头的可能命令；"),t("br"),e._v("\n如果输入 "),t("code",[e._v("git ad")]),e._v(" （此时 shell 已经能确定是 "),t("code",[e._v("git add")]),e._v(" 了）然后按一次 "),t("code",[e._v("Tab")]),e._v("，就会自动补全为 "),t("code",[e._v("git add")]),e._v("。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/d413abe15d467df1f5f00cdd657961db989a1fc1038d52dcd317d952aafaaec6.png",alt:"bash 自动补全"}})]),e._v(" "),t("p",[e._v("可以说，自动补全可以大幅降低萌新对命令行的学习成本，而这是 Windows 的 shell —— cmd 和 powershell 都不具备的（这两个只能补全文件名，不能补全命令）。所以，使用 CLI 工具时，我更提倡使用 WSL 作为基础。")]),e._v(" "),t("p",[e._v("当然，为了某些能集成 Windows 下 Git 的应用（如 VS Code、各大 IDE、Tortoise Git 这个第三方 Git GUI），我也在 Windows 下安装了 Git，不过，用 Git 命令行时，我也一直使用的是 WSL 下的 Git。")]),e._v(" "),t("p",[e._v("当然，如果你觉得安装一个 WSL 占空间、太麻烦、不必要，也可以跳过 WSL，体验 Windows 上的 Git。")]),e._v(" "),t("h2",{attrs:{id:"安利工具-visual-studio-code-和-windows-terminal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安利工具-visual-studio-code-和-windows-terminal"}},[e._v("#")]),e._v(" 安利工具 Visual Studio Code 和 Windows Terminal")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701",target:"_blank",rel:"noopener noreferrer"}},[e._v("Windows Terminal"),t("OutboundLink")],1),e._v(" 是微软（抬头看看俱乐部名）官方推出的终端应用程序（terminal，可以简单地理解是 cmd powershell bash 等 shell 的外壳），美观好看，且启动速度快。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/3a83589c578b423cfca5304bd6491b3ecb9a647d744a8325fec74a2ac3292fbb.png",alt:"前为 Windows Terminal，后为 Powershell"}})]),e._v(" "),t("p",[e._v("在这里安利 Windows Terminal 是因为后面将介绍的 WSL 和 Git 都是 CLI（命令行）的形式，因此一款高颜值的终端应用程序是很有必要的~")]),e._v(" "),t("p",[t("RouterLink",{attrs:{to:"/notes/microsoft/windows/windows-terminal-tips.html"}},[e._v("一些 Windows Terminal 使用小技巧")])],1),e._v(" "),t("p",[e._v("为安装了 Windows Terminal 的同学提供一个小练习：输入 cmd 可以启动命令提示符，那么输入什么（不超过三个字母）能启动 Windows Terminal 呢？你可以尝试自行百度 / Google，或自行寻找答案。")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("a",{attrs:{href:"https://code.visualstudio.com/download",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual Studio Code"),t("OutboundLink")],1),e._v(" 是微软（再次抬头看看俱乐部名）官方推出的一款很强大的文本编辑器（注意，不是 IDE），可以替代 Notepad++ 等同类软件，具有开源、集成 terminal、插件众多、UI 好看、开箱即用同时自定义程度高、能同步设置等优点。（最近写微信小程序，发现它的开发软件也是基于 VS Code 魔改的）")]),e._v(" "),t("p",[e._v("我就正在 Visual Studio Code 中编写这篇博客。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/1cb2ffa40bb46b70e96fa2457e8200a673b7941453f4187bac27eb129622b2b0.png",alt:"套娃警告"}})]),e._v(" "),t("p",[e._v("在这里安利 Visual Studio Code，是因为它装上"),t("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("插件"),t("OutboundLink")],1),e._v("以后，能和 WSL 无缝衔接，作为 WSL 的文本编辑器，不会使用 vim、nano 等命令行文本编辑器的同学就可以使用 VS Code 作为 WSL 的文本编辑器啦~")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/d6f24093e24939a3a414766f01fcf588ad5a6e3716257f643e1d4338c8b647e4.jpg",alt:"在 wsl 中输入 code <文件名> 即可启动 VS Code 编辑文本文件"}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.lyh543.cn/microsoft/vscode-tips/",target:"_blank",rel:"noopener noreferrer"}},[e._v("一些 Visual Studio Code 使用小技巧"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"windows-subsystem-for-linux-下载和安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#windows-subsystem-for-linux-下载和安装"}},[e._v("#")]),e._v(" Windows Subsystem for Linux 下载和安装")]),e._v(" "),t("p",[e._v("微软提供了"),t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方中文教程"),t("OutboundLink")],1),e._v("，我就不再赘述了。")]),e._v(" "),t("p",[e._v("对于 WSL1 和 WSL2 的选择，官方也提供了"),t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions",target:"_blank",rel:"noopener noreferrer"}},[e._v("对比文"),t("OutboundLink")],1),e._v("，由于我更常在 WSL 中使用 Git 和 Hexo 对 C 盘的文件进行操作，对“跨 OS 文件系统的性能”需求大，因此选择了 WSL1。")]),e._v(" "),t("p",[e._v("Linux 开发版的选择上，本文将以 Ubuntu 20.04 LTS 作示范。")]),e._v(" "),t("p",[e._v("由于下载安装比较费时间，请各位同学在沙龙开始之前完成 WSL 的安装。之后的部分将在沙龙上讲述，并且会在沙龙后进行更新~")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("img",{attrs:{src:"/images/2e441628373fba934c45ee1d54a41ce2e4ae4386edb0d0ec4238d4a2ac0482c5.png",alt:"开始菜单的 Ubuntu"}})]),e._v(" "),t("p",[e._v("下载完成后，点击开始菜单的 "),t("code",[e._v("Ubuntu")]),e._v(" 即可开始安装。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/6346f692639c4eac5a6dfea96c251f62642416c72ce385fbf954c6040c9ecc8e.png",alt:"安装过程"}})]),e._v(" "),t("p",[e._v("如果没有出现上面这个界面，而是显示 "),t("code",[e._v("0x80004003")]),e._v(" 或类似错误提示，请读者以 "),t("code",[e._v("WSL")]),e._v(" + 错误码作关键字进行搜索，或对照上文中提到的 WSL 官方中文教程。")]),e._v(" "),t("p",[e._v("然后就是初始化账号和密码，这和其他系统安装均类似。注意输入密码时，用户的输入并不会回显在屏幕上，这是为了安全考虑，还请读者不要见怪。")]),e._v(" "),t("p",[e._v("输入账号、密码、确认密码均正确后，即可进入系统，如下。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/51517ea344b0d9709e21e9986b4678ea1d8425af931535fac3160825f6337567.png",alt:"进入系统"}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('To run a command as administrator (user "root"), use "sudo <command>".\nSee "man sudo_root" for details.\n')])])]),t("p",[e._v("上面这行字表示，如果需要以管理员身份运行某些命令（如安装软件），需要在命令前加 "),t("code",[e._v("sudo")]),e._v("。这句的效果类似于 Windows 的用户账户控制，授予管理员权限才可以安装程序。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/44a63ad641ab77c3f36ca892566fb1629c29c30107280354659ec12a71eac961.png",alt:"Windows 用户账户控制"}})]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("如果配置的过程中关闭了初始化用户名和密码的窗口，会导致初始化用户失败，WSL 将以 root 身份（而不是定义的用户）运行。此时可以执行以下命令，卸载 WSL，然后点击开始菜单的 "),t("code",[e._v("Ubuntu")]),e._v(" 重新安装。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("wsl --unregister Ubuntu-20.04\n")])])]),t("p",[e._v("其中 "),t("code",[e._v("Ubuntu-20.04")]),e._v(" 根据发行版不同而不同，可在 cmd 下使用 "),t("code",[e._v("wsl -l")]),e._v(" 命令查询。")]),e._v(" "),t("h2",{attrs:{id:"ubuntu-安装软件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-安装软件"}},[e._v("#")]),e._v(" Ubuntu 安装软件")]),e._v(" "),t("p",[e._v("在 Windows 上，安装软件的方式一般是找到官网的下载页面，下载 exe 或 msi，然后运行。")]),e._v(" "),t("p",[e._v("也有如 360 软件管家这类软件管理工具。")]),e._v(" "),t("p",[e._v("在 Ubuntu 上，使用的是官方的软件管理程序 "),t("code",[e._v("apt")]),e._v("。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/54ba2105bdd95e5d4f48c65f38ecae6bc2da563efd6703b5892132a4f15e4f7f.png",alt:"apt"}})]),e._v(" "),t("p",[e._v("下载安装软件的命令为 "),t("code",[e._v("sudo apt install")]),e._v("。下文将演示使用 "),t("code",[e._v("apt")]),e._v(" 安装 "),t("code",[e._v("screenfetch")]),e._v("。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/1799901617264f9dfbbc64c0d201d8e60f166a23a36d4394d50731c04fa4359f.png",alt:"在 sudo apt update 之前 sudo apt install screenfetch"}})]),e._v(" "),t("p",[e._v("和 360 软件管家不同的是，apt 并不会自动在线获取软件的最新信息，而是将这些信息缓存在本地。我们刚完成系统安装，信息都还没有缓存，所以需要手动 "),t("code",[e._v("sudo apt update")]),e._v("。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/d42c25745d011eb17c708db6d3cd90d73ece7f921027b0ecdbd45cd2b95e9958.png",alt:"sudo apt update"}})]),e._v(" "),t("p",[e._v("接下来就是 "),t("code",[e._v("sudo apt install screenfetch")]),e._v(" 了。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/3f0fdefd4fcffb275ea31769da375da63942381c375f52b42e9de7b06514a8e7.png",alt:"sudo apt install screenfetch"}})]),e._v(" "),t("p",[e._v("安装前提示，需要下载 833 KB 文件，安装后占用 3040 KB 空间。输入 "),t("code",[e._v("y")]),e._v(" 继续下一步。然后就是一行行提示划过。到最后如果没有出现报错，即是安装完成。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/80eeccc893af282367ce26045d0a1895e346472912439bf48786e9dff564dd3e.png",alt:"安装完成"}})]),e._v(" "),t("p",[e._v("输入 "),t("code",[e._v("screenfetch")]),e._v(" 并回车，测试是否成功安装。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/b8eb6a86d6ac2d66376a09550baef889b82c2679d80c000cb47939974ea81a79.png",alt:"screenfetch"}})]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("请读者自行尝试：")]),e._v(" "),t("ol",[t("li",[e._v("没有 "),t("code",[e._v("sudo")]),e._v(" 时执行 "),t("code",[e._v("apt update")]),e._v(" 和 "),t("code",[e._v("apt install screenfetch")]),e._v(" 会发生什么。")]),e._v(" "),t("li",[e._v("本教程使用的是 Ubuntu 的官方源，可能会出现访问不畅、网速跑不满带宽等情况。于是出现了开源网站镜像站，我们也可以从镜像站获取相同的软件。著名的镜像站有"),t("a",{attrs:{href:"https://mirrors.tuna.tsinghua.edu.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("清华"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://mirrors.ustc.edu.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("中科大"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://developer.aliyun.com/mirror/",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云"),t("OutboundLink")],1),e._v("。我校也有"),t("a",{attrs:{href:"http://mirrors.uestc.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("镜像站"),t("OutboundLink")],1),e._v("，但暂只向校内用户提供访问。请读者尝试自行搜索并更换镜像站。")])]),e._v(" "),t("h2",{attrs:{id:"配置-git-个人信息和-ssh-秘钥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-git-个人信息和-ssh-秘钥"}},[e._v("#")]),e._v(" 配置 Git 个人信息和 SSH 秘钥")]),e._v(" "),t("p",[e._v("WSL Ubuntu 提供了 Git，因此不需要安装。")]),e._v(" "),t("p",[e._v("首先完成用户身份配置。请将下文的 "),t("code",[e._v("lyh543")]),e._v(" 和 "),t("code",[e._v("lyh543@outlook.com")]),e._v(" 替换为自己的用户名和邮箱。虽然这步设置并不影响访问权限等，但推荐设置，这样提交中会包含你的用户名和邮箱。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git config  --global user.name lyh543\ngit config  --global user.email lyh543@outlook.com\n")])])]),t("p",[e._v("配置好后，使用 "),t("code",[e._v("git config -l")]),e._v(" 可查看是否配置成功。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/3924375a151e9b852132d9e6be5a87173e55fcd6e05935de01152dc877298dbc.png",alt:"git config -l"}})]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("SSH 协议是 HTTPS 以外，访问 GitHub 的另一协议。")]),e._v(" "),t("p",[e._v("SSH 协议使用公钥、私钥认证，而不是使用密码认证。也就是说，使用 SSH 协议可以省去每次输密码的过程。")]),e._v(" "),t("p",[e._v("大概分为两步：")]),e._v(" "),t("ol",[t("li",[e._v("本地生成密钥对；")]),e._v(" "),t("li",[e._v("设置 GitHub 上的公钥；")])]),e._v(" "),t("p",[e._v("生成密钥对使用命令 "),t("code",[e._v("ssh-keygen")]),e._v("。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/5c9347b69c857b09b2f4b24d33d8f629da9076bb8b228a4fdf5e8812e884addb.png",alt:"ssh-keygen"}})]),e._v(" "),t("p",[e._v("生成过程的文件夹选择、密码均可以直接按回车，默认即可。")]),e._v(" "),t("p",[e._v("公钥 "),t("code",[e._v("public key")]),e._v(" 存储在 "),t("code",[e._v("/home/msc/.ssh/id_rsa.pub")]),e._v("，私钥 "),t("code",[e._v("private key")]),e._v(" 在 "),t("code",[e._v("/home/msc/.ssh/id_rsa")]),e._v("。")]),e._v(" "),t("p",[e._v("然后使用 "),t("code",[e._v("cat ~/.ssh/id_rsa.pub")]),e._v(" 查看你的公钥：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/2b304b21a2699e3cdc02ba8e6b3a3a33b589c51841137c34b454861080596a3c.png",alt:"cat ~/.ssh/id_rsa.pub"}})]),e._v(" "),t("p",[e._v("接下来就是将公钥存到 GitHub：")]),e._v(" "),t("ol",[t("li",[e._v("登陆你的 "),t("code",[e._v("github")]),e._v(" 帐户。然后 "),t("code",[e._v("Account Settings")]),e._v(" -> 左栏点击 "),t("code",[e._v("SSH Keys")]),e._v(" -> 点击 "),t("code",[e._v("Add SSH key")])]),e._v(" "),t("li",[e._v("然后你复制上面的公钥内容，粘贴进“Key”文本域内。 "),t("code",[e._v("title")]),e._v(" 域随意。")]),e._v(" "),t("li",[e._v("点击 "),t("code",[e._v("Add key")]),e._v("。")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("ssh -T git@github.com")]),e._v(" 测试一下连接。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ ssh -T git@github.com\nThe authenticity of host 'github.com (192.30.255.113)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com,192.30.255.113' (RSA) to the list of known hosts.\nHi lyh543! You've successfully authenticated, but GitHub does not provide shell access.\n")])])]),t("p",[e._v("前三行是因为你的电脑尚未和 GitHub 建立安全连接，需要进行确认以防止中间人攻击。在安全的网络下（比如宿舍等）一般不会出错，而且这些信息都可以在对应公司的官网上查到，如"),t("a",{attrs:{href:"https://docs.github.com/cn/free-pro-team@latest/github/authenticating-to-github/githubs-ssh-key-fingerprints",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub 的 SSH 密钥指纹"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("看到最后一句就是 OK 了。")]),e._v(" "),t("p",[e._v("接下来我们将完成：")]),e._v(" "),t("ol",[t("li",[e._v("把别人的仓库复制一份给自己，这个过程称为 "),t("code",[e._v("fork")])]),e._v(" "),t("li",[e._v("在自己的仓库中提交代码并推送至 GitHub")]),e._v(" "),t("li",[e._v("将自己仓库中的修改发给原仓库，并请求合并，这个过程称为 "),t("code",[e._v("pull request")])])]),e._v(" "),t("h2",{attrs:{id:"fork-仓库并-clone-到本地"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fork-仓库并-clone-到本地"}},[e._v("#")]),e._v(" fork 仓库并 clone 到本地")]),e._v(" "),t("p",[e._v("我们想要为别人的仓库贡献代码，但我们并没有别人仓库的写权限。于是，我们可以把别人的代码复制 "),t("code",[e._v("fork")]),e._v(" 一份给自己，在自己的仓库修改后，发给别人审核，仓库所有者同意即可合并代码。")]),e._v(" "),t("p",[e._v("Git 本身是没有 fork 的，因此需要在 GitHub 官网上进行 fork。")]),e._v(" "),t("p",[e._v("跳转到别人的仓库，点击 fork 即可。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/b0e8fcbe84aaf69b934c9bfb8daf95bd3ff1eb82775894cd85510d0892d437e7.png",alt:"fork"}})]),e._v(" "),t("p",[e._v("稍等片刻以后，就可以在自己的账户下看到 fork 的仓库：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/fbb3c766af49d586ca889f5f48e395130659c236efdc83627542078de43e1d54.png",alt:"fork 的仓库"}})]),e._v(" "),t("p",[e._v("找到 Clone 的链接。我们想要使用 SSH 协议，因此需要复制带 SSH 的链接。")]),e._v(" "),t("p",[e._v("然后在 Ubuntu 中输入 "),t("code",[e._v("git clone <link>")]),e._v("：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/247178108c83cc06edfa19cb286736c9c82de04ebc79cb15cd400ccf2ec8377e.png",alt:"git clone git@github.com:lyh543/2020-members.git"}})]),e._v(" "),t("p",[e._v("如果是在 Windows 路径下进行的 clone，可以从 Windows 文件资源管理器看到本地有了 2020-members 文件夹。")]),e._v(" "),t("h2",{attrs:{id:"提交自己的代码、推送至-github"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交自己的代码、推送至-github"}},[e._v("#")]),e._v(" 提交自己的代码、推送至 GitHub")]),e._v(" "),t("p",[e._v("在文件夹中加入自己的代码，然后在 Git 仓库目录下（如果在上面的路径，还需要 "),t("code",[e._v("cd 2020-members")]),e._v(" 更改当前文件夹到 "),t("code",[e._v("2020-members")]),e._v("），然后依次执行")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" --all\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"修改了 XX 文件，添加了 YY 文件"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push\n")])])]),t("p",[e._v("其中 "),t("code",[e._v("修改了 XX 文件，添加了 YY 文件")]),e._v(" 将会被记录到这次提交中，可使用 "),t("code",[e._v("git log")]),e._v(" 看到。推送后，也可以在 GitHub 的仓库页面看到。")]),e._v(" "),t("p",[t("code",[e._v("add")]),e._v(" "),t("code",[e._v("commit")]),e._v(" "),t("code",[e._v("push")]),e._v(" 这三条命令在 Git 初期学习中，已经足够使用（我接触 Git 的三年内都只用到这三条命令 hhhh）。")]),e._v(" "),t("p",[e._v("至于分支管理等，可以需要的时候、有兴趣的时候再系统性地学。推荐"),t("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[e._v("廖雪峰的 Git 教程"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"提交-pull-request"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交-pull-request"}},[e._v("#")]),e._v(" 提交 Pull Request")]),e._v(" "),t("p",[e._v("将本地的修改推送到自己的远端仓库后，还需要到 GitHub 官网进行 "),t("code",[e._v("Pull Request")]),e._v("。"),t("code",[e._v("Pull Request")]),e._v(" 这个命名其实很奇怪，个人更喜欢 GitLab 的叫法 "),t("code",[e._v("Merge Request")]),e._v("，表示请求别人合并你的代码。只是大家 "),t("code",[e._v("提交 Pull Request")]),e._v(" "),t("code",[e._v("发 PR")]),e._v(" 叫惯了，就这么叫吧。")]),e._v(" "),t("p",[e._v("在 fork 的仓库的 Pull Request 选项卡下即可新建 Pull Request。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/a60df28a86c9f8b9f7b24315eebcb5ac27a727c8fb4964cd11873000d058b7fc.png",alt:"Pull Request 选项卡"}})]),e._v(" "),t("p",[e._v("在下面的界面选择对应的 "),t("code",[e._v("head repo")]),e._v(" 和 "),t("code",[e._v("branch")]),e._v(" 为自己的仓库和分支，"),t("code",[e._v("base repo")]),e._v(" 和 "),t("code",[e._v("branch")]),e._v(" 为目标的仓库和分支。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/8c465b4c8733b0b53b7e6c4cd0352870b3707c936002204c8056bbd7f2a3d332.png",alt:"新建 Pull Request"}})]),e._v(" "),t("p",[e._v("然后点击 Create Pull Request，输入 title 和 comment（这是方便仓库所有者理解你为什么要发这个 PR，你更新了什么等）即可。")]),e._v(" "),t("p",[e._v("然后就是等仓库所有者读了你的代码以后，如果觉得可以，就会合并进他的仓库了。")])])}),[],!1,null,null,null);t.default=a.exports}}]);