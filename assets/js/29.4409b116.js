(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{414:function(t,a,s){"use strict";s.r(a);var e=s(3),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("以下知识均在后台开发面试中实际出现过、总结而来。")]),t._v(" "),a("h2",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[t._v("#")]),t._v(" C++")]),t._v(" "),a("h3",{attrs:{id:"多态的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态的实现"}},[t._v("#")]),t._v(" 多态的实现")]),t._v(" "),a("p",[t._v("即虚函数表。")]),t._v(" "),a("h3",{attrs:{id:"stl-容器库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stl-容器库"}},[t._v("#")]),t._v(" STL 容器库")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/container",target:"_blank",rel:"noopener noreferrer"}},[t._v("容器库 - cppreference.com"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"unordered-map-和-map-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unordered-map-和-map-的区别"}},[t._v("#")]),t._v(" unordered_map 和 map 的区别")]),t._v(" "),a("p",[t._v("略。")]),t._v(" "),a("h3",{attrs:{id:"multimap-和-map-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimap-和-map-的区别"}},[t._v("#")]),t._v(" multimap 和 map 的区别")]),t._v(" "),a("p",[t._v("略。")]),t._v(" "),a("h3",{attrs:{id:"智能指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#智能指针"}},[t._v("#")]),t._v(" 智能指针")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/cpp/cpp/smart-pointers-modern-cpp?view=msvc-160",target:"_blank",rel:"noopener noreferrer"}},[t._v("智能指针（现代C++） | Microsoft Docs"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("智能指针是对普通指针的一个封装。普通指针 "),a("code",[t._v("new")]),t._v(" 了以后一定要 "),a("code",[t._v("delete")]),t._v("，而智能指针是一个类，当这个类的对象超出作用域以后，会自动调用析构函数，因此不再需要 "),a("code",[t._v("delete")]),t._v("，也不会因为忘记 "),a("code",[t._v("delete")]),t._v(" 而发生内存泄露。")]),t._v(" "),a("p",[t._v("智能指针和普通指针的对比：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseRawPointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using a raw pointer -- not recommended.")]),t._v("\n    Song"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pSong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Song")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nothing on You"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" L"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bruno Mars"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use pSong...")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Don't forget to delete!")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" pSong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseSmartPointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Declare a smart pointer on stack and pass it the raw pointer.")]),t._v("\n    unique_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Song"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("song2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Song")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nothing on You"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" L"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bruno Mars"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use song2...")]),t._v("\n    wstring s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" song2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("duration_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// song2 is deleted automatically here.")]),t._v("\n")])])]),a("p",[t._v("智能指针体现什么机制：封装。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("unique_ptr")]),t._v("："),a("code",[t._v("unique_ptr")]),t._v(" 的出现是为了替代 C++98 的 "),a("code",[t._v("auto_ptr")]),t._v(" (而 "),a("code",[t._v("auto_ptr")]),t._v(" 于 C++11 中被弃用)。如果不知道用什么，默认用 "),a("code",[t._v("unique_ptr")]),t._v(" 就对了。"),a("code",[t._v("unique_ptr")]),t._v(" 只占一个指针大小的空间")]),t._v(" "),a("li",[a("code",[t._v("shared_ptr")]),t._v("："),a("code",[t._v("shared_ptr")]),t._v(" 的管理类似于 Python 的垃圾回收机制：对变量进行计数（如下图）。拷贝构造 "),a("code",[t._v("auto sp3(sp2);")]),t._v(" 和赋值 "),a("code",[t._v("auto sp4 = sp2;")]),t._v(" 都会使得计数++。"),a("code",[t._v("shared_ptr")]),t._v(" 占两个指针大小的空间")]),t._v(" "),a("li",[a("code",[t._v("weak_ptr")]),t._v("："),a("code",[t._v("shared_ptr")]),t._v(" 中如果有循环引用，导致二者的计数都不为 0，会导致内存泄露。可以在引用的地方使用 "),a("code",[t._v("weak_ptr")]),t._v(" 并将 "),a("code",[t._v("shared_ptr")]),t._v(" 赋给它，这不会使得 "),a("code",[t._v("shared_ptr")]),t._v(" 计数++，之后能被正确地回收。"),a("a",{attrs:{href:"https://blog.csdn.net/c_base_jin/article/details/79440999",target:"_blank",rel:"noopener noreferrer"}},[t._v("例子"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/cpp/cpp/how-to-create-and-use-weak-ptr-instances?view=msvc-160",target:"_blank",rel:"noopener noreferrer"}},[t._v("例子2"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/bfe1ee01619b2c9ccc4caed3ac55690651d628abb8b9e9956c2da7d9420c8fe4.png",alt:"shared_ptr"}})]),t._v(" "),a("h2",{attrs:{id:"java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://github.com/angrySquirrel/bookCollection/blob/master/SPRING%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%EF%BC%9A%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90SPRING%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Spring 技术内幕：深入解析 Spring 架构与设计原理》（第 2 版）"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"spring-ioc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc"}},[t._v("#")]),t._v(" Spring IoC")]),t._v(" "),a("h4",{attrs:{id:"ioc-和-di-的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ioc-和-di-的概念"}},[t._v("#")]),t._v(" IoC 和 DI 的概念")]),t._v(" "),a("p",[t._v("先说两个概念：")]),t._v(" "),a("ul",[a("li",[t._v("IoC (Inversion of Control)：控制反转。")]),t._v(" "),a("li",[t._v("DI (Dependency Injection)：依赖注入。")])]),t._v(" "),a("p",[t._v("控制反转是目的、结果，依赖注入是实现控制反转的手段、方法。可以使用依赖注入或依赖查找实现 IoC，但还是依赖注入比较主流。")]),t._v(" "),a("h4",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),a("ol",[a("li",[t._v("资源不再由我们进行管理，而是交给框架进行管理。比如我们写了 "),a("code",[t._v("UserController")]),t._v("、"),a("code",[t._v("UserService")]),t._v("，在实际运行时，我们不需要进行 "),a("code",[t._v("new UserController()")]),t._v(" 等代码，而是交给框架进行创建和销毁。")]),t._v(" "),a("li",[t._v("降低耦合度。说实话我不太赞同这个优点是 IoC 带来的，我认为这个是将接口和实现分离而带来的。")]),t._v(" "),a("li",[t._v("解决循环依赖。如果两个 Service 有互相依赖，如果让我们让我们负责创建这两个 Service，我们在 ServiceA 的构造函数中会 "),a("code",[t._v("new ServiceB()")]),t._v("，而在 ServiceB 的构造函数中会 "),a("code",[t._v("new ServiceA()")]),t._v("，导致循环依赖。Spring 的 IoC 的确解决了循环依赖的问题，不过 Spring 2.6 中会默认禁止循环依赖，避免用户不小心创建循环依赖的 Beans。")])]),t._v(" "),a("h4",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/q6zs7xRjpcB4YxLw6w477w",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring源码系列之容器启动流程"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("基本概念：")]),t._v(" "),a("ul",[a("li",[t._v("Bean：需要由 Spring IoC 容器管理的对象，如 "),a("code",[t._v("UserController")]),t._v("、"),a("code",[t._v("UserService")])]),t._v(" "),a("li",[t._v("BeanFactory：Spring IoC 容器的接口，提供获取 Bean 对象、Bean 的基本信息（以 BeanDefinition 的形式保存）等接口")]),t._v(" "),a("li",[t._v("ApplicationContext：BeanFactory 的子接口，除了提供 BeanFactory 的所有接口外，还提供了更多功能（如 Spring AOP、Message Source、事件广播器）。Spring 应用的数据都保存在 ApplicationContext 的实现类中。有意思的是，这个实现类的 BeanFactory 相关接口是通过代理模式实现的（类里存储了一个 BeanFactory 对象）。")]),t._v(" "),a("li",[t._v("Processor：Spring IoC 中拥有处理能力的工具类。Spring 中有两种："),a("code",[t._v("BeanFactoryPostProcessor")]),t._v(" 和 "),a("code",[t._v("BeanPostProcessor")]),t._v("。前者用于干预 BeanFactory 的创建过程，后者用于干预 Bean 的创建过程（如实现 "),a("code",[t._v("@Autowired")]),t._v("、AOP 等）。二者的接口定义如下：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanFactoryPostProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanPostProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeforeInitialization")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessAfterInitialization")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" bean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Spring Boot 通过在 main 函数里调用 "),a("code",[t._v("SpringApplication.run()")]),t._v("，完成 Spring 容器的初始化，其过程可以参考下面的思维导图。")]),t._v(" "),a("blockquote",[a("p",[t._v("在线思维导图："),a("a",{attrs:{href:"https://tw00cr92rp.feishu.cn/mindnotes/bmncngNRYP7OEjCGanqNkafIQfg#mindmap",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 的 IoC 初始化 - 飞书文档"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/aec963bf14b351c3a718e8efc210a79f11806fd62586baec0bf910e526338392.png",alt:"Spring Boot 的 IoC 初始化"}})]),t._v(" "),a("p",[t._v("下面是可以用于面试的回答模板。")]),t._v(" "),a("ol",[a("li",[t._v("初始化一个 Spring Boot 应用，可以使用 "),a("code",[t._v("SpringApplication.run()")]),t._v(" 函数。这个函数主要做了两件事：实例化 ApplicationContext，和调用 "),a("code",[t._v("refresh()")]),t._v(" 函数：实例化所有"),a("code",[t._v("非懒加载")]),t._v("的"),a("code",[t._v("单例")]),t._v(" Bean")]),t._v(" "),a("li",[t._v("在实例化 ApplicationContext 时，Spring 会实例化 BeanFactory；然后将几个自带的 Processor 注册到容器中，之后会在 "),a("code",[t._v("refresh()")]),t._v(" 函数中用到")]),t._v(" "),a("li",[a("code",[t._v("refresh()")]),t._v(" 函数的核心有 5 个步骤：\n"),a("ol",[a("li",[t._v("执行所有 "),a("code",[t._v("BeanFactoryPostProcessor")])]),t._v(" "),a("li",[t._v("注册所有的 "),a("code",[t._v("BeanPostProcessor")]),t._v("，这个过程会扫描所有的 Bean，并保存到 BeanFactory 中")]),t._v(" "),a("li",[t._v("初始化 MessageSource")]),t._v(" "),a("li",[t._v("初始化事件广播器")]),t._v(" "),a("li",[t._v("实例化剩余的"),a("code",[t._v("非懒加载")]),t._v("的"),a("code",[t._v("单例")]),t._v(" Bean。这里会遍历 Bean 的列表，通过查询 Bean 的定义，排除掉不满足条件的 Bean，然后对剩下的 Bean 调用 "),a("code",[t._v("getBean()")]),t._v("。")])])]),t._v(" "),a("li",[a("code",[t._v("getBean")]),t._v(" 函数首先会检查 "),a("code",[t._v("BeanFactory")]),t._v(" 中是否已经实例化这个 Bean，如果已经实例化则直接返回实例化的对象；如果没有，则会调用 "),a("code",[t._v("createBean")]),t._v(" 创建 Bean。")]),t._v(" "),a("li",[a("code",[t._v("createBean")]),t._v(" 函数分为三个步骤：\n"),a("ol",[a("li",[t._v("利用反射，拿到这个 Bean 的所有构造函数，然后根据传入的参数选择一个构造函数进行实例化")]),t._v(" "),a("li",[t._v("实例化以后将其存入 BeanFactory")]),t._v(" "),a("li",[t._v("调用 "),a("code",[t._v("populateBean")]),t._v(" 装配当前 Bean 关联的其它 Bean。通过反射找到这个 Bean 里需要装配（如 "),a("code",[t._v("@Autowired")]),t._v("）的字段，然后调用 "),a("code",[t._v("getBean()")]),t._v(" 递归地获取 Bean。")])])])]),t._v(" "),a("h4",{attrs:{id:"如何解决循环依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决循环依赖"}},[t._v("#")]),t._v(" 如何解决循环依赖")]),t._v(" "),a("blockquote",[a("p",[t._v("参考: "),a("a",{attrs:{href:"https://juejin.cn/post/6844903962412318734",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring中是如何处理循环依赖的 - 掘金"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Spring 通过调用 "),a("code",[t._v("getBean() -> createBean() -> populateBean() -> getBean()")]),t._v(" 递归地创建 Bean。但创建了一个 Bean 以后，Spring 会将其存到 BeanFactory 中，下次 "),a("code",[t._v("getBean()")]),t._v(" 时会直接返回该实例。因此每个 Bean 只会被创建一次，不会无限递归。")]),t._v(" "),a("p",[t._v("下面是从一个来自掘金的详细流程图，可供参考。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/8b04b6c23892395bc930fa8ab1a1bb5281170663f2219db8f7fe30c36e24a3b7.awebp",alt:"picture 5"}})]),t._v(" "),a("h3",{attrs:{id:"java-动态代理-spring-aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-动态代理-spring-aop"}},[t._v("#")]),t._v(" Java 动态代理 & Spring AOP")]),t._v(" "),a("blockquote",[a("p",[t._v("参考：《Spring技术内幕：深入解析Spring架构与设计原理》第三章 —— Spring AOP 的实现")])]),t._v(" "),a("p",[t._v("AOP 是 Aspect-Oriented Programming（面向方面编程），和 OOP（面向对象编程）都是为了使代码和功能更模块化。OOP 利用继承，很容易实现纵向的模块化（为一个类的所有子类添加相同的功能和代码），而 AOP 的出现就是为了实现横向的模块化，它可以按照指定的规则，给满足条件的函数加相同的功能和代码。例如，AOP 常用于日志等场景，可以为指定的所有方法添加日志功能。")]),t._v(" "),a("h4",{attrs:{id:"aop-使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-使用场景"}},[t._v("#")]),t._v(" AOP 使用场景")]),t._v(" "),a("ul",[a("li",[t._v("Auth（认证）")]),t._v(" "),a("li",[t._v("Cache（缓存）")]),t._v(" "),a("li",[t._v("Context passing（上下文传递）")]),t._v(" "),a("li",[t._v("Logging（日志）")])]),t._v(" "),a("h4",{attrs:{id:"aop-相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-相关概念"}},[t._v("#")]),t._v(" AOP 相关概念")]),t._v(" "),a("h5",{attrs:{id:"advice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advice"}},[t._v("#")]),t._v(" Advice")]),t._v(" "),a("p",[t._v("Advice（通知）定义了 AOP 中“相同的功能和代码”。直接理解这个概念会相当抽象，所以我们看看 Advice 的三个核心的子接口："),a("code",[t._v("MethodBeforeAdvice")]),t._v("、"),a("code",[t._v("AfterReturningAdvice")]),t._v(" 和 "),a("code",[t._v("ThrowsAdvice")]),t._v(" 的代码。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/712c4b478f94bf09f156a1f8ada5d29aab9b19d26a25f8ca5e2b2fa02bfa0008.png",alt:"picture 2"}})]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodBeforeAdvice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeforeAdvice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Nullable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AfterReturningAdvice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AfterAdvice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterReturning")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Nullable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" returnValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Nullable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n * <p>There are not any methods on this interface, as methods are invoked by\n * reflection. Implementing classes must implement methods of the form:\n *\n * <pre class="code">void afterThrowing([Method, args, target], ThrowableSubclass);</pre>\n */')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThrowsAdvice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AfterAdvice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("看到 Advice 接口下面定义的函数，其实就比较好理解了。接口里定义的是"),a("strong",[t._v("回调函数")]),t._v("，比如 "),a("code",[t._v("MethodBeforeAdvice.before()")]),t._v(" 就是在目标函数被调用前，会调用这个函数；"),a("code",[t._v("AfterReturningAdvice.afterReturning()")]),t._v(" 就是在目标函数被调用后，会调用这个函数；而 "),a("code",[t._v("ThrowsAdvice.afterThrowing()")]),t._v(" 就是在目标函数抛异常以后，会调用这个函数。当我们把“相同的功能和代码”写到这几个回调函数里，就可以在不同的函数执行前后，执行这些代码了。")]),t._v(" "),a("h5",{attrs:{id:"pointcut"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pointcut"}},[t._v("#")]),t._v(" PointCut")]),t._v(" "),a("p",[t._v("Advice 定义了需要在不同函数的先后执行的“相同的功能和代码”，而 PointCut（切入点）定义了哪些函数需要执行。说白了，PointCut 就是一个"),a("strong",[t._v("筛选器")]),t._v("。我们还是直接看 PointCut 接口的定义。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodMatcher")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" targetClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" targetClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pointcut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodMatcher")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMethodMatcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("ClassFilter")]),t._v(" 定义了筛选类的类，"),a("code",[t._v("ClassFilter.matches")]),t._v(" 接收一个类，返回 "),a("code",[t._v("boolean")]),t._v(" 表示是否匹配；"),a("code",[t._v("MethodMatcher")]),t._v(" 定义了筛选方法的类，"),a("code",[t._v("MethodMatcher.matches")]),t._v(" 接收一个方法（还有它的类、以及调用方法时的参数），返回 "),a("code",[t._v("boolean")]),t._v(" 表示是否匹配。")]),t._v(" "),a("p",[t._v("很显然，"),a("code",[t._v("PointCut")]),t._v(" 就是负责筛选类和方法。")]),t._v(" "),a("h5",{attrs:{id:"advisor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advisor"}},[t._v("#")]),t._v(" Advisor")]),t._v(" "),a("p",[t._v("Advisor（通知器）做的事情，就是"),a("strong",[t._v("将 PointCut 和 Advice 结合起来")]),t._v("，这样就可以表达“给满足条件的函数加相同的功能和代码”的意思。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Advisor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Advice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAdvice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PointcutAdvisor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Advisor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pointcut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPointcut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"aop-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-的实现"}},[t._v("#")]),t._v(" AOP 的实现")]),t._v(" "),a("p",[t._v("AOP 的核心技术是动态代理（Dynamic Proxy）。代理是常见的设计模式，它基于实际的对象 "),a("code",[t._v("realSubject")]),t._v(" 创建一个拥有相同方法的对象 "),a("code",[t._v("proxySubject")]),t._v("（代理对象也被称为增强过的对象），并在今后的操作中代替 "),a("code",[t._v("realSubject")]),t._v("。Python 的装饰器就是类似的设计模式。")]),t._v(" "),a("p",[t._v("静态代理和动态代理的区别在于，静态代理需要我们手写 "),a("code",[t._v("proxySubject")]),t._v(" 的类，而动态代理则不需要，可以动态生成类，并为我们实例化一个 "),a("code",[t._v("proxySubject")]),t._v("。")]),t._v(" "),a("p",[t._v("Java 中有两种动态代理的方案，一是使用 JDK 自带的动态代理，另一种是使用 cglib 提供的动态代理。")]),t._v(" "),a("p",[t._v("JDK 和 cglib 的动态代理在使用上最大的区别在于：JDK 动态代理只能通过实现接口的方式进行代理（所以目标类必须实现一个接口，而 JDK 代理类也会实现这个接口）；而 cglib 代理可以通过创建目标类的子类进行代理，不需要目标类实现接口。因此，JDK 只能代理实现了接口的类，cglib 可以代理没有接口的类，但 "),a("code",[t._v("cglib")]),t._v(" 不能代理 "),a("code",[t._v("final")]),t._v(" 类和类中的 "),a("code",[t._v("final")]),t._v(" 方法。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("代理是 AOP 的第一步，在完成代理后，还需要启动代理对象的 Interceptor（拦截器）将 Advice 的代码进行织入。")]),t._v(" "),a("h4",{attrs:{id:"spring-aop-的自调用问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-的自调用问题"}},[t._v("#")]),t._v(" Spring AOP 的自调用问题")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch08s06.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.6 Proxying mechanisms | Spring Docs"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("读 Spring 文档的时候突然发现一个网上没怎么提到过的问题：自调用（self-invocation），比如在 "),a("code",[t._v("this.foo()")]),t._v(" 方法中调用了 "),a("code",[t._v("this.bar()")]),t._v("。")]),t._v(" "),a("p",[t._v("考虑下面这个情形：我们编写了一个 "),a("code",[t._v("RealSubject")]),t._v("，其中 "),a("code",[t._v("foo()")]),t._v(" 方法会调用 "),a("code",[t._v("bar()")]),t._v("。随后对这个类进行代理。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RealSubject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProxyFactory")]),t._v(" factory "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProxyFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RealSubject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInterface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAdvice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetryAdvice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setExposeProxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RealSubject")]),t._v(" proxySubject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RealSubject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is a method call on the proxy!")]),t._v("\n      proxySubject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("调用链是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("proxySubject.foo() -> realSubject.foo() -> realSubject.bar()\n")])])]),a("p",[t._v("这里的问题在于，"),a("code",[t._v("realSubject.foo()")]),t._v(" 调用 "),a("code",[t._v("bar()")]),t._v(" 时，调用的是 "),a("code",[t._v("this")]),t._v("（即 "),a("code",[t._v("realSubject")]),t._v("） 的 "),a("code",[t._v("bar()")]),t._v("，"),a("strong",[t._v("没有经过代理就调用了 "),a("code",[t._v("bar()")]),t._v(" 方法")]),t._v("，会导致对 "),a("code",[t._v("bar()")]),t._v(" 方法添加的 Advice 不会生效。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Spring 给出了三种解决方案：")]),t._v(" "),a("ol",[a("li",[t._v("重构 "),a("code",[t._v("RealSubject")]),t._v(" 的代码，回避掉自调用和 Advice 需要同时发生的情况。")]),t._v(" "),a("li",[t._v("将 Spring AOP 的逻辑加入 "),a("code",[t._v("RealSubject.foo()")]),t._v(" 中（但这样的侵入性很强，不推荐）")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RealSubject")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RealSubject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AopContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentProxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("改用 AspectJ 的 AOP 方案，因为 AspectJ 的 AOP 不是基于代理的，就不存在这个问题。")])]),t._v(" "),a("h3",{attrs:{id:"spring-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务"}},[t._v("#")]),t._v(" Spring 事务")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction-declarative-annotations",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Access | Spring"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Spring 提供了事务管理。其本质是调用 JDBC 提供的 "),a("code",[t._v("TransactionManager")]),t._v("，最终落实到数据库的事务上。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("可以在方法前加 "),a("code",[t._v("@Transactional")]),t._v(" 来使用 Spring 事务。标注了 "),a("code",[t._v("@Transactional")]),t._v(" 的方法会被代理，用以在实际执行前开启事务，成功结束后提交，抛出异常时回滚。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("除了使用 "),a("code",[t._v("@Transactional")]),t._v(" 这种声明式的事务管理（Declarative Transaction Management）以外，也可以使用 "),a("code",[t._v("TransactionManager")]),t._v(" 或 "),a("code",[t._v("TransactionTemplate")]),t._v(" 编程式的事务管理（Programmatic Transaction Management）。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionManager")]),t._v(" transactionManager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someServiceMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionStatus")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" transactionManager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("def"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// put your business logic here")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyException")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            transactionManager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rollback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        transactionManager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionTemplate")]),t._v(" transactionTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someServiceMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" transactionTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the code in this method runs in a transactional context")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doInTransaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionStatus")]),t._v(" status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateOperation1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resultOfUpdateOperation2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),a("h3",{attrs:{id:"快排算法、快排的时间复杂度-平均、最坏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快排算法、快排的时间复杂度-平均、最坏"}},[t._v("#")]),t._v(" 快排算法、快排的时间复杂度（平均、最坏）")]),t._v(" "),a("h3",{attrs:{id:"java-自带数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-自带数据结构"}},[t._v("#")]),t._v(" Java 自带数据结构")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 排序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列、优先队列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayDeque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" priorityQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PriorityQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Map")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),a("h3",{attrs:{id:"mysql-数据库引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-数据库引擎"}},[t._v("#")]),t._v(" MySQL 数据库引擎")]),t._v(" "),a("ul",[a("li",[t._v("MyISAM：读性能高，但不支持外键、行级锁和事务，MySQL 5.5 默认")]),t._v(" "),a("li",[t._v("InnoDB：读性能稍弱，支持外键、行级锁和事务，MySQL 5.5.5 及以后默认")])]),t._v(" "),a("p",[t._v("二者都使用 B+ 树作为存储的数据结构。")]),t._v(" "),a("h3",{attrs:{id:"b-树和-b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树和-b-树"}},[t._v("#")]),t._v(" B 树和 B+ 树")]),t._v(" "),a("h4",{attrs:{id:"b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[t._v("#")]),t._v(" B 树")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/B%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("B 树 | 维基百科"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000020416577",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试官问你B树和B+树，就把这篇文章丢给他- SegmentFault 思否"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("先要纠正两个常见误区：")]),t._v(" "),a("ul",[a("li",[t._v("B 树 (B-Tree) 不是二叉树 (Binary Tree)。B 的全称，可能起源于其"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/B%E6%A0%91#%E5%90%8D%E5%AD%97%E5%8F%96%E4%B9%89",target:"_blank",rel:"noopener noreferrer"}},[t._v("发明者"),a("OutboundLink")],1),t._v("，不过理解成平衡 (balanced) 或宽的(broad) 或 茂密(bushy) 也不错。")]),t._v(" "),a("li",[t._v("没有 B 减树！B 减树的出现可能是翻译人员错误地将 B 树 (B-Tree) 翻译成了 B 减树。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/df871baea1f5b1cc17ad6a1c36c13eaae55a55f30987474ebe1ac5570b9d7567.png",alt:"B 树"}})]),t._v(" "),a("p",[t._v("概述：B 树是是一种自平衡的树，能够保持数据有序（听起来就是在说平衡二叉树）。其与平衡二叉树的不同在于，B 树的一个节点可以拥有 2 个以上的子节点，且节点数在某范围内可变。这样的好处有：")]),t._v(" "),a("ol",[a("li",[t._v("子结点的增多能够降低深度，减少定位记录时所经历的中间过程，运用在磁盘、数据库中可以加快存取速度；")]),t._v(" "),a("li",[t._v("由于节点数在范围内可变，因此 B 树不需要像其他平衡二叉查找树那样经常进行平衡")])]),t._v(" "),a("p",[t._v("定义：一棵 m 阶 B 树的定义：")]),t._v(" "),a("ol",[a("li",[t._v("每个节点最多有 "),a("code",[t._v("m-1")]),t._v(" 个 key；")]),t._v(" "),a("li",[t._v("根节点最少可以只有 "),a("code",[t._v("1")]),t._v(" 个 key，非根节点至少有 "),a("code",[t._v("m/2")]),t._v(" 个 key（根节点的 key 数量范围："),a("code",[t._v("[1, m-1]")]),t._v("，非根节点的 key 数量范围："),a("code",[t._v("[m/2, m-1]")]),t._v("。）；")]),t._v(" "),a("li",[t._v("每个节点中的 key 都按照从小到大的顺序排列，每个 key 的左子树中的所有 key 都小于它，而右子树中的所有 key 都大于它；")]),t._v(" "),a("li",[t._v("所有叶子节点都位于同一层（即根节点到每个叶子节点的长度都相同）；")]),t._v(" "),a("li",[t._v("每个节点都存有索引和数据，也就是对应的 key 和 value。")])]),t._v(" "),a("p",[t._v("B 树插入的规则："),a("strong",[t._v("插入的时候，判断当前结点key的个数是否小于等于 "),a("code",[t._v("m-1")]),t._v("，如果满足，直接插入即可，如果不满足，将节点的中间的 key 将这个节点分为左右两部分，中间的节点放到父节点中即可。")])]),t._v(" "),a("h4",{attrs:{id:"b-树-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树-2"}},[t._v("#")]),t._v(" B+ 树")]),t._v(" "),a("p",[t._v("B+ 树具有上述 B 树的前四个特点。除此之外，B+ 树还有以下特点：")]),t._v(" "),a("ol",[a("li",[t._v("B 树的所有结点都存储数据，而 B+ 树只有叶子结点存储数据，内部节点（或非叶子结点、索引节点）只存放索引。在节点空间大小一定的前提下，B+ 树一个结点能存的索引数远大于 B 树一个结点能存的数据的量，这使得 B+ 树的高度远低于 B 树。")]),t._v(" "),a("li",[t._v("B+ 树每个叶子结点存有下一个叶子结点的指针，而 B 树无，所以"),a("strong",[t._v("所有叶子结点形成了一条有序链表")]),t._v("，遍历整棵树只需要遍历链表，而不需要从树根往下遍历。")])]),t._v(" "),a("p",[t._v("B+ 树较 B 树的优点就是遍历快吧。")]),t._v(" "),a("h3",{attrs:{id:"慢查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#慢查询"}},[t._v("#")]),t._v(" 慢查询")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://tech.meituan.com/2014/06/30/mysql-index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引原理及慢查询优化- 美团技术团队"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("慢查询：超过指定时间的 SQL 语句查询。")]),t._v(" "),a("p",[t._v("优化方法：")]),t._v(" "),a("ol",[a("li",[t._v("使用 "),a("code",[t._v("explain")]),t._v(" 语句查看慢查询的查询过程（有无使用索引等）")]),t._v(" "),a("li",[t._v("添加索引、修改索引（如先查区分度大的）")]),t._v(" "),a("li",[t._v("分库、分表")])]),t._v(" "),a("h3",{attrs:{id:"聚簇索引-非聚簇索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引-非聚簇索引"}},[t._v("#")]),t._v(" 聚簇索引 & 非聚簇索引")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/4489820786c2c39801d2488fac6c238e8963a52f2cb7efcd623cd0f8ee3eba66.png",alt:"聚簇索引 & 非聚簇索引"}})]),t._v(" "),a("p",[t._v("InnoDB 主键使用的是聚簇索引。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("非聚簇索引")]),t._v("（二级索引、辅助索引）：表数据和索引分成两部分存储，叶子结点存"),a("strong",[t._v("主键")]),t._v("和"),a("strong",[t._v("索引键")])]),t._v(" "),a("li",[a("strong",[t._v("聚簇索引")]),t._v("：表数据和主键一起存储，主键索引的叶子结点存"),a("strong",[t._v("行数据 (包含主键值)")])])]),t._v(" "),a("p",[t._v("聚簇索引的优点简单说就是三个字：查询快")]),t._v(" "),a("ol",[a("li",[t._v("查询非主键数据时，使用非聚簇索引查询到主键后，还需要使用聚簇索引查询数据")]),t._v(" "),a("li",[t._v("非聚簇索引查询主键时不需要进行二次查询，查询其他键时需要二次查询")]),t._v(" "),a("li",[t._v("查询范围的数据时，如果命中的是聚簇索引可以一并把范围内的数据取出来，但命中的是非聚簇索引的话需要再在聚簇索引中查询多次")])]),t._v(" "),a("p",[t._v("聚簇索引的缺点简单的说也是三个字：插入、更新慢")]),t._v(" "),a("ol",[a("li",[t._v("插入速度依赖插入顺序，如果是随机插入在表中间，插入的过程会很慢；如果直接插入到表末尾的话就会比较快")]),t._v(" "),a("li",[t._v("更新主键慢，因为需要移动被更新的行")])]),t._v(" "),a("h3",{attrs:{id:"innodb-为什么推荐使用-auto-increment-作为主键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-为什么推荐使用-auto-increment-作为主键"}},[t._v("#")]),t._v(" InnoDB 为什么推荐使用 auto_increment 作为主键")]),t._v(" "),a("ol",[a("li",[t._v("auto_increment 保证能新加入的数据的主键永远是最大的，加入的数据会被放在最后。在写入量大的时候，插入数据时是连续写入，而不是随机 I/O")]),t._v(" "),a("li",[t._v("auto_increment 使得主键和业务分离，这样即便业务上出现调整，也不需要重构数据库")])]),t._v(" "),a("h3",{attrs:{id:"回表、索引覆盖、索引下推"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回表、索引覆盖、索引下推"}},[t._v("#")]),t._v(" 回表、索引覆盖、索引下推")]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/401198674",target:"_blank",rel:"noopener noreferrer"}},[t._v("在Mysql中，什么是回表，什么是覆盖索引，索引下推？ - 知乎"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000039869289",target:"_blank",rel:"noopener noreferrer"}},[t._v("第26期：索引设计（索引下推） - SegmentFault 思否"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"回表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回表"}},[t._v("#")]),t._v(" 回表")]),t._v(" "),a("p",[t._v("回表的概念是和非聚簇索引相关的。"),a("strong",[t._v("非聚簇索引")]),t._v("只存储了主键和索引键，查询时如果用到了某个索引，但需要查询的字段不全在索引上，就需要回到"),a("strong",[t._v("聚簇索引")]),t._v("的这张表上再查一遍。")]),t._v(" "),a("p",[t._v("举个栗子：一个表上有主键 "),a("code",[t._v("id")]),t._v("、字段 "),a("code",[t._v("name")]),t._v("（建立了关于 "),a("code",[t._v("name")]),t._v(" 的索引）、另外还有普通字段 "),a("code",[t._v("gender")]),t._v(" 和 "),a("code",[t._v("phone")]),t._v("。")]),t._v(" "),a("p",[t._v("如果我们 "),a("code",[t._v("SELECT id FROM table WHERE name = 'query'")]),t._v("，在索引表上查到满足条件的 "),a("code",[t._v("name")]),t._v(" 和 "),a("code",[t._v("id")]),t._v(" 就够了，不需要回表；")]),t._v(" "),a("p",[t._v("如果改为 "),a("code",[t._v("SELECT gender FROM table WHERE name = 'query'")]),t._v("，则需要回表。")]),t._v(" "),a("h4",{attrs:{id:"索引覆盖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引覆盖"}},[t._v("#")]),t._v(" 索引覆盖")]),t._v(" "),a("p",[t._v("索引覆盖是解决回表的方法。如果我们把 "),a("code",[t._v("name")]),t._v(" 的索引改为 "),a("code",[t._v("(name, gender)")]),t._v(" 的联合索引，同样是 "),a("code",[t._v("SELECT gender FROM table WHERE name = 'query'")]),t._v(" 的查询就能在索引表上直接查到满足条件的 "),a("code",[t._v("gender")]),t._v("，避免了回表的操作。")]),t._v(" "),a("h4",{attrs:{id:"索引下推"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引下推"}},[t._v("#")]),t._v(" 索引下推")]),t._v(" "),a("p",[t._v("索引下推是 MySQL 5.6 起引入的一个内部优化。")]),t._v(" "),a("p",[t._v("假设现在的索引是 "),a("code",[t._v("(name, gender)")]),t._v("，需要查询的语句为")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'query'")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" gender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" phone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("索引查询时，如果没有索引下推，则根据最左匹配原则，索引会筛选出 "),a("code",[t._v("name = 'query'")]),t._v(" 条件对应的 "),a("code",[t._v("id")]),t._v("，然后回表，在主表中使用 "),a("code",[t._v("gender = 2 AND phone IS NOT NULL")]),t._v(" 过滤结果。")]),t._v(" "),a("p",[t._v("这里的问题在于，索引既然包含 "),a("code",[t._v("gender")]),t._v(" 字段，在索引表里其实可以使用 "),a("code",[t._v("name = 'query' AND gender = 2")]),t._v(" 进行筛选，减少回表的数据量，在回表中再使用 "),a("code",[t._v("phone IS NOT NULL")]),t._v(" 过滤结果。"),a("strong",[t._v("索引下推")]),t._v("就是这样一个作用：尽量充分利用索引表进行筛选，最后再在主表中完成剩余的筛选。")]),t._v(" "),a("h3",{attrs:{id:"事务的-acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的-acid"}},[t._v("#")]),t._v(" 事务的 ACID")]),t._v(" "),a("p",[t._v("ACID，是指数据库管理系统 (DBMS) 在写入或更新资料的过程中，为保证事务 (transaction) 是正确可靠的，所必须具备的四个特性：")]),t._v(" "),a("ul",[a("li",[t._v("原子性 (atomicity)：一个事务要么全做要么全不做；")]),t._v(" "),a("li",[a("strong",[t._v("一致性")]),t._v(" (consistency)：数据处于一种有意义的状态，这种状态是语义上的而不是语法上的。最常见的例子是转帐：从帐户 A 转一笔钱到帐户 B 上，如果帐户 A 上的钱减少了，而帐户 B 上的钱却没有增加，那么我们认为此时数据处于不一致的状态；")]),t._v(" "),a("li",[t._v("隔离性 (isolation)：一个事务不影响其他事务的运行效果；")]),t._v(" "),a("li",[t._v("持久性 (durability)：事务一旦提交，则其结果就是永久性的，即使故障也能恢复。")])]),t._v(" "),a("p",[t._v("从数据库层面，数据库通过原子性、隔离性、持久性来保证"),a("strong",[t._v("一致性")]),t._v("。也就是说 ACID 四大特性之中，C 是目的，AID 是手段，是为了保证一致性，数据库提供的手段。")]),t._v(" "),a("h3",{attrs:{id:"事务的原子性和持久性的保证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的原子性和持久性的保证"}},[t._v("#")]),t._v(" 事务的原子性和持久性的保证")]),t._v(" "),a("ol",[a("li",[t._v("将所有事务开始、提交、终止，以及数据的更新操作（记录数据更新前的值即前像，或更新后的值即后像）计入 log")]),t._v(" "),a("li",[t._v("系统崩溃后重启，先读取日志对已提交的事务进行 REDO（保证持久性）")]),t._v(" "),a("li",[t._v("然后对尚未提交的的事务进行 UNDO（保证原子性）")])]),t._v(" "),a("h3",{attrs:{id:"innodb-事务隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-事务隔离级别"}},[t._v("#")]),t._v(" InnoDB 事务隔离级别")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.ibm.com/zh/technologies/databases/articles/os-mysql-transaction-isolation-levels-and-locks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 事务隔离级别和锁– IBM Developer"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("SQL 标准定义了四种隔离，隔离程度由低到高依次为：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("读未提交")]),t._v("/"),a("strong",[t._v("脏读")]),t._v("：未提交事务的数据也可以被读，这也被称为脏读；")]),t._v(" "),a("li",[a("strong",[t._v("读提交")]),t._v("/"),a("strong",[t._v("不可重复读")]),t._v("：提交了的东西就可以被读，但若一个事务两次读取过程中，有事务更新了数据，会导致不可重复读；")]),t._v(" "),a("li",[a("strong",[t._v("可重复读")]),t._v("/"),a("strong",[t._v("幻读")]),t._v("（默认）：同一个事务中，"),a("code",[t._v("select")]),t._v(" 的结果是事务开始时的状态，因此可重复读。但由于 "),a("code",[t._v("insert")]),t._v(" 语句等不受影响，所以可能出现幻读（本事务开始后，别的事务提交了数据 "),a("code",[t._v("pk=1")]),t._v("，本事务 "),a("code",[t._v("select")]),t._v(" 不到 "),a("code",[t._v("pk=1")]),t._v("，但 "),a("code",[t._v("insert pk=1")]),t._v(" 会报错主键冲突，像是读到了幽灵）")]),t._v(" "),a("li",[a("strong",[t._v("序列化")]),t._v("：如果要完全解决上面的三种问题，就只能让事务串行化了，也就是把多个事务变成一个序列。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("有/无问题")]),t._v(" "),a("th",[t._v("脏读")]),t._v(" "),a("th",[t._v("不可重复读")]),t._v(" "),a("th",[t._v("幻读")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("读未提交")]),t._v(" "),a("td",[t._v("有")]),t._v(" "),a("td",[t._v("有")]),t._v(" "),a("td",[t._v("有")])]),t._v(" "),a("tr",[a("td",[t._v("读提交")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("有")]),t._v(" "),a("td",[t._v("有")])]),t._v(" "),a("tr",[a("td",[t._v("可重复读")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("有")])]),t._v(" "),a("tr",[a("td",[t._v("序列化")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("无")])])])]),t._v(" "),a("h4",{attrs:{id:"数据库并发控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库并发控制"}},[t._v("#")]),t._v(" 数据库并发控制")]),t._v(" "),a("p",[t._v("见 "),a("RouterLink",{attrs:{to:"/posts/2021-07-21-database-concurrency-control/1-transactions.html"}},[t._v("数据库并发控制")]),t._v("。")],1),t._v(" "),a("h2",{attrs:{id:"计算机网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络"}},[t._v("#")]),t._v(" 计算机网络")]),t._v(" "),a("h3",{attrs:{id:"osi-七层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#osi-七层"}},[t._v("#")]),t._v(" OSI 七层")]),t._v(" "),a("p",[t._v("就是把 TCP/IP 五层中的“应用层”拓展为（自底向上）“会话层”、“表示层（加密相关，如 TLS）”、“应用层”。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("应用层（例：HTTP 协议）\n表示层（例：TLS 协议）\n会话层\n传输层（例：TCP 协议）\n网络层（例：IP 协议）\n链路层（例：OCSP 协议）\n物理层\n")])])]),a("h3",{attrs:{id:"tcp-三次握手与四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手与四次挥手"}},[t._v("#")]),t._v(" TCP 三次握手与四次挥手")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://hit-alibaba.github.io/interview/basic/network/TCP.html#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 三次握手与四次挥手"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("三次握手：")]),t._v(" "),a("ol",[a("li",[t._v("客户端：发送 "),a("code",[t._v("SYN")]),t._v("，进入 "),a("code",[t._v("SYN_SENT")]),t._v(" 状态")]),t._v(" "),a("li",[t._v("服务器：收到包后发送 "),a("code",[t._v("SYN ACK")]),t._v("，进入 "),a("code",[t._v("SYN_RCVD")]),t._v(" 状态")]),t._v(" "),a("li",[t._v("客户端：收到包后发送 "),a("code",[t._v("ACK")]),t._v("，进入 "),a("code",[t._v("ESTABLISHED")]),t._v(" 状态（服务器接收后也进入 "),a("code",[t._v("ESTABLISHED")]),t._v(" 状态）")])]),t._v(" "),a("p",[t._v("三个包的 "),a("code",[t._v("seq")]),t._v(" 和 "),a("code",[t._v("ACKnum")]),t._v(" 数值有如下关系：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("SYN ACK")]),t._v(" 的 ACKnum = "),a("code",[t._v("SYN")]),t._v(" 的 seq+1")]),t._v(" "),a("li",[a("code",[t._v("ACK")]),t._v(" 的 ACKnum = "),a("code",[t._v("SYN ACK")]),t._v(" 的 seq+1")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/11828738d7578e6fa82c6f0b1eb4ddbb974924935c80003fc0d892acbd66d8f0.png",alt:"TCP 三次握手"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("四次挥手并不一定是客户端发起，也可以由服务端发起。故下面用 "),a("code",[t._v("主动关闭")]),t._v(" 和 "),a("code",[t._v("被动关闭")]),t._v(" 称呼：")]),t._v(" "),a("ol",[a("li",[t._v("主动关闭方：发送最后一个数据包后，发送 "),a("code",[t._v("FIN")]),t._v("，进入 "),a("code",[t._v("FIN_WAIT_1")]),t._v("；")]),t._v(" "),a("li",[t._v("被动关闭方：收到包后发送 "),a("code",[t._v("ACK")]),t._v("，进入 "),a("code",[t._v("CLOSE_WAIT")]),t._v("；客户端收到后进入 "),a("code",[t._v("FIN_WAIT_2")]),t._v("，此时客户端到服务端的单方连接被关闭；")]),t._v(" "),a("li",[t._v("被动关闭方：发送最后一个数据包后，发送 "),a("code",[t._v("FIN")]),t._v("，进入 "),a("code",[t._v("LAST_ACK")]),t._v("；")]),t._v(" "),a("li",[t._v("主动关闭方：收到包后发送 "),a("code",[t._v("ACK")]),t._v("，进入 "),a("code",[t._v("TIME_WAIT")]),t._v("，一段时间后关闭通信；服务端收到后立即关闭通信。")])]),t._v(" "),a("p",[t._v("可以理解为两对 "),a("code",[t._v("FIN - ACK")]),t._v("，且每个 "),a("code",[t._v("ACK")]),t._v(" 的 ACKnum = 对方的 "),a("code",[t._v("FIN")]),t._v(" 的 seq+1。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CLOSE_WAIT")]),t._v(" 可以理解成对方主动关闭了连接，但本方还没有关闭，在等待关闭连接 (wait close)；")]),t._v(" "),a("li",[a("code",[t._v("TIME_WAIT")]),t._v(" 首先发出 FIN 的一侧，如果给对侧的 FIN 响应了 ACK，那么就会超时等待 2*MSL 时间，然后关闭连接(time wait)。在这段超时等待时间内，本地的端口不能被新连接使用；避免延时的包的到达与随后的新连接相混淆。RFC793 定义了 MSL 为2分钟（即 "),a("code",[t._v("TIME_WAIT")]),t._v(" 等待 4 分钟）。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/TCP_CLOSE.svg",alt:"TCP 四次挥手"}})]),t._v(" "),a("p",[t._v("被动关闭的一方也可以把 "),a("code",[t._v("ACK")]),t._v(" 和 "),a("code",[t._v("FIN")]),t._v(" 合并为 "),a("code",[t._v("FIN ACK")]),t._v("，实现三次挥手。")]),t._v(" "),a("h3",{attrs:{id:"tcp-流量控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-流量控制"}},[t._v("#")]),t._v(" TCP 流量控制")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/37379780",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP流量控制、拥塞控制"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("流量控制：考虑到可能接收方处理的比较慢，需要限制发送方的发送速度。方法是，接收方发回的 ACK 中会包含自己接收窗口的大小。")]),t._v(" "),a("li",[t._v("流量控制死锁：当发送者收到了一个窗口为 0 的应答，便停止发送，等待接收者的下一个应答。但如果之后接受者发送的窗口不为 0 的应答在传输过程丢失，发送者一直等待下去，而接收者以为发送者已经收到该应答，等待接收新数据，这样双方就相互等待，从而产生死锁。")]),t._v(" "),a("li",[t._v("流量控制死锁避免：TCP 使用持续计时器。每当发送者收到一个零窗口的应答后就启动该计时器，时间一到便主动发送报文询问接收者的窗口大小。若接收者仍然返回零窗口，则重置该计时器继续等待；若窗口不为 0，则表示应答报文丢失了，此时重置发送窗口后开始发送。")])]),t._v(" "),a("h3",{attrs:{id:"tcp-快速重传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-快速重传"}},[t._v("#")]),t._v(" TCP 快速重传")]),t._v(" "),a("ul",[a("li",[t._v("在没有快速重传机制下，如果发送方的某报文丢失，即使接受方发送了多个重复确认，发送方仍需等待重传计时器到期才会重传；")]),t._v(" "),a("li",[t._v("快速重传机制下，发送方一旦收到三个重复确认，就重传报文，无需等待计时器到期。")])]),t._v(" "),a("h3",{attrs:{id:"tcp-拥塞控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-拥塞控制"}},[t._v("#")]),t._v(" TCP 拥塞控制")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/37379780",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP流量控制、拥塞控制"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("发送方维持一个变量：拥塞窗口 (congestion window, cwnd)，取决于网络拥塞情况，且动态变化。")]),t._v(" "),a("p",[t._v("发送方使自己的发送窗口为 "),a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("min")]),a("mo",[t._v("⁡")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("c")]),a("mi",[t._v("w")]),a("mi",[t._v("n")]),a("mi",[t._v("d")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("w")]),a("mi",[t._v("n")]),a("msub",[a("mi",[t._v("d")]),a("mtext",[t._v("接收方")])],1),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\min(cwnd, wnd_\\text{接收方})")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mop"},[t._v("min")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathdefault"},[t._v("c")]),a("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02691em"}},[t._v("w")]),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mord mathdefault"},[t._v("d")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02691em"}},[t._v("w")]),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathdefault"},[t._v("d")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.32833099999999993em"}},[a("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord text mtight"},[a("span",{staticClass:"mord cjk_fallback mtight"},[t._v("接收方")])])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])]),a("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("。")],1),t._v(" "),a("ul",[a("li",[t._v("慢启动阶段，"),a("code",[t._v("cwnd=1")]),t._v("，每成功传输一次则 "),a("code",[t._v("cwnd*=2")]),t._v("，直至 cwnd 到达慢启动阈值 (slow-start threshold, ssthresh)，进入拥塞避免状态。")]),t._v(" "),a("li",[t._v("拥塞避免状态，每成功传输一次则 "),a("code",[t._v("cwnd++")])]),t._v(" "),a("li",[t._v("任何时刻，出现发送方对某报文的计时器超时，令 "),a("code",[t._v("ssthresh=cwnd/2，cwnd=1")]),t._v("，重新进入慢启动")]),t._v(" "),a("li",[a("strong",[t._v("快速恢复")]),t._v("：任何时刻，出现发送方接收到三个重复确认，并不按照上一条执行，而是令 "),a("code",[t._v("ssthresh=cwnd/2, cwnd=cwnd/2+3")]),t._v("，进入拥塞避免状态（能收到重复报文，说明网络没那么拥堵，超时才是真的拥堵）")])]),t._v(" "),a("h3",{attrs:{id:"用户从输入域名到获取到信息过程中发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户从输入域名到获取到信息过程中发生了什么"}},[t._v("#")]),t._v(" 用户从输入域名到获取到信息过程中发生了什么")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("DNS 解析的过程：计算机先检查 DNS 缓存，如果没有缓存则向 DNS 服务器查询域名对应的 IP，查询的过程分为迭代和递归两种方式（主机向本地域名服务器查询是递归查询，本地域名服务器查询是迭代查询）；面试官接着问了 DNS 基于什么协议，答案是 UDP，服务器一般使用 53 端口；")])]),t._v(" "),a("li",[a("p",[t._v("获取到 IP 以后就可以发包了，需要对包进行一层层的封装，自顶向下的封装顺序为：HTTP、TLS、TCP、IP；")])]),t._v(" "),a("li",[a("p",[t._v("HTTP 协议的内容大致为 "),a("code",[t._v("HTTP/1.1 GET /")]),t._v("；")])]),t._v(" "),a("li",[a("p",[t._v("TLS 协议会进行 TLS 握手，主要是客户端、服务端交换密钥；")])]),t._v(" "),a("li",[a("p",[t._v("再往下是 TCP 和 UDP 协议。经典一问：TCP 和 UDP 的区别（TCP 面向连接、拥塞控制、流量控制），顺便还简单问了一下拥塞控制；")])]),t._v(" "),a("li",[a("p",[t._v("再往下就是 IP 层，主机会向向路由器发 IP 包、路由器根据路由表（用到了最长前缀匹配原则）和选路算法进行转发的过程；面试官又问了有那些选路算法（分为域内和域间协议，域内有 OSPF 和 RIP，域间使用 BGP）；")])]),t._v(" "),a("li",[a("p",[t._v("再往下就是物理层了。")])]),t._v(" "),a("li",[a("p",[t._v("服务器返回 HTML 内容，前端接收到后开始渲染：")]),t._v(" "),a("ul",[a("li",[t._v("构建 DOM 树")]),t._v(" "),a("li",[t._v("构建 CSS 规则树")]),t._v(" "),a("li",[t._v("构建 render 树")]),t._v(" "),a("li",[t._v("布局（计算 element 在屏幕的位置）")]),t._v(" "),a("li",[t._v("绘制：使用 UI 绘制每个 element")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/fdfb246461cb6e8d89e1936746795f5614bbe013dc2aacac2801b1c9e6919686.png",alt:"浏览器渲染过程"}})]),t._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[t._v("执行 JS 代码")]),t._v(" "),a("li",[t._v("如果有引用到其它地方的图片、JS、CSS 会再次进行 HTTP 请求，进行获取。")])]),t._v(" "),a("h2",{attrs:{id:"操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[t._v("#")]),t._v(" 操作系统")]),t._v(" "),a("h3",{attrs:{id:"进程和线程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的区别"}},[t._v("#")]),t._v(" 进程和线程的区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("调度并分派的单位")]),t._v("称为"),a("strong",[t._v("线程")]),t._v("（或轻量级进程 "),a("code",[t._v("LWP")]),t._v("）")]),t._v(" "),a("li",[a("strong",[t._v("资源所有权的单位")]),t._v("称为"),a("strong",[t._v("进程")])])]),t._v(" "),a("p",[t._v("进程会创建进程控制块 (PCB)，而线程是线程控制块 (TCB)。由于线程没有父子进程、资源控制等结构，所以 TCB 比 PCB 简单得多，这也导致线程的创建比进程的创建快得多，大概有一个数量级的区别。")]),t._v(" "),a("p",[t._v("这也是平时开发中，为了利用 CPU 多线程，我们常使用多线程开发，而不是多进程开发的原因。")]),t._v(" "),a("h3",{attrs:{id:"用户态和内核态的区别-这样有什么好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户态和内核态的区别-这样有什么好处"}},[t._v("#")]),t._v(" 用户态和内核态的区别，这样有什么好处")]),t._v(" "),a("ul",[a("li",[t._v("用户模式：优先权较少，用于运行用户程序")]),t._v(" "),a("li",[t._v("内核模式：优先权更高，用于运行内核，且某些指令、内存只能在特权模式下运行/访问，如：\n"),a("ul",[a("li",[t._v("读取/修改 PSW 等控制"),a("strong",[t._v("寄存器")])]),t._v(" "),a("li",[t._v("原始 "),a("strong",[t._v("I/O")]),t._v(" 指令")]),t._v(" "),a("li",[a("strong",[t._v("内存")]),t._v("管理相关")])])])]),t._v(" "),a("p",[t._v("区分用户模式和内核模式的原因："),a("strong",[t._v("保护 OS 和重要操作系统表不受程序干扰")])]),t._v(" "),a("h3",{attrs:{id:"用户级线程和内核级线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户级线程和内核级线程"}},[t._v("#")]),t._v(" 用户级线程和内核级线程")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/1ff352e0972f8ffc505e4894c7b735ea5cd53cebaa644755185f2a07ab9a2479.png",alt:"用户级线程和内核级线程"}})]),t._v(" "),a("ul",[a("li",[t._v("用户级线程：线程、线程的创建、销毁全部由库函数实现。"),a("strong",[t._v("内核不知道用户级线程的存在，依旧按照进程为单位进行调度")]),t._v("。\n"),a("ul",[a("li",[t._v("优点：线程切换不需要内核模式，快；调度策略因应用程序不同而不同；可以运行在任何操作系统上")]),t._v(" "),a("li",[t._v("缺点：系统调用将阻塞同一进程中的其他线程；不能利用多处理器技术")])])]),t._v(" "),a("li",[t._v("内核级线程：管理线程的所有工作均由内核完成。 Windows是这种方法的一个例子。\n"),a("ul",[a("li",[t._v("优点：ULT 两个缺点反过来说；内核本身也可以是多线程的")]),t._v(" "),a("li",[t._v("缺点：ULT 三个优点反过来说；")])])])]),t._v(" "),a("h3",{attrs:{id:"进程七状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程七状态"}},[t._v("#")]),t._v(" 进程七状态")]),t._v(" "),a("ul",[a("li",[t._v("运行")]),t._v(" "),a("li",[t._v("就绪")]),t._v(" "),a("li",[t._v("阻塞")]),t._v(" "),a("li",[t._v("就绪/挂起")]),t._v(" "),a("li",[t._v("阻塞/挂起")]),t._v(" "),a("li",[t._v("New")]),t._v(" "),a("li",[t._v("Exit")])]),t._v(" "),a("h3",{attrs:{id:"僵尸进程和孤儿进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#僵尸进程和孤儿进程"}},[t._v("#")]),t._v(" 僵尸进程和孤儿进程")]),t._v(" "),a("p",[t._v("二者都是进程派生后，父子进程其中一个退出的情况。僵尸进程是子进程退出，孤儿进程是父进程退出。")]),t._v(" "),a("p",[t._v("孤儿进程：父进程派生出子进程。父进程退出，但子进程还在运行，子进程就被称为孤儿进程。Unix 系统下，孤儿进程会被 "),a("code",[t._v("init")]),t._v(" 进程收养，并在孤儿进程退出后由 "),a("code",[t._v("init")]),t._v(" 进程对它们完成状态收集工作。孤儿进程没有什么危害。")]),t._v(" "),a("p",[t._v("僵尸进程：父进程 "),a("code",[t._v("fork")]),t._v(" 出子进程。子进程退出，父进程并没有获取子进程的状态信息，子进程的进程描述符仍然留在系统中，子进程被称为僵尸进程，在 htop 的状态一栏会被标记为 "),a("code",[t._v("Z")]),t._v("。大量僵尸进程会占用内存空间，需要把父进程 kill 掉，僵尸进程转为孤儿进程，进而被 "),a("code",[t._v("init")]),t._v(" 回收。")]),t._v(" "),a("h3",{attrs:{id:"进程调度算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程调度算法"}},[t._v("#")]),t._v(" 进程调度算法")]),t._v(" "),a("ul",[a("li",[t._v("先来先服务 "),a("code",[t._v("First Come First Served, FCFS")])]),t._v(" "),a("li",[t._v("时间片轮转 "),a("code",[t._v("Round Robin, RR")])]),t._v(" "),a("li",[t._v("短进程优先 "),a("code",[t._v("Shortest Process Next, SPN")])]),t._v(" "),a("li",[t._v("剩余时间最短优先 "),a("code",[t._v("Shortest Remaining Time, SRT")])]),t._v(" "),a("li",[t._v("响应比高者优先 "),a("code",[t._v("Highest Response Ratio Next, HRRN")])]),t._v(" "),a("li",[t._v("反馈 "),a("code",[t._v("Feedback")])])]),t._v(" "),a("h3",{attrs:{id:"进程切换算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程切换算法"}},[t._v("#")]),t._v(" 进程切换算法")]),t._v(" "),a("ul",[a("li",[t._v("保存处理器上下文（寄存器）")]),t._v(" "),a("li",[t._v("更新当前进程的 PCB（状态、数据结构等变化）")]),t._v(" "),a("li",[t._v("将 PCB 的指针移至相应队列（就绪、阻塞、挂起等）")]),t._v(" "),a("li",[t._v("选择另一进程执行")])]),t._v(" "),a("h3",{attrs:{id:"中断是什么-软硬中断的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断是什么-软硬中断的区别是什么"}},[t._v("#")]),t._v(" 中断是什么，软硬中断的区别是什么")]),t._v(" "),a("ul",[a("li",[t._v("中断：CPU 接受到"),a("strong",[t._v("外围硬件的异步信号")]),t._v(" or "),a("strong",[t._v("软件的同步信号")]),t._v("，进行响应的软硬件处理")]),t._v(" "),a("li",[t._v("硬中断：CPU 接受到外围硬件的异步信号")]),t._v(" "),a("li",[t._v("软终端：CPU 接受到软件的同步信号（多为硬终端处理程序或进程调度程序发出）")]),t._v(" "),a("li",[t._v("区别：\n"),a("ul",[a("li",[t._v("硬中断会有"),a("strong",[t._v("中断控制器")]),t._v("参与，外设->中断控制器->通过CPU针脚告诉CPU")]),t._v(" "),a("li",[t._v("软中断使用 "),a("strong",[t._v("CPU 指令")]),t._v("触发")]),t._v(" "),a("li",[t._v("硬中断速度快")]),t._v(" "),a("li",[t._v("硬中断可以通过设置 "),a("strong",[t._v("CPU 屏蔽位")]),t._v("来屏蔽")])])])]),t._v(" "),a("h3",{attrs:{id:"线程间通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程间通信方式"}},[t._v("#")]),t._v(" 线程间通信方式")]),t._v(" "),a("p",[t._v("同一进程的线程共享内存地址空间，没有必要依赖 OS 进行通信，但要做好同步/互斥，保护共享的全局变量。")]),t._v(" "),a("ol",[a("li",[t._v("锁机制：三种常见的锁的实现包括互斥锁、读写锁、条件变量")])]),t._v(" "),a("ul",[a("li",[t._v("互斥锁：提供了以排他方式防止数据结构被并发修改的方法")]),t._v(" "),a("li",[t._v("读写锁：允许多个线程同时读共享数据，而对写操作是互斥的")]),t._v(" "),a("li",[t._v("条件变量：可以以原子的方式阻塞进程，直到某个特定条件为真为止（对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用）")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("信号量 (Semaphore)")]),t._v(" "),a("li",[t._v("信号机制 (Signal)：类似进程间的信号处理")])]),t._v(" "),a("h3",{attrs:{id:"进程间通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信方式"}},[t._v("#")]),t._v(" 进程间通信方式")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/luo77/p/5816326.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程间通信的方式——信号、管道、消息队列、共享内存 - 0giant - 博客园"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[t._v("管道(Pipe)，分为无名管道和有名管道，无名管道只能在父子进程或兄弟进程间通信，而有名管道就没有这个限制")]),t._v(" "),a("li",[t._v("信号(Signal)")]),t._v(" "),a("li",[t._v("消息队列(Message Queue)")]),t._v(" "),a("li",[t._v("共享内存(Shared Memory)")]),t._v(" "),a("li",[t._v("信号量(Semaphore)")]),t._v(" "),a("li",[t._v("套接字(Socket)")])]),t._v(" "),a("p",[t._v("记住上面的六个词就可以对付 90% 的面试了，7% 的可能会问一下有名管道和无名管道的区别，剩下 3% 的面试可能每个都会问一下。")]),t._v(" "),a("h3",{attrs:{id:"如何保证缓存一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证缓存一致性"}},[t._v("#")]),t._v(" 如何保证缓存一致性")]),t._v(" "),a("p",[t._v("缓存一致性就是保证内存和 CPU 缓存中的内容相同。")]),t._v(" "),a("p",[t._v("实现上有两种方案："),a("code",[t._v("Write-Through")]),t._v(" 和 "),a("code",[t._v("Write-back")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Write-Through")]),t._v(" 在每次 CPU 更新缓存时会同时更新对应的内存，即把对缓存的更新穿透（through）到内存。")]),t._v(" "),a("p",[a("code",[t._v("Write-Back")]),t._v(" 在每一行的缓存用一个 "),a("code",[t._v("modified")]),t._v(" 标记了是否被修改。当这行缓存被修改时，不立即写入内存，而是标记该行缓存为 "),a("code",[t._v("modified")]),t._v("。当这行缓存将被替换时，就image.png会将这行内容写回（back）内存。")]),t._v(" "),a("p",[t._v("值得一提的是，这两种更新策略在使用 Redis 对数据库进行缓存时也会用于保证缓存一致性。编写一个 "),a("code",[t._v("Cache Provider")]),t._v(" 提供对缓存和数据库的查询，程序不直接查询 Redis 或数据库，而是调用 "),a("code",[t._v("Cache Provider")]),t._v(" 提供的接口进行读写，"),a("code",[t._v("Cache Provider")]),t._v(" 可选择 "),a("code",[t._v("Write-Through")]),t._v(" 或 "),a("code",[t._v("Write-back")]),t._v(" 方案实现缓存一致性。")]),t._v(" "),a("h2",{attrs:{id:"开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发"}},[t._v("#")]),t._v(" 开发")]),t._v(" "),a("h3",{attrs:{id:"深拷贝和浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝"}},[t._v("#")]),t._v(" 深拷贝和浅拷贝")]),t._v(" "),a("ul",[a("li",[t._v("浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。")]),t._v(" "),a("li",[t._v("深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/605a9d2f21aeff216aacc4e08072cdddba4ba0ca9d0b60e3759c75a88e1a31dd.png",alt:"浅拷贝"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/e3af0f7454816313bae5f86994a8eddbf0e052b007b1d7acf54ba27781e86f99.png",alt:"深拷贝"}})]),t._v(" "),a("h3",{attrs:{id:"如何进行调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何进行调试"}},[t._v("#")]),t._v(" 如何进行调试")]),t._v(" "),a("ul",[a("li",[t._v("利用标准输出 / log 调试；")]),t._v(" "),a("li",[t._v("利用 IDE 单步调试；")]),t._v(" "),a("li",[t._v("利用 "),a("code",[t._v("assert")]),t._v(" 语句调试。")])]),t._v(" "),a("h3",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1264742167474528",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式- 廖雪峰的官方网站"),a("OutboundLink")],1)]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("范围/目的")]),t._v(" "),a("th",[t._v("创建型模式")]),t._v(" "),a("th",[t._v("结构型模式")]),t._v(" "),a("th",[t._v("行为型模式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("类模式")]),t._v(" "),a("td",[t._v("工厂方法")]),t._v(" "),a("td",[t._v("(类）适配器")]),t._v(" "),a("td",[t._v("模板方法、解释器")])]),t._v(" "),a("tr",[a("td",[t._v("对象模式")]),t._v(" "),a("td",[t._v("单例"),a("br"),t._v("原型"),a("br"),t._v("抽象工厂"),a("br"),t._v("建造者")]),t._v(" "),a("td",[t._v("代理"),a("br"),t._v("(对象）适配器"),a("br"),t._v("桥接"),a("br"),t._v("装饰"),a("br"),t._v("外观"),a("br"),t._v("享元"),a("br"),t._v("组合")]),t._v(" "),a("td",[t._v("策略"),a("br"),t._v("命令"),a("br"),t._v("职责链"),a("br"),t._v("状态"),a("br"),t._v("观察者"),a("br"),t._v("中介者"),a("br"),t._v("迭代器"),a("br"),t._v("访问者"),a("br"),t._v("备忘录")])])])]),t._v(" "),a("h4",{attrs:{id:"设计模式的原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的原则"}},[t._v("#")]),t._v(" 设计模式的原则")]),t._v(" "),a("ul",[a("li",[t._v("开闭原则：对扩展开放、对修改关闭")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99",target:"_blank",rel:"noopener noreferrer"}},[t._v("里氏替换原则"),a("OutboundLink")],1),t._v("：如果对父类的调用可以成功，对子类的调用也应该成功，这也是面向对象编程的基础")])]),t._v(" "),a("h4",{attrs:{id:"创建型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),a("blockquote",[a("p",[t._v("工厂方法：工厂方法的目的是使得创建对象和使用对象是分离的，并且客户端总是引用抽象工厂和抽象产品")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("┌─────────────┐      ┌─────────────┐\n│   Product   │      │   Factory   │\n└─────────────┘      └─────────────┘\n       ▲                    ▲\n       │                    │\n┌─────────────┐      ┌─────────────┐\n│ ProductImpl │<─ ─ ─│ FactoryImpl │\n└─────────────┘      └─────────────┘\n")])])]),a("blockquote",[a("p",[t._v("抽象工厂：抽象工厂模式和工厂方法不太一样，它要解决的问题比较复杂，不但工厂是抽象的，产品是抽象的，而且有多个产品需要创建，因此，这个抽象工厂会对应到多个实际工厂，每个实际工厂负责创建多个实际产品：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                                ┌────────┐\n                             ─ >│ProductA│\n┌────────┐    ┌─────────┐   │   └────────┘\n│ Client │─ ─>│ Factory │─ ─\n└────────┘    └─────────┘   │   ┌────────┐\n                   ▲         ─ >│ProductB│\n           ┌───────┴───────┐    └────────┘\n           │               │\n      ┌─────────┐     ┌─────────┐\n      │Factory1 │     │Factory2 │\n      └─────────┘     └─────────┘\n           │   ┌─────────┐ │   ┌─────────┐\n            ─ >│ProductA1│  ─ >│ProductA2│\n           │   └─────────┘ │   └─────────┘\n               ┌─────────┐     ┌─────────┐\n           └ ─>│ProductB1│ └ ─>│ProductB2│\n               └─────────┘     └─────────┘\n")])])]),a("blockquote",[a("p",[t._v("生成器模式（Builder）：使用多个“小型”工厂来最终创建出一个完整对象。")])]),t._v(" "),a("blockquote",[a("p",[t._v("原型模式（Prototype）：创建新对象的时候，根据现有的一个原型来创建。")])]),t._v(" "),a("blockquote",[a("p",[t._v("单例模式（Singleton）：保证在一个进程中，某个类有且仅有一个实例。")])]),t._v(" "),a("h4",{attrs:{id:"结构型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),a("blockquote",[a("p",[t._v("适配器（Adapter）：转换器，即负责将 A 类转换为 B 类的类")])]),t._v(" "),a("p",[a("code",[t._v("InputStreamReader")]),t._v(" 就是 Java 标准库提供的 Adapter，它负责把一个 "),a("code",[t._v("InputStream")]),t._v(" 适配为 "),a("code",[t._v("Reader")]),t._v("。类似的还有 "),a("code",[t._v("OutputStreamWriter")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("桥接模式（Bridge）：不要过度使用继承，而是优先拆分某些部件，使用组合的方式来扩展功能。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("桥接前：\n\n                   ┌───────┐\n                   │  Car  │\n                   └───────┘\n                       ▲\n    ┌──────────────────┼───────────────────┐\n    │                  │                   │\n┌───────┐          ┌───────┐          ┌───────┐\n│BigCar │          │TinyCar│          │BossCar│\n└───────┘          └───────┘          └───────┘\n    ▲                  ▲                  ▲\n    │                  │                  │\n    │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐\n    ├─│  BigFuelCar   │├─│  TinyFuelCar  │├─│  BossFuelCar  │\n    │ └───────────────┘│ └───────────────┘│ └───────────────┘\n    │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐\n    ├─│BigElectricCar │├─│TinyElectricCar│├─│BossElectricCar│\n    │ └───────────────┘│ └───────────────┘│ └───────────────┘\n    │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐\n    └─│ BigHybridCar  │└─│ TinyHybridCar │└─│ BossHybridCar │\n      └───────────────┘  └───────────────┘  └───────────────┘\n\n桥接后：\n\n       ┌───────────┐\n       │    Car    │\n       └───────────┘\n             ▲\n             │\n       ┌───────────┐       ┌─────────┐\n       │RefinedCar │ ─ ─ ─>│ Engine  │\n       └───────────┘       └─────────┘\n             ▲                  ▲\n    ┌────────┼────────┐         │ ┌──────────────┐\n    │        │        │         ├─│  FuelEngine  │\n┌───────┐┌───────┐┌───────┐     │ └──────────────┘\n│BigCar ││TinyCar││BossCar│     │ ┌──────────────┐\n└───────┘└───────┘└───────┘     ├─│ElectricEngine│\n                                │ └──────────────┘\n                                │ ┌──────────────┐\n                                └─│ HybridEngine │\n                                  └──────────────┘\n")])])]),a("blockquote",[a("p",[t._v("组合（Composite）：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加一个节点为子节点:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取子节点:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出为XML:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toXml")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("装饰器（Decorator）模式，是一种在运行期动态给某个对象的实例增加功能的方法。类似于这样的方法 "),a("code",[t._v("A decorator(A a);")]),t._v("。"),a("br"),t._v("\n顺带一提，Python 的装饰器就玩得很好。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建原始的数据源:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" fis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.gz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 增加缓冲功能:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" bis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 增加解压缩功能:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" gis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GZIPInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者一次性写成这样：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GZIPInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二层装饰")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一层装饰")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.gz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 核心功能")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("外观模式（Facade）：将复杂的流程包装成一个函数并暴露给调用方。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 register, openAccount, applyTaxCode 三个步骤包装成一个函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Facade")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Company")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("openCompany")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Company")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("admin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" bankAccount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("openAccount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setBankAccount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bankAccount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" taxCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("taxation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyTaxCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTaxCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("taxCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("享元模式（Flyweight）：通过工厂方法创建对象，在工厂方法内部，很可能返回缓存的实例，而不是新创建实例，从而实现不可变实例的复用。如 "),a("code",[t._v("Integer.valueOf()")]),t._v("。")])]),t._v(" "),a("blockquote",[a("p",[t._v("代理模式（Proxy）：将 A 接口转换成 A 接口，可在调用 A 的方法前后加一些额外的代码，实现对 A 的控制。")])]),t._v(" "),a("h5",{attrs:{id:"装饰器和代理的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器和代理的区别"}},[t._v("#")]),t._v(" 装饰器和代理的区别")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/97499017",target:"_blank",rel:"noopener noreferrer"}},[t._v("代理模式和装饰器模式的区别 - 知乎"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("装饰器和代理很相似，都是接收 A 接口，返回 A 接口。其区别主要是思想上的区别：")]),t._v(" "),a("p",[a("strong",[t._v("装饰模式")]),t._v("是为装饰的对象"),a("strong",[t._v("增强功能")]),t._v("；")]),t._v(" "),a("p",[t._v("而"),a("strong",[t._v("代理模式")]),t._v("对代理的对象施加"),a("strong",[t._v("控制")]),t._v("，但不对对象本身的功能进行增强；")]),t._v(" "),a("h4",{attrs:{id:"行为型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),a("blockquote",[a("p",[t._v("责任链模式（Chain of Responsibility）是一种处理请求的模式，它让多个处理器都有机会处理该请求，直到其中某个处理成功为止。责任链模式把多个处理器串成链，然后让请求在链上传递：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("     ┌─────────┐\n     │ Request │\n     └─────────┘\n          │\n┌ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┐\n          ▼\n│  ┌─────────────┐  │\n   │ ProcessorA  │\n│  └─────────────┘  │\n          │\n│         ▼         │\n   ┌─────────────┐\n│  │ ProcessorB  │  │\n   └─────────────┘\n│         │         │\n          ▼\n│  ┌─────────────┐  │\n   │ ProcessorC  │\n│  └─────────────┘  │\n          │\n└ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┘\n          │\n          ▼\n")])])]),a("blockquote",[a("p",[t._v("命令模式（Command）是指，把请求封装成一个命令，然后执行该命令。好处是可以对请求排队、记录请求日志，以及支持可撤销的操作。")])]),t._v(" "),a("blockquote",[a("p",[t._v("解释器模式（Interpreter）：如 Python 解释器、正则表达式匹配等。")])]),t._v(" "),a("blockquote",[a("p",[t._v("迭代器模式（Iterator）")])]),t._v(" "),a("blockquote",[a("p",[t._v("中介模式（Mediator）：在多个组件的相互交互中，添加一个中介，所有组件和中介交互，实现组件间的松耦合。")])]),t._v(" "),a("blockquote",[a("p",[t._v("备忘录模式（Memento），主要用于捕获一个对象的内部状态，以便在将来的某个时候恢复此状态。简单的实现是，编写这个类的 "),a("code",[t._v("getState()")]),t._v(" 和 "),a("code",[t._v("setState()")]),t._v(" 方法，负责导出、导入信息即可。")])]),t._v(" "),a("blockquote",[a("p",[t._v("观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe, Pub/Sub）：发布方搞一个 "),a("code",[t._v("Observer")]),t._v(" 数组；订阅操作就是将订阅者加入数组中；当发布方需要告知订阅者时，对数组中每个对象调用通知方法 "),a("code",[t._v("void onEvent(Event event);")]),t._v(" 即可。")])]),t._v(" "),a("blockquote",[a("p",[t._v("状态（State）")])]),t._v(" "),a("blockquote",[a("p",[t._v("策略（Stategy）：即排序算法时使用的 Comparator")])]),t._v(" "),a("blockquote",[a("p",[t._v("模板方法（Template Method）：使用抽象类定义流程，流程中的部分细节让子类实现")])]),t._v(" "),a("blockquote",[a("p",[t._v("访问者（Visitor）：包含对不同种类东西的访问方法（也可以理解成回调函数），如对文件和文件夹的访问方法")])]),t._v(" "),a("h2",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),a("h3",{attrs:{id:"缓存穿透、击穿、雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透、击穿、雪崩"}},[t._v("#")]),t._v(" 缓存穿透、击穿、雪崩")]),t._v(" "),a("ul",[a("li",[t._v("缓存雪崩：大批数据的缓存同时过期，大量请求打到数据库，造成整个数据库服务崩溃（依赖该数据库的其他服务也接连崩溃）\n"),a("ul",[a("li",[t._v("预防方法：设置过期时间时加一个随机量")]),t._v(" "),a("li",[t._v("抢救方法："),a("strong",[t._v("熔断机制")]),t._v("，当流量达到阈值时拒绝请求，至少让一部分请求能正常工作，其他用户刷新几次也能得到结果")])])]),t._v(" "),a("li",[t._v("缓存击穿：某一条热点数据过期的瞬间， 大量请求打到数据库，造成整个数据库服务崩溃\n"),a("ul",[a("li",[t._v("预防方案：设置热点数据不过期，或使用互斥锁，降低请求同一条数据的并发量")])])]),t._v(" "),a("li",[t._v("缓存穿透：大量请求中 key 不存在，缓存自然不存在，导致大量请求打到数据库\n"),a("ul",[a("li",[t._v("预防方案：将无效的 key 存到 Redis 中；使用"),a("a",{attrs:{href:"https://javaguide.cn/cs-basics/data-structure/bloom-filter.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("布隆过滤器"),a("OutboundLink")],1),t._v("（即多重哈希表）。")])])])]),t._v(" "),a("h3",{attrs:{id:"redis-除了缓存还能做什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-除了缓存还能做什么"}},[t._v("#")]),t._v(" Redis 除了缓存还能做什么")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.dounaite.com/article/625a3924ae87fd3f79645efd.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis除了做缓存，还能做什么 - 豆奶特"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),a("h3",{attrs:{id:"消息队列的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列的好处"}},[t._v("#")]),t._v(" 消息队列的好处")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://javaguide.cn/high-performance/message-queue/message-queue.html#%E4%BA%8C-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("消息队列基础常见面试题总结 | JavaGuide"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[t._v("减少系统响应时间（不再等待请求数据成功，而是直接返回）")]),t._v(" "),a("li",[t._v("削峰/限流")]),t._v(" "),a("li",[t._v("降低系统耦合性（模块之间不再直接调用，而是从 MQ 里存取数据）")])]),t._v(" "),a("h3",{attrs:{id:"消息队列模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列模型"}},[t._v("#")]),t._v(" 消息队列模型")]),t._v(" "),a("p",[t._v("比较常见的就是：点对点模式（一个生产者对一个消费者）、发布/订阅（一个生产者对多个消费者）。")]),t._v(" "),a("h2",{attrs:{id:"分布式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式"}},[t._v("#")]),t._v(" 分布式")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://javaguide.cn/distributed-system/theorem&algorithm&protocol/cap&base-theorem.html#cap%E7%90%86%E8%AE%BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式知识点 | JavaGuide"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"cap-理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap-理论"}},[t._v("#")]),t._v(" CAP 理论")]),t._v(" "),a("ul",[a("li",[t._v("C: Consistency (一致性), 所有节点返回相同的数据")]),t._v(" "),a("li",[t._v("A: Availability (可用性), 非故障节点能够在合理的时间内返回正确的数据")]),t._v(" "),a("li",[t._v("P: Partial Tolerance（分区容错性), 即使由于网络故障, 某些节点之间不能通信, 也能对外提供服务")])]),t._v(" "),a("p",[t._v("CAP 理论简单的说就是：当发生网络分区时，一致性和可用性只能 2 选 1。也就是说，只能选 CP 或 AP。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/18f9c5b74e3f536860bf536ce0a8e51e51158b14b5b0fb988f7f3bad8476a645.png",alt:"picture 5"}})]),t._v(" "),a("p",[t._v("以常见的可以作为注册中心的组件为例：")]),t._v(" "),a("ul",[a("li",[t._v("Zookeeper 保证 CP：任何时候读 Zookeeper 都能得到一致的结果，但不保证每次请求的可用性（如选举 leader 时，服务不可用）；")]),t._v(" "),a("li",[t._v("Eureka 保证 AP：每个节点都都是平等的，都可以返回数据，但返回的数据不保证是最新的；")]),t._v(" "),a("li",[t._v("Nacos 支持 CP 和 AP 两种模式。")])]),t._v(" "),a("h3",{attrs:{id:"一致性理论-base-理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一致性理论-base-理论"}},[t._v("#")]),t._v(" 一致性理论 / BASE 理论")]),t._v(" "),a("p",[t._v("上面说到大多数分布式框架都是保证 CP 或者 AP 的。其实还有一种情况，在保证 P 的前提下，在 A 和 C 之间进行平衡。一致性理论抛弃了 C 的强一致性（任何时刻都一致），转为追求最终一致性（最后一致即可），并在这个平衡中获得了一部分的 A，这种 A 称为“主要可用”。")]),t._v(" "),a("p",[t._v("一致性理论的三要素：")]),t._v(" "),a("ul",[a("li",[t._v("BA: Basically Available (基本可用), 响应时间可以变慢, 非核心功能可以不工作")]),t._v(" "),a("li",[t._v("S: Soft state (软状态), 即数据从不一致到一致的过程的中间状态")]),t._v(" "),a("li",[t._v("E: Eventually Consistent (最终一致性), 即系统保证一定时间内数据到达一致性")])]),t._v(" "),a("p",[t._v("一致性分为三种级别，由强到弱依次为：强一致性、最终一致性、弱一致性：")]),t._v(" "),a("ol",[a("li",[t._v("强一致性：系统在任何时间的数据都是一致的")]),t._v(" "),a("li",[t._v("最终一致性：系统保证一定时间内达到数据一致")]),t._v(" "),a("li",[t._v("弱一致性：系统尽快达到数据一致（也就是没有做任何保证）")])]),t._v(" "),a("p",[t._v("业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。")]),t._v(" "),a("p",[t._v("最终一致性有三种实现：读时修复、写时修复、异步修复：")]),t._v(" "),a("ol",[a("li",[t._v("读时修复：系统读取数据时，如果检测到不一致，则进行修复")]),t._v(" "),a("li",[t._v("写时修复：系统写入数据时，如果失败，则定时重传")]),t._v(" "),a("li",[t._v("异步修复：系统定时对账，检测数据一致性")])]),t._v(" "),a("h3",{attrs:{id:"raft-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-算法"}},[t._v("#")]),t._v(" Raft 算法")]),t._v(" "),a("p",[t._v("Paxos 算法和 Raft 算法都是分布式系统共识算法。 Paxos 算法比较复杂，而 Raft 算法是基于 Paxos 算法改进而来，直接学习 Raft 算法即可。")]),t._v(" "),a("h4",{attrs:{id:"共识算法的基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共识算法的基本原理"}},[t._v("#")]),t._v(" 共识算法的基本原理")]),t._v(" "),a("p",[t._v("共识算法的目标是：即使面对故障，多个服务器也能在共享状态上达成一致。")]),t._v(" "),a("p",[t._v("为了达到这个目的，一般通过复制日志来实现。只要所有服务器的日志的内容和顺序都相同，就能保证它们执行了相同的命令，这对于确定性图灵机来说就是执行结果相同。")]),t._v(" "),a("h4",{attrs:{id:"共识算法的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共识算法的特点"}},[t._v("#")]),t._v(" 共识算法的特点")]),t._v(" "),a("ul",[a("li",[t._v("安全")]),t._v(" "),a("li",[t._v("高可用")]),t._v(" "),a("li",[t._v("一致性不依赖时序（错误的时钟和消息延迟不会影响一致性，只可能影响可用性）")]),t._v(" "),a("li",[t._v("不会被少数运行缓慢的服务器影响性能")])]),t._v(" "),a("h4",{attrs:{id:"raft-算法-选举-leader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-算法-选举-leader"}},[t._v("#")]),t._v(" Raft 算法 -- 选举 Leader")]),t._v(" "),a("p",[t._v("Raft 算法的核心为两个部分："),a("strong",[a("code",[t._v("选举 Leader")]),t._v(" 和 "),a("code",[t._v("日志复制")])]),t._v("。")]),t._v(" "),a("p",[t._v("集群里的每个服务器就称为一个节点。分为三种类型：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Leader")]),t._v("，即主服务器。被选举为 Leader 的服务器将在其任期内负责和客户端交互、将日志分发给 Follower。")]),t._v(" "),a("li",[a("code",[t._v("Candicate")]),t._v("，为 Leader 选举中的候选人。在"),a("code",[t._v("选举 Leader")]),t._v("期间，所有服务器都可以成为 Candidate 竞选 Leader。")]),t._v(" "),a("li",[a("code",[t._v("Follower")]),t._v(" 即从服务器")])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("任期")]),t._v("：Raft 算法将时间划分为多个任期（term），每个任期会用一个自增的数字 id 表示。每个任期开始时都需要竞选 Leader，成功当选的服务器会在该任期内担任 Leader。")]),t._v(" "),a("p",[t._v("服务器间的交互都会带上任期号，确保交互的"),a("strong",[t._v("双方是在同一个任期内")]),t._v("。如果某方的 "),a("code",[t._v("term")]),t._v(" 较小，说明该服务器的信息过期了。")]),t._v(" "),a("ul",[a("li",[t._v("如果 Follower 发现本地的 "),a("code",[t._v("term")]),t._v(" 过期了，则会更新到新的 "),a("code",[t._v("term")]),t._v("。")]),t._v(" "),a("li",[t._v("如果 Leader 或 Candidate 发现本地的 "),a("code",[t._v("term")]),t._v(" 过期了，则会退回为 Follower。")]),t._v(" "),a("li",[t._v("如果服务器发现对方的 "),a("code",[t._v("term")]),t._v(" 过期了，则会拒绝此次请求。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("一个选举过程中可能出现以下几种情形：")]),t._v(" "),a("p",[a("strong",[t._v("给别人投票")]),t._v("：如果一台 Follower 收到 Leader 或 Candidate 的心跳包，则会一直保持为 Follower。")]),t._v(" "),a("p",[a("strong",[t._v("参加选举")]),t._v("：如果 Follower 一直没有收到（超时），则会开始一次选举：自增本地的 "),a("code",[t._v("term")]),t._v(" 并变为 Candidate，并向其它服务器周期性发送心跳包。")]),t._v(" "),a("p",[a("strong",[t._v("选举成功")]),t._v("：如果 Candidate 在一个任期内收到了集群内的过半选票，则成为 Leader。")]),t._v(" "),a("p",[a("strong",[t._v("Candidate 收到 Candidate 或 Leader 的心跳包")]),t._v("：此时需要根据双方 "),a("code",[t._v("term")]),t._v(" 大小分情况讨论：如果接收到的 "),a("code",[t._v("term")]),t._v(" 大于或等于自身的 "),a("code",[t._v("term")]),t._v("，则本 Candidate 转化为 Follower 并对发送心跳包的服务器投票；如果接受到的 "),a("code",[t._v("term")]),t._v(" 小于自身的 "),a("code",[t._v("term")]),t._v("，则拒绝该请求。")]),t._v(" "),a("p",[t._v("如果同一时间出现多名 Candidate，导致没有 Candidate 获得大多数选票，导致多个服务器同时开始新一轮选票，就陷入了活锁。Raft 的解决方案是，每个服务器的每次超时都是随机的 "),a("code",[t._v("150ms~300ms")]),t._v("，于是最先超时的服务器会率先更新 "),a("code",[t._v("term")]),t._v("，并向其它服务器发送新 "),a("code",[t._v("term")]),t._v(" 的心跳包。")]),t._v(" "),a("h4",{attrs:{id:"raft-算法-日志复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-算法-日志复制"}},[t._v("#")]),t._v(" Raft 算法 -- 日志复制")]),t._v(" "),a("p",[a("strong",[t._v("选举过程中服务器集群处于不可用的状态")]),t._v("，因为没有 Leader。在完成选举后，选举出的 Leader 就会负责和客户端进行交互。")]),t._v(" "),a("p",[t._v("日志复制的流程如下：")]),t._v(" "),a("p",[t._v("Leader 收到客户端请求后，会生成一个"),a("strong",[t._v("条目")]),t._v("（"),a("code",[t._v("entry")]),t._v("）。一个 "),a("code",[t._v("entry")]),t._v(" 包含当前 "),a("code",[t._v("term")]),t._v("、一个自增的索引 "),a("code",[t._v("index")]),t._v(" 和客户端的指令 "),a("code",[t._v("cmd")]),t._v("。")]),t._v(" "),a("p",[t._v("生成 "),a("code",[t._v("entry")]),t._v(" 后，Leader 将其追加到自己的日志末尾，并向所有节点广播该 "),a("code",[t._v("entry")]),t._v("，要求 Follower 也将其追加到自己的日志末尾。如果过半 Follower 接受该 "),a("code",[t._v("entry")]),t._v("，则 Leader 提交该 "),a("code",[t._v("entry")]),t._v("，将 "),a("code",[t._v("entry")]),t._v(" 应用到自己的状态机中，并向客户端返回执行结果。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Raft 算法保证日志的以下两个特性：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("如果两个日志中的两个 "),a("code",[t._v("entry")]),t._v(" 具有相同的 "),a("code",[t._v("term")]),t._v(" 和 "),a("code",[t._v("index")]),t._v("，则它们的 "),a("code",[t._v("cmd")]),t._v(" 也相同。")])]),t._v(" "),a("li",[a("strong",[t._v("如果两个日志中的两个 "),a("code",[t._v("entry")]),t._v(" 具有相同的 "),a("code",[t._v("term")]),t._v(" 和 "),a("code",[t._v("index")]),t._v("，则它们前面的所有 "),a("code",[t._v("entries")]),t._v(" 都相同。")])])]),t._v(" "),a("p",[t._v("第一个特性是因为只有 leader 可以生成日志，且一个 term 只有一个 leader。")]),t._v(" "),a("p",[t._v("第二个特性需要 Leader 每次要求 Follower 追加日志时，同时进行"),a("strong",[t._v("一致性检查")]),t._v("来保证。Leader 发送追加日志请求时，除了发送本次完整的 "),a("code",[t._v("entry")]),t._v(" 以外，还会发送前面一条 "),a("code",[t._v("entry")]),t._v(" 的 "),a("code",[t._v("term")]),t._v(" 和 "),a("code",[t._v("index")]),t._v("。Follower 收到后对本地最新一条 "),a("code",[t._v("entry")]),t._v(" 的 "),a("code",[t._v("term")]),t._v(" 和 "),a("code",[t._v("index")]),t._v(" 进行检查，如果相同才会接受。（既然每次添加日志时保证前一条都相同，由数学归纳法可知前面所有的日志都相同）")]),t._v(" "),a("p",[t._v("正常情况下一致性检查不会失败，但在节点崩溃时会出现日志不一致。Follower 的日志相较现任 Leader 的日志可能多、可能少、甚至可能既多一部分又少一部分。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/cc42088c4b1df5607ffaca3e4d6231c55358429cf2348d3161bfde3858265935.png",alt:"picture 4"}})]),t._v(" "),a("ul",[a("li",[t._v("a 和 b 是 Follower 的日志更少的情况，很好理解（Follower 曾掉线）")]),t._v(" "),a("li",[t._v("c 和 d 是 Follower 的日志更多的情况。这种情况可能是现任 Leader 向部分服务器发送了请求，但由于未过半，因此没有提交该请求；也可能现任 Leader 在 "),a("code",[t._v("term 6")]),t._v(" 掉线了，新的服务器 d 已经在 "),a("code",[t._v("term 7")]),t._v(" 推选出新的 Leader；")]),t._v(" "),a("li",[t._v("e 和 f 是 Follower 的日志多一部分又少一部分的情况。比如服务器 f 在任期 2 当选 Leader，并追加了一些日志，但在提交前崩溃了；重启后又在任期 3 当选 Leader，并追加了一些日志，然后又又在提交前崩溃了。")])]),t._v(" "),a("p",[t._v("Raft 算法处理日志不一致的方法直接粗暴：强制使用 Leader 的日志覆盖 Follower 的（即现任 Leader 永远是对的）。换句话说，Leader 和 Follower 找到两份日志最后一致的地方，Follower 删掉之后不一致的部分，然后将 Leader 之后不一致的部分追加到末尾。因此，接下来需要讨论 Leader 和 Follower 如何寻找最后一致的地方。")]),t._v(" "),a("p",[t._v("Leader 会为每个 Follower 维护 "),a("code",[t._v("nextIndex")]),t._v(" 表示下一个需要向其发送的 "),a("code",[t._v("entry")]),t._v(" 的 "),a("code",[t._v("index")]),t._v("。当 Leader 刚上任时，它会初始化所有的 "),a("code",[t._v("nextIndex")]),t._v(" 为自己本地最后一条 "),a("code",[t._v("entry")]),t._v(" 的 "),a("code",[t._v("index")]),t._v(" + 1。如果某个 Follower 的日志和 Leader 有不一致，下次 Leader 追加日志时的一致性检查会失败。失败后，Leader 会将 "),a("code",[t._v("nextIndex")]),t._v(" 减小后重试。若干次重试后，Leader 将 "),a("code",[t._v("nextIndex")]),t._v(" 退回到一致的日志条目 "),a("code",[t._v("index")]),t._v(" + 1，此时一致性检查成功，Follower 将这之后的日志条目都删掉，并将 Leader 刚发送的日志条目追加到自己的日志中。之后的一致性检查会一直成功，Leader 会根据 "),a("code",[t._v("nextIndex")]),t._v(" 将每条日志条目发送给 Follower。")]),t._v(" "),a("p",[t._v("优化 1：在确定日志一致性之前，Leader 可以只发送不包含新的日志条目，只包含前一条的 "),a("code",[t._v("term")]),t._v(" 和 "),a("code",[t._v("index")]),t._v(" 的请求，可以节省带宽。\n优化 2：Follower 拒绝请求时，可以一并发送该冲突日志的 "),a("code",[t._v("term")]),t._v("，和自己本地的该 term 的最早的 "),a("code",[t._v("index")]),t._v("，Leader 即可直接将 "),a("code",[t._v("nextIndex")]),t._v(" 减少到该 "),a("code",[t._v("index")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"raft-算法-为了保证-leader-拥有所有已提交日志而产生的选举限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-算法-为了保证-leader-拥有所有已提交日志而产生的选举限制"}},[t._v("#")]),t._v(" Raft 算法 -- 为了保证 Leader 拥有所有已提交日志而产生的选举限制")]),t._v(" "),a("p",[t._v("上述部分的"),a("code",[t._v("选举 Leader")]),t._v(" 和"),a("code",[t._v("日志复制")]),t._v("即是 Raft 的整体思路，但还有一个小的细节没有处理，本段即是叙述 Raft 如何处理这个细节。")]),t._v(" "),a("p",[t._v("在任何基于 Leader 的一致性算法中，Leader 都需要存储所有已提交的日志条目。最直观的思路是，Follower 将已提交的日志条目回传给 Leader，但这种思路在实现时非常麻烦。")]),t._v(" "),a("p",[t._v("Raft 采用的方法很有意思：在竞选阶段，"),a("strong",[t._v("Follower 不会支持已提交日志比自己少的 Candidate")]),t._v("。在“日志需要被发送给过半数的服务器才会被提交”的前提下，超过半数的 Follower 不会支持没有完整已提交日志的 Candidate，该 Candidate 自然也不会赢得竞选、成为 Leader。")]),t._v(" "),a("h3",{attrs:{id:"todo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[t._v("#")]),t._v(" todo")]),t._v(" "),a("p",[t._v("https://javaguide.cn/distributed-system/api-gateway.html#%E4%BD%95%E4%B8%BA%E7%BD%91%E5%85%B3-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BD%91%E5%85%B3")]),t._v(" "),a("h2",{attrs:{id:"linux-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-命令"}},[t._v("#")]),t._v(" Linux 命令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("用途")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("top")])]),t._v(" "),a("td",[t._v("任务管理器")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("free")])]),t._v(" "),a("td",[t._v("查看剩余内存等（不过为什么不用 "),a("code",[t._v("top")]),t._v(" 呢）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("ps")])]),t._v(" "),a("td",[t._v("查看进程，可使用 "),a("code",[t._v("ps aux | grep '<process_name>'")]),t._v(" 查 pid")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("kill -9 <pid>")])]),t._v(" "),a("td",[t._v("杀进程")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("lsof -i:8000")])]),t._v(" "),a("td",[t._v("查看 8000 端口的占用进程")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("nload")])]),t._v(" "),a("td",[t._v("查看流量大小")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("wc")])]),t._v(" "),a("td",[t._v("(word count) 统计文件的字数、行数、字符数")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("tail --follow")])]),t._v(" "),a("td",[t._v("实时输出（日志）文件内容")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("journalctl -f -u <unit.service>")])]),t._v(" "),a("td",[t._v("实时输出日志内容")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("grep word file.txt")])]),t._v(" "),a("td",[t._v("在 "),a("code",[t._v("find.txt")]),t._v(" 查找 "),a("code",[t._v("word")]),t._v(" 字符串，"),a("code",[t._v("-i")]),t._v(" 大小写不敏感")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("find <directory> -name 'file.txt'")])]),t._v(" "),a("td",[t._v("在目录下查找 "),a("code",[t._v("file.txt")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("df -h")])]),t._v(" "),a("td",[t._v("查看文件剩余空间")])])])]),t._v(" "),a("h2",{attrs:{id:"低频考点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#低频考点"}},[t._v("#")]),t._v(" 低频考点")]),t._v(" "),a("p",[t._v("以下是低频考点，但是在真实面试中问过一次，读者可以按需掌握。")]),t._v(" "),a("h3",{attrs:{id:"c-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-2"}},[t._v("#")]),t._v(" C++")]),t._v(" "),a("h4",{attrs:{id:"c-语言获取当前文件夹、函数名、行数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-语言获取当前文件夹、函数名、行数"}},[t._v("#")]),t._v(" C 语言获取当前文件夹、函数名、行数")]),t._v(" "),a("p",[t._v("中望龙腾 C++ 岗笔试考过。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<direct.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_getcwd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前文件夹")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__FUNCSIG__:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" __FUNCSIG__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取函数完整签名")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__FUNCTION__:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" __FUNCTION__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取函数名")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__LINE__:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("__LINE__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取行数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("输出：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("C:\\Users\\liu\\Desktop\\test\\cpp\n__FUNCSIG__:int __cdecl main(void)\n__FUNCTION__:main\n__LINE__:11\n")])])]),a("h4",{attrs:{id:"c-语言字节对齐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-语言字节对齐"}},[t._v("#")]),t._v(" "),a("RouterLink",{attrs:{to:"/notes/cpp/cpp-grammar/c-byte-alignment.html"}},[t._v("C 语言字节对齐")])],1),t._v(" "),a("h4",{attrs:{id:"cv-限定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cv-限定符"}},[t._v("#")]),t._v(" cv 限定符")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/language/cv",target:"_blank",rel:"noopener noreferrer"}},[t._v("cv（const 与 volatile）类型限定符 | cppreference.com"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("cv 限定符是 "),a("code",[t._v("const")]),t._v(" 和 "),a("code",[t._v("volatile")]),t._v(" 的合称。")]),t._v(" "),a("p",[a("strong",[t._v("当对象最初被创建")]),t._v("时，所用的 cv 限定符决定对象的常量性或易变性。")]),t._v(" "),a("p",[a("code",[t._v("const")]),t._v(" 大家都懂，就是不能修改的常量 (constant)，直接修改会编译报错，间接修改（如利用 "),a("code",[t._v("const_cast<int&>")]),t._v(" 等手段）为未定义行为。还有一点，就是写为 "),a("code",[t._v("const")]),t._v(" 之后，编译器会进行优化。")]),t._v(" "),a("p",[t._v("而 "),a("code",[t._v("volatile")]),t._v(" 翻译过来是“易变”的，表明该变量可能通过软件甚至硬件方式变化。这会阻止编译器对这个变量进行任何优化，包括但不限于：不会将变量放到寄存器中；不会对 "),a("code",[t._v("const volatile")]),t._v(" 变量当做 "),a("code",[t._v("const")]),t._v(" 进行优化。（不过，CPU 仍可以将变量放入缓存中，因为缓存对程序员是透明的）")]),t._v(" "),a("p",[t._v("代码例子见 "),a("a",{attrs:{href:"#const-cast"}},[t._v("const_cast")]),t._v(" 部分。")]),t._v(" "),a("h4",{attrs:{id:"static-用处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-用处"}},[t._v("#")]),t._v(" static 用处")]),t._v(" "),a("p",[t._v("C 语言的 static 有三个用处：")]),t._v(" "),a("ol",[a("li",[t._v("对"),a("code",[t._v("函数内变量")]),t._v("使用，扩展其生存期；")]),t._v(" "),a("li",[t._v("对"),a("code",[t._v("函数外变量")]),t._v("和"),a("code",[t._v("函数")]),t._v("使用，使其他文件不能通过 "),a("code",[t._v("extern")]),t._v(" 访问到该变量/函数（默认是可以的）；")]),t._v(" "),a("li",[t._v("对"),a("code",[t._v("类的成员/方法")]),t._v("使用，使得该变量/函数属于类（其他的都是属于每个对象），可以直接由类名 "),a("code",[t._v("Classname::")]),t._v(" 调用；")])]),t._v(" "),a("h4",{attrs:{id:"禁止继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁止继承"}},[t._v("#")]),t._v(" 禁止继承")]),t._v(" "),a("p",[t._v("C++ 11 引入了 "),a("code",[t._v("final")]),t._v(" 关键字。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: 不能选择 final 类作为基类")]),t._v("\n")])])]),a("h4",{attrs:{id:"禁止拷贝构造函数和赋值构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁止拷贝构造函数和赋值构造函数"}},[t._v("#")]),t._v(" 禁止拷贝构造函数和赋值构造函数")]),t._v(" "),a("p",[t._v("C++11 加入了 "),a("code",[t._v("= delete")]),t._v(" 控制类默认函数。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thing")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Thing"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Thing"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Thing"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Thing t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 错误 E0291：类 "Thing" 不存在默认构造函数')]),t._v("\n    Thing "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("t2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 错误 E1776：无法引用 函数 "Thing::Thing(const Thing &)" (已声明 所在行数:4) -- 它是已删除的函数')]),t._v("\n    Thing t2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 错误 E1776：无法引用 函数 "Thing::Thing(const Thing &)" (已声明 所在行数:4) -- 它是已删除的函数')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("C++98 前可以定义为 "),a("code",[t._v("private")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thing")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Thing")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Thing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Thing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Thing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Thing t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Thing "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("t2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error C2248: “Thing::Thing”: 无法访问 private 成员")]),t._v("\n    Thing t2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error C2248: “Thing::Thing”: 无法访问 private 成员")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"std-vector-和-std-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#std-vector-和-std-array"}},[t._v("#")]),t._v(" std::vector 和 std::array")]),t._v(" "),a("ul",[a("li",[t._v("vector 和 array 都是可以通过 "),a("code",[t._v("[]")]),t._v(" 访问下标对应元素的数组；")]),t._v(" "),a("li",[t._v("vector 是变长数组，可以通过 "),a("code",[t._v("push_back")]),t._v(" "),a("code",[t._v("insert")]),t._v(" 和 "),a("code",[t._v("erase")]),t._v(" 修数组大小。（注意 "),a("code",[t._v("insert")]),t._v(" 和 "),a("code",[t._v("erase")]),t._v(" 都是 "),a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" 的）；")],1),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/qq_30835655/article/details/60762196",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ vector 内存分配与回收机制"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("li",[t._v("array 则是 C++11 引入的、对标准数组的封装，是定长数组。")])]),t._v(" "),a("h4",{attrs:{id:"lambda-捕获值列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda-捕获值列表"}},[t._v("#")]),t._v(" Lambda 捕获值列表")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://changkun.de/modern-cpp/zh-cn/03-runtime/index.html#3-1-Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("Modern C++ zh-cn"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("分为三种：")]),t._v(" "),a("ol",[a("li",[t._v("值捕获 "),a("code",[t._v("[value]")]),t._v(" 或 "),a("code",[t._v("[=value]")]),t._v("：与参数传值类似，值捕获的前提是变量可以拷贝。不同之处则在于，被捕获的变量在 Lambda 表达式被创建时拷贝， 而非调用时才拷贝。")]),t._v(" "),a("li",[t._v("引用捕获 "),a("code",[t._v("[&value]")]),t._v("：与引用传参类似，引用捕获保存的是引用，值会发生变化。")]),t._v(" "),a("li",[t._v("隐式捕获 "),a("code",[t._v("[=]")]),t._v(" 或 "),a("code",[t._v("[&]")]),t._v("：手动书写捕获列表有时候是非常复杂的，这种机械性的工作可以交给编译器来处理，这时候可以在捕获列表中写一个 "),a("code",[t._v("&")]),t._v(" 或 "),a("code",[t._v("=")]),t._v(" 向编译器声明采用引用捕获或者值捕获。（很多地方说的是捕获 "),a("code",[t._v("this")]),t._v("，我觉得还是这个好理解一些，毕竟如果在 main 函数中，也没有 "),a("code",[t._v("this")]),t._v(" 一说）")])]),t._v(" "),a("p",[t._v("总结一下，捕获提供了 Lambda 表达式对外部值进行使用的功能，捕获列表的"),a("strong",[t._v("最常用")]),t._v("的四种形式可以是：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("[]")]),t._v(" 空捕获列表")]),t._v(" "),a("li",[a("code",[t._v("[name1, name2, ...]")]),t._v(" 捕获一系列变量")]),t._v(" "),a("li",[a("code",[t._v("[&]")]),t._v(" 引用捕获, 让编译器自行推导引用列表")]),t._v(" "),a("li",[a("code",[t._v("[=]")]),t._v(" 值捕获, 让编译器自行推导值捕获列表")])]),t._v(" "),a("h3",{attrs:{id:"数据结构-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-2"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),a("h4",{attrs:{id:"堆的复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆的复杂度"}},[t._v("#")]),t._v(" 堆的复杂度")]),t._v(" "),a("p",[t._v("面腾讯的时候被问到，建堆的复杂度是多少，还好之前写过"),a("RouterLink",{attrs:{to:"/notes/computer-science/classnotes/data-structure-and-algorithm.html#堆-Heap"}},[t._v("博客")]),t._v("，还有一点点印象不是 "),a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mi",[t._v("log")]),a("mo",[t._v("⁡")]),a("mi",[t._v("n")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n\\log n)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("，而是 "),a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("。回顾了一下博客，果然是，顺便重温了一下证明。")],1),t._v(" "),a("h3",{attrs:{id:"计算机网络-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络-2"}},[t._v("#")]),t._v(" 计算机网络")]),t._v(" "),a("h4",{attrs:{id:"time-wait-快速回收与复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time-wait-快速回收与复用"}},[t._v("#")]),t._v(" TIME_WAIT 快速回收与复用")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://langos.top/2019/04/07/time-wait%E5%BF%AB%E9%80%9F%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%A4%8D%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"}},[t._v("time-wait快速回收与复用 - rosewind的博客 | BY Blog"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://ivanzz1001.github.io/records/post/tcpip/2018/04/24/tcpip_timewait#",target:"_blank",rel:"noopener noreferrer"}},[t._v("time_wait的快速回收和重用"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/cui918/article/details/52850846",target:"_blank",rel:"noopener noreferrer"}},[t._v("NAT环境下tcp_timestamps问题_〓☆〓 清风徐来918 （QQ:89617663）-CSDN博客_tcp_timestamps"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("这是腾讯主管问的问题，一般第二次考到的概率很小，但作为一个知识了解也不错。")]),t._v(" "),a("p",[t._v("TIME_WAIT 状态产生的原因在上面部分提到了，这里不再赘述。如果 TIME_WAIT 太多，导致无法对外建立新 TCP 连接。")]),t._v(" "),a("p",[t._v("在 Linux 下，可以从系统层面，或从应用程序层面解决这个问题。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("系统层面上，也有三种方法。")]),t._v(" "),a("p",[t._v("一是提高 "),a("code",[t._v("tcp_max_tw_buckets")]),t._v("，就能接受更多的 TIME_WAIT，但是治标不治本。")]),t._v(" "),a("p",[t._v("二是开启 TIME_WAIT 快速回收 "),a("code",[t._v("tcp_tw_recycle")]),t._v("（需同时开启 "),a("code",[t._v("tcp_timestamps")]),t._v("，系统默认开启）。原理是在 TCP 报文中加入时间戳（时间戳在 TCP 报文中的可选字段），然后系统缓存每个连接最新的时间戳。如果收到的 TCP 报文的时间戳早于缓存值，就丢弃数据包 (RFC1323)。")]),t._v(" "),a("p",[t._v("快速回收的问题在于，搭配 NAT 可能会出现问题。现在很多公司都用 LVS 做负载均衡，通常是前面一台 LVS，后面多台后端服务器，这其实就是 NAT，当请求到达 LVS 后，它修改地址数据后便转发给后端服务器，但不会修改时间戳数据，对于后端服务器来说，请求的源地址就是 LVS 的地址，加上端口会复用，所以从后端服务器的角度看，原本不同客户端的请求经过 LVS 的转发，就可能会被认为是同一个连接，加之不同客户端的时间可能不一致，所以就会出现时间戳错乱的现象，于是后面的数据包就被丢弃了，具体的表现通常是是客户端明明发送的 SYN，但服务端就是不响应 ACK。如果服务器身处 NAT 环境，安全起见，通常要禁止 "),a("code",[t._v("tcp_tw_recycle")]),t._v("，至于TIME_WAIT连接过多的问题，可以通过 TIME_WAIT 复用解决。")]),t._v(" "),a("p",[t._v("三是开启 TIME_WAIT 复用 "),a("code",[t._v("tcp_tw_reuse")]),t._v("（也需要同时开启 "),a("code",[t._v("tcp_timestamps")]),t._v("）另外复用也是也是有条件的：协议认为复用是安全的。与 "),a("code",[t._v("tcp_tw_recycle")]),t._v(" 选项相比，本选项一般不会带来副作用。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("应用层面上，有两种解决办法：一是将 TCP 短连接改造为长连接，二是快速关闭 socket。")]),t._v(" "),a("h4",{attrs:{id:"http-1-0-vs-1-1-vs-2-0-vs-3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-vs-1-1-vs-2-0-vs-3-0"}},[t._v("#")]),t._v(" HTTP 1.0 vs 1.1 vs 2.0 vs 3.0")]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/330300133?utm_id=0",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于队头阻塞（Head-of-Line blocking），看这一篇就足够了 - 知乎"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[t._v("HTTP/1.1：通过使用 TCP 长链接，可以在一个 TCP 链接上以"),a("strong",[t._v("流水线")]),t._v("的形式发送多个文件")]),t._v(" "),a("li",[t._v("HTTP/2：通过"),a("strong",[t._v("分帧")]),t._v("，解决了 HTTP/1.1 在 HTTP 协议层的队头阻塞（两个文件可以交叉传输，而不是先发送的大文件必须全部收到后，才能发送后面的小文件）")]),t._v(" "),a("li",[t._v("HTTP/3：通过"),a("strong",[t._v("改用基于 UDP 的 QUIC")]),t._v("，解决了 HTTP/2 在 TCP 协议层的队头阻塞（如果 TCP 层面发生了丢包，HTTP 层不能先拿到后面的包）。不过 HTTP/3 只有在丢包率很高的网络下才会有显著的优势")])]),t._v(" "),a("h4",{attrs:{id:"http-状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[t._v("#")]),t._v(" HTTP 状态码")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/posts/2021-01-30-http-status-code.html"}},[t._v("HTTP 状态码")])],1),t._v(" "),a("ul",[a("li",[t._v("1xx：\n"),a("ul",[a("li",[a("code",[t._v("102 Processing (WebDAV)")]),t._v(" 用于表明 WebDAV 服务器收到了请求，但请求的操作比较费时，服务器正在处理（如遍历当前文件夹）。为了防止客户端 TCP 超时、假设请求丢失，于是服务器可以发送一个没有信息的 102 应答。")])])]),t._v(" "),a("li",[t._v("2xx：\n"),a("ul",[a("li",[a("code",[t._v("200 OK")])]),t._v(" "),a("li",[a("code",[t._v("201 Created")])]),t._v(" "),a("li",[a("code",[t._v("202 Accepted")]),t._v(" 表示正在进行一个异步操作。用于 1. 重置密码时，服务器返回 "),a("code",[t._v("202")]),t._v("，然后将重置邮件发送给邮箱；2. "),a("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/onedrive/developer/rest-api/api/driveitem_createuploadsession?view=odsp-graph-online",target:"_blank",rel:"noopener noreferrer"}},[t._v("Onedrive 分段上传时"),a("OutboundLink")],1),t._v("，如果完成了一部分的上传，会返回 "),a("code",[t._v("202")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("204 No Content")])]),t._v(" "),a("li",[a("code",[t._v("206 Partial Content")])])])]),t._v(" "),a("li",[t._v("3xx：\n"),a("ul",[a("li",[t._v("301 302 307 308 见后")]),t._v(" "),a("li",[a("code",[t._v("304 Not Modified")])])])]),t._v(" "),a("li",[t._v("4xx：\n"),a("ul",[a("li",[a("code",[t._v("400 Bad Request")])]),t._v(" "),a("li",[a("code",[t._v("401 Unauthorized")])]),t._v(" "),a("li",[a("code",[t._v("403 Forbidden")])]),t._v(" "),a("li",[a("code",[t._v("404 Not Found")])]),t._v(" "),a("li",[a("code",[t._v("405 Method Not Allowed")])]),t._v(" "),a("li",[a("code",[t._v("409 Conflict")])]),t._v(" "),a("li",[a("code",[t._v("415 Unsupported Media Type")])])])]),t._v(" "),a("li",[t._v("5xx：\n"),a("ul",[a("li",[a("code",[t._v("500 Internal Server Error")])]),t._v(" "),a("li",[a("code",[t._v("502 Bad Gateway")]),t._v(" 常见于 Nginx 反代的服务出锅了")]),t._v(" "),a("li",[a("code",[t._v("504 Gateway Timeout")])])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("永久重定向 "),a("code",[t._v("Permanently")])]),t._v(" "),a("th",[t._v("暂时重定向 "),a("code",[t._v("Temporarily")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("允许将 "),a("code",[t._v("POST")]),t._v(" 方法改为 "),a("code",[t._v("GET")])]),t._v(" "),a("td",[a("code",[t._v("301 Moved Permanently")])]),t._v(" "),a("td",[a("code",[t._v("302 Moved Temporarily")])])]),t._v(" "),a("tr",[a("td",[t._v("不允许将 "),a("code",[t._v("POST")]),t._v(" 方法改为 "),a("code",[t._v("GET")])]),t._v(" "),a("td",[a("code",[t._v("308 Permanent Redirect")])]),t._v(" "),a("td",[a("code",[t._v("307 Temporary Redirect")])])])])]),t._v(" "),a("h4",{attrs:{id:"https-原理及握手过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https-原理及握手过程"}},[t._v("#")]),t._v(" HTTPS 原理及握手过程")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSL/TLS协议运行机制的概述 - 阮一峰的网络日志"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[t._v("客户端发送：ClientHello + 随机数 client random")]),t._v(" "),a("li",[t._v("服务端发送：ServerHello + 随机数 server random + 证书")]),t._v(" "),a("li",[t._v("（客户端验证证书有效性）")]),t._v(" "),a("li",[t._v("客户端发送：随机数 premaster secret (经公钥加密)")]),t._v(" "),a("li",[t._v("（服务器和客户端使用三个随机数生成一个会话密钥）")]),t._v(" "),a("li",[t._v("客户端发送：finished (经会话密钥加密)")]),t._v(" "),a("li",[t._v("服务端发送：finished (经会话密钥加密)")])]),t._v(" "),a("h3",{attrs:{id:"nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/108031600",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx为什么快到根本停不下来？ - 知乎"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/654b6c7ba89678ec0e0725ddffe75a93cac5d4146c22cc8da161bb2a4da9c683.png",alt:"Nginx 的进程模型"}})]),t._v(" "),a("h4",{attrs:{id:"nginx-多进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-多进程"}},[t._v("#")]),t._v(" Nginx 多进程")]),t._v(" "),a("p",[t._v("一个 Master 进程配合多个 Worker 进程")]),t._v(" "),a("ol",[a("li",[t._v("Master 进程：管理 Worker 进程")])]),t._v(" "),a("ul",[a("li",[t._v("对外接口：接收外部的操作（信号）")]),t._v(" "),a("li",[t._v("对内转发：根据外部的操作的不同，通过信号管理 Worker")]),t._v(" "),a("li",[t._v("监控：监控 worker 进程的运行状态，worker 进程异常终止后，自动重启 worker 进程")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Worker 进程：所有 Worker 进程都是平等的")])]),t._v(" "),a("ul",[a("li",[t._v("实际处理：网络请求，由 Worker 进程处理；")]),t._v(" "),a("li",[t._v("Worker 进程数量：可在 nginx.conf 中配置，一般设置为核心数；")])]),t._v(" "),a("h4",{attrs:{id:"nginx-io-多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-io-多路复用"}},[t._v("#")]),t._v(" Nginx IO 多路复用")]),t._v(" "),a("p",[t._v("Nginx 使用epoll 多路复用")]),t._v(" "),a("h4",{attrs:{id:"nginx-均衡负载算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-均衡负载算法"}},[t._v("#")]),t._v(" Nginx 均衡负载算法")]),t._v(" "),a("p",[t._v("共五种：")]),t._v(" "),a("ol",[a("li",[t._v("轮询 (Round Robin)")]),t._v(" "),a("li",[t._v("加权轮训，权越大表示服务器的能力越强，能承受更大负载")]),t._v(" "),a("li",[t._v("最小连接数 (Least Connections)")]),t._v(" "),a("li",[t._v("IP Hash，保证同 IP 映射到同一服务器，在集群不同享 Session 时很好用")]),t._v(" "),a("li",[t._v("URL Hash，保证同 URL 映射到同一服务器，在有 URL 缓存时效率高")])]),t._v(" "),a("h3",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),a("h4",{attrs:{id:"docker-底层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-底层"}},[t._v("#")]),t._v(" Docker 底层")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://xiaoxiami.gitbook.io/docker/docker-de-di-ceng-ji-zhu",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 的底层技术"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("概要：Docker 使用 "),a("strong",[t._v("Linux 命名空间")]),t._v("实现"),a("strong",[t._v("容器的隔离")]),t._v("，使用"),a("strong",[t._v("控制组")]),t._v("实现对容器的"),a("strong",[t._v("资源限制")]),t._v("，使用"),a("strong",[t._v("联合文件系统")]),t._v("提高"),a("strong",[t._v("存储效率")]),t._v("。")])]),t._v(" "),a("p",[t._v("和虚拟机不同，Docker 进程和宿主机进程共用一个内核和某些系统库等。而彼此各个进程的方法是 Linux 上的"),a("strong",[t._v("命名空间 (Namespaces)")]),t._v("。")]),t._v(" "),a("p",[t._v("Docker 使用名称空间来为容器提供隔离的工作空间。当一个容器运行时，Docker 就会为该容器创建一系列的名称空间，并为名称空间提供一层隔离。")]),t._v(" "),a("p",[t._v("Docker 引擎也依赖另一项叫 Control groups (cgroups，控制组) 的技术。控制组可以对程序进行资源限定，并允许 Docker 引擎在容器间进行硬件资源共享以及随时进行限制和约束，如内存等。")]),t._v(" "),a("p",[t._v("联合文件系统 (UnionFS) 是一种分层、轻量级并且高性能的文件系统，它支持将文件系统的修改作为一次提交来一层层地叠加。不同 Docker 容器可以共享基础的文件系统层，与自己独有的改动层一起使用，可以大大提高存储效率。")]),t._v(" "),a("h3",{attrs:{id:"i-o-多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o-多路复用"}},[t._v("#")]),t._v(" I/O 多路复用")]),t._v(" "),a("p",[t._v("I/O 多路复用是一种同步 I/O 模型，实现一个线程监听多个文件句柄；一旦某个文件句柄就绪，就能通知应用程序进行读写操作。没有文件句柄就绪时就会阻塞应用程序。")]),t._v(" "),a("p",[t._v("I/O 多路复用提供了三种实现：select、poll 和 epoll。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("readfds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("writefds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("exceptfds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("select 函数将需要监听的 file descriptors(fd) 传给 select 函数，当其中一个就绪后函数就返回。")]),t._v(" "),a("p",[t._v("select 优点：跨平台\nselect 缺点：")]),t._v(" "),a("ol",[a("li",[t._v("底层是通过轮询数组来实现的，时间复杂度为 "),a("code",[t._v("O(n)")]),t._v("，且监听的 fd 有数量限制")]),t._v(" "),a("li",[t._v("每次调用 select 时都需要把 fd 从用户态复制到内核态")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nfds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("poll 在使用上和 select 没什么区别。")]),t._v(" "),a("p",[t._v("poll 优点：改用轮询链表实现，监听的 fd 就没有数量限制了\npoll 缺点：")]),t._v(" "),a("ol",[a("li",[t._v("依旧是轮询链表，时间复杂度依旧是 "),a("code",[t._v("O(n)")]),t._v("。")]),t._v(" "),a("li",[t._v("在每次调用时依旧需要把 fd 从用户态复制到内核态")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_ctl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" op"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" epfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxevents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("epoll 的使用稍微复杂一些，使用事件来驱动。")]),t._v(" "),a("p",[t._v("epoll 优点：")]),t._v(" "),a("ol",[a("li",[t._v("使用哈希表来实现，优点是时间复杂度降低到 "),a("code",[t._v("O(1)")]),t._v("，且依旧没有大小限制")]),t._v(" "),a("li",[t._v("在最开始调用 "),a("code",[t._v("epoll_ctl")]),t._v(" 时会将 fd 态从用户态复制到内核态，之后每次调用 "),a("code",[t._v("epoll_wait")]),t._v(" 进行等待时都不需要复制。")])]),t._v(" "),a("p",[t._v("epoll 缺点：最开始需要调用 "),a("code",[t._v("epoll_create")]),t._v(" 在 OS 中创建一个 fd。")]),t._v(" "),a("h3",{attrs:{id:"零拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零拷贝"}},[t._v("#")]),t._v(" 零拷贝")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/83398714",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入剖析Linux IO原理和几种零拷贝机制的实现 - 知乎"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("零拷贝指的是在数据从网络等设备到用户程序空间传递的作用中，实现 CPU 的零参与，消除 CPU 在这方面的负载，也减少了拷贝次数。用到的主要技术是 DMA + 内存区域映射。")]),t._v(" "),a("h4",{attrs:{id:"dma"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dma"}},[t._v("#")]),t._v(" DMA")]),t._v(" "),a("p",[t._v("直接内存存取（Direct Memory Access，DMA）允许网络、磁盘、显卡等设备直接绕过 CPU 访问内存。")]),t._v(" "),a("p",[t._v("除了开始和结束需要 CPU 参与（向 DMA 控制器发出、接收信号）以外，其余操作都是由 DMA 控制器完成的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/9d4bdb70b571d40ba60e5e8e34505669cac289b2d9d2b07e23c6d6405fa73213.png",alt:"picture 1"}})]),t._v(" "),a("p",[t._v("图中可以看出，CPU 仍需要在内存的内核缓冲区和用户缓冲区间进行拷贝（如下图）。为了解决这个问题，有好几种方案，用于解决不同的场景。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/6a029200dd084c0928973b9fcd48b724c83b1ee9361048538ad89056215c6595.png",alt:"picture 2"}})]),t._v(" "),a("h4",{attrs:{id:"mmap-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mmap-write"}},[t._v("#")]),t._v(" mmap + write")]),t._v(" "),a("p",[t._v("mmap 是 Linux 提供的一种内存映射文件方法，能将“内核读缓冲区”映射到“用户空间的缓冲区”，减少一次复制，但写的时候仍然需要复制，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/b2508e82324279a50eca3276d7f5d60cadc6f5828d7ab6a64aa8ce1a2dabeeb1.png",alt:"picture 3"}})]),t._v(" "),a("h4",{attrs:{id:"sendfile-dma-gather-copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sendfile-dma-gather-copy"}},[t._v("#")]),t._v(" sendfile + DMA gather copy")]),t._v(" "),a("p",[t._v("sendfile + DMA gather copy 用于进程不需要读写数据，仅将数据原封不动地从一个外设拷贝到另一个外设中。sendfile 可以让数据直接在内核空间中进行传输（从“内核读缓冲区”到“内核写缓冲区”）。而 DMA gather copy 技术可以内核读缓冲区“映射”到内存写缓冲区，从而实现内存之间的零次拷贝。当然缺点是进程无法读写这部分数据。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/6eef23c997b4634a07932251e14ea19dc3af2f0d277ad676cdfabddc5a522d09.png",alt:"picture 4"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);