(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{542:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("数字逻辑要学这个，于是整理了一篇笔记。顺便说一下，如果打算写代码，我们使用的是 "),s("code",[t._v("Xilinx ISE Design Suite 14.7")]),t._v("。（安装下来占了 20G，我只是想入个 Verilog 的门。。。。）")]),t._v(" "),s("p",[t._v("先说一句，Verilog 是一门把电路板和程序结合在一起的语言，因此，学 Verilog，**一定要把语法和实际电路联系起来！！！！**这会很帮助理解的。")]),t._v(" "),s("p",[t._v("另外，和学习其他编程语言一样，如果在 Xilinx 写代码时出了问题，同样可以利用搜索引擎找到不少的答案。好用的网站有 Stack Overflow（被墙），Xilinx 论坛、知乎、CSDN（虽然很不想提他，但是在某些问题上确实还行）等。")]),t._v(" "),s("h2",{attrs:{id:"xilinx-ise-design-suite-14-7-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xilinx-ise-design-suite-14-7-安装"}},[t._v("#")]),t._v(" Xilinx ISE Design Suite 14.7 安装")]),t._v(" "),s("p",[t._v("这里是针对 Xilinx ISE 的安装过程。当然也可以使用更先进的 Vivado 进行开发，这里为了保持和学校机房统一，故安装 Xilinx ISE Design Suite 14.7。")]),t._v(" "),s("ol",[s("li",[t._v("到 "),s("a",{attrs:{href:"https://www.xilinx.com/support/download/index.htmlcontent/xilinx/en/downloadNav/vivado-design-tools/archive-ise.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Xilinx ISE 下载页面"),s("OutboundLink")],1),t._v("下载 14.7 的四个安装包，每个各 2 GB（注意不用下载 Windows 10 版的，我没有测试过能否成功破解）。官网可能需要注册账号，完善信息等。")]),t._v(" "),s("li",[t._v("（Windows 7 及以下电脑可忽略这一步）安装完成后，复制文件 "),s("code",[t._v("X:\\Xilinx\\14.7\\ISE_DS\\ISE\\lib\\nt64\\libPortabilityNOSH.dll")]),t._v(" 并分别替换 "),s("code",[t._v("X:\\Xilinx\\14.7\\ISE_DS\\ISE\\lib\\nt64\\libPortability.dll")]),t._v(" 和 "),s("code",[t._v("X:\\Xilinx\\14.7\\ISE_DS\\common\\lib\\nt64\\libPortabilityNOSH.dll")]),t._v("（参考"),s("a",{attrs:{href:"https://zhidao.baidu.com/question/1638806936623851900",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度知道"),s("OutboundLink")],1),t._v("）")]),t._v(" "),s("li",[t._v("在开始菜单启动 "),s("code",[t._v("Manage Xilinx Lisenses")]),t._v("，然后在 "),s("code",[t._v("Manage Lisense")]),t._v(" 选项卡中点击 "),s("code",[t._v("Load Lisense...")]),t._v("，选择 "),s("a",{attrs:{href:"license12x.lic"}},[t._v("license12x.lic")]),t._v("，完成激活。（参考"),s("a",{attrs:{href:"https://www.jb51.net/softs/554912.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("脚本之家"),s("OutboundLink")],1),t._v("）")])]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("（以下抄 PPT）")]),t._v(" "),s("blockquote",[s("p",[t._v("Verilog HDL（以下简称 Verilog）是一种硬件描述语言，用于从算法级、门级到开关级的多种抽象设计层次的数字系统建模。")])]),t._v(" "),s("p",[t._v("Verilog硬件描述语言的主要功能包括：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("基本逻辑门")]),t._v("，例如 "),s("code",[t._v("and")]),t._v("、"),s("code",[t._v("or")]),t._v(" 和 "),s("code",[t._v("nand")]),t._v(" 等都内在语言中。")]),t._v(" "),s("li",[s("strong",[t._v("用户定义原语")]),t._v("（UDP）创建的灵活性。用户定义的原语既可以是组合逻辑原语，也可以是时序逻辑原语。（UDP太难，应该不考）")]),t._v(" "),s("li",[t._v("提供显式语言结构指定设计中的端口到端口的"),s("strong",[t._v("时延")]),t._v("及路径时延和设计的时序检查。")]),t._v(" "),s("li",[t._v("可采用三种不同方式或混合方式对设计建模。这些方式包括：\n"),s("ul",[s("li",[s("strong",[t._v("行为描述方式")]),t._v("——使用过程化结构建模；")]),t._v(" "),s("li",[s("strong",[t._v("数据流方式")]),t._v("——使用连续赋值语句方式建模；")]),t._v(" "),s("li",[s("strong",[t._v("结构化方式")]),t._v("——使用门和模块实例语句描述建模。")])])]),t._v(" "),s("li",[t._v("Verilog HDL 中有两类数据类型："),s("strong",[t._v("网络数据类型和寄存器数据类型")]),t._v("。网络类型表示构件间的物理连线，而寄存器类型表示抽象的数据存储元件。")])]),t._v(" "),s("p",[t._v("等我学完这一章以后再来看看哪些不重要，可以删。")]),t._v(" "),s("blockquote",[s("p",[t._v("2019.12.4 更新：从八点删到四点（不算 UDP），不愧是我。")])]),t._v(" "),s("h2",{attrs:{id:"程序基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序基础"}},[t._v("#")]),t._v(" 程序基础")]),t._v(" "),s("h3",{attrs:{id:"verilog-由模块构成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verilog-由模块构成"}},[t._v("#")]),t._v(" Verilog 由模块构成")]),t._v(" "),s("blockquote",[s("p",[t._v("一个复杂电路系统的完整 Verilog HDL 模型是由若干个 "),s("strong",[t._v("Verilog HDL 模块")]),t._v("构成的，每一个模块又可以由若干个子模块构成。")])]),t._v(" "),s("p",[t._v("（划重点，模块 "),s("code",[t._v("module")]),t._v(" 思想）")]),t._v(" "),s("p",[t._v("模块是什么？")]),t._v(" "),s("blockquote",[s("p",[t._v("用 Verilog HDL 描述的电路设计就是该电路的 Verilog HDL 模型，也称为模块，是 Verilog 的基本描述单位。"),s("br"),t._v("\n一般来说一个模块可以是"),s("strong",[t._v("一个元件")]),t._v("或者是"),s("strong",[t._v("一个更低层设计模块的集合")]),t._v("。"),s("br"),t._v("\n模块是"),s("strong",[t._v("并行运行")]),t._v("的，通常需要一个高层模块通过调用其他模块的实例来定义一个封闭的系统，包括测试数据和硬件描述。")])]),t._v(" "),s("p",[t._v("老师连 PPT 都不分行的吗，还得我手动分行。。。")]),t._v(" "),s("h3",{attrs:{id:"代码结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码结构"}},[t._v("#")]),t._v(" 代码结构")]),t._v(" "),s("p",[t._v("Verilog 程序结构：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模块声明")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" 模块名（端口列表）\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 端口定义")]),t._v("\n    input 输入端口\n    output 输出端口\n    inout 输入"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("输出端口\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据类型说明")]),t._v("\n    wire\n    reg\n    parameter\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 逻辑功能定义")]),t._v("\n    assign\n    always\n    function\n    task\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ....")]),t._v("\n\nendmodule\n")])])]),s("p",[t._v("以上各部分解释：")]),t._v(" "),s("ul",[s("li",[t._v("<模块名> 是模块唯一的标识符；")]),t._v(" "),s("li",[t._v("<端口列表> 是由模块各个"),s("strong",[t._v("输入")]),t._v("、输出和双向端口组成的一张端口列表，这些端口用来与其他模块进行通信；")]),t._v(" "),s("li",[t._v("数据类型说明部分：用来指定模块内用到的数据对象为"),s("strong",[t._v("寄存器型")]),t._v("、"),s("strong",[t._v("存储器型")]),t._v("还是"),s("strong",[t._v("连线")]),t._v("型；")]),t._v(" "),s("li",[t._v("逻辑功能定义部分：通过使用"),s("strong",[t._v("逻辑功能语句")]),t._v("来实现具体的逻辑功能。")])]),t._v(" "),s("h2",{attrs:{id:"语言要素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语言要素"}},[t._v("#")]),t._v(" 语言要素")]),t._v(" "),s("ul",[s("li",[t._v("每个 Verilog HDL 程序源文件都以 "),s("code",[t._v(".v")]),t._v(" 作为文件扩展名。")]),t._v(" "),s("li",[t._v("Verilog HDL 区分大小写。")]),t._v(" "),s("li",[t._v("Verilog HDL 程序的书写与 C 语言类似\n"),s("ul",[s("li",[t._v("一行可以写多条语句，也可以一条语句分成多行书写")]),t._v(" "),s("li",[s("strong",[t._v("每条语句以分号结束")]),t._v("（注意是语句，"),s("code",[t._v("begin")]),t._v(" "),s("code",[t._v("end")]),t._v(" "),s("code",[t._v("initial")]),t._v(" "),s("code",[t._v("endmodule")]),t._v(" 语句后不加分号,"),s("code",[t._v("module")]),t._v(" "),s("strong",[t._v("要加分号！！！")]),t._v("）")]),t._v(" "),s("li",[t._v("新行、制表符和空格没有特殊意义")]),t._v(" "),s("li",[t._v("间隔符包括空格字符 "),s("code",[t._v("\\b")]),t._v("、制表符 "),s("code",[t._v("\\t")]),t._v("、换行符 "),s("code",[t._v("\\n")]),t._v(" 以及换页符。")]),t._v(" "),s("li",[t._v("注释和 C 语言完全相同，有两种风格：")])])])]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*第一种形式：可以扩展至多行* /\n //第二种形式：在本行结束。\n")])])])]),s("p",[t._v("关于标识符：")]),t._v(" "),s("blockquote",[s("p",[t._v("Verilog HDL 中的标识符 "),s("code",[t._v("identifier")]),t._v("可以是任意一组字母、数字、"),s("code",[t._v("$")]),t._v(" 符号和 "),s("code",[t._v("_")]),t._v(" (下划线)符号的组合，是赋予一个对象唯一的名字。"),s("br"),t._v("\n标识符的第一个字符必须是字母或者下划线。"),s("br"),t._v("\n标识符是区分大小写的。")])]),t._v(" "),s("p",[t._v("关于关键字，类似于 C 语言的关键字概念，如 "),s("code",[t._v("if")]),t._v(" "),s("code",[t._v("int")]),t._v(" 等：")]),t._v(" "),s("blockquote",[s("p",[t._v("Verilog HDL 语言内部使用的词称为关键字或保留字，保留字不能随便使用。所有的关键字都使用小写字母。")])]),t._v(" "),s("p",[t._v("运算符部分"),s("a",{attrs:{href:"#%E6%93%8D%E4%BD%9C%E7%AC%A6"}},[t._v("见后")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"程序结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序结构"}},[t._v("#")]),t._v(" 程序结构")]),t._v(" "),s("h3",{attrs:{id:"模块声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块声明"}},[t._v("#")]),t._v(" 模块声明")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("module_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port_name1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("…"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("port_namen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\nendmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("module_name")]),t._v(" 为模块名（类似于 C 语言的函数名）。")]),t._v(" "),s("li",[s("code",[t._v("port_name")]),t._v(" 为端口名（类似于函数的输入输出），")])]),t._v(" "),s("h3",{attrs:{id:"端口定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#端口定义"}},[t._v("#")]),t._v(" 端口定义")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input_port_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("other_inputs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输入")]),t._v("\noutput "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("output_port_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("other_outputs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出")]),t._v("\ninout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("inout_port_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("other_inouts"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//双向端口")]),t._v("\n")])])]),s("p",[t._v("双向端口类似于输入以后被修改了，然后输出？")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("ol",[s("li",[t._v("在声明输入/输出时，要声明其数据类型是 "),s("code",[t._v("net")]),t._v(" （网络）型还是 "),s("code",[t._v("reg")]),t._v(" （寄存器）型；"),s("strong",[t._v("如果省略，默认为 "),s("code",[t._v("net")]),t._v(" 类型中的 "),s("code",[t._v("wire")]),t._v(" 类型。")])]),t._v(" "),s("li",[t._v("无论是在网络说明还是寄存器说明中，网络或寄存器必须与端口说明中指定的宽度相同。")]),t._v(" "),s("li",[s("strong",[t._v("输入和双向端口只能为网络型。")])])]),t._v(" "),s("p",[t._v("也可以使用 C 语言风格的端口声明。")]),t._v(" "),s("p",[t._v("如果看不懂网络和寄存器的概念，请跳转到"),s("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"}},[t._v("数据类型")]),t._v("部分，看一眼概念，然后再回到这里来。")]),t._v(" "),s("p",[t._v("两种风格的声明示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ina"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("inb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ina"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("inb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\nendmodule\n")])])]),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fulladd4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output reg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" output reg c_out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    input "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("input c_in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n\nendmodule \n")])])]),s("p",[s("code",[t._v("[7:0]")]),t._v(" 是什么，请看"),s("a",{attrs:{href:"#%E5%90%91%E9%87%8F"}},[t._v("向量")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"变量声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),s("p",[t._v("见数据类型部分的"),s("a",{attrs:{href:"#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E-1"}},[t._v("变量声明")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"数值和数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值和数据类型"}},[t._v("#")]),t._v(" 数值和数据类型")]),t._v(" "),s("h3",{attrs:{id:"逻辑值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑值"}},[t._v("#")]),t._v(" 逻辑值")]),t._v(" "),s("p",[s("s",[t._v("为什么他 PPT 不写这个啊啊啊，很重要的啊")])]),t._v(" "),s("p",[t._v("逻辑值有四种：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("逻辑值")]),t._v(" "),s("th",[t._v("硬件电路中的条件")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("0")])]),t._v(" "),s("td",[t._v("逻辑 0，条件为假")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("1")])]),t._v(" "),s("td",[t._v("逻辑 1，条件为真")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x")])]),t._v(" "),s("td",[t._v("逻辑值不确定")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("z")])]),t._v(" "),s("td",[t._v("高阻，浮动状态")])])])]),t._v(" "),s("p",[t._v("注意 "),s("code",[t._v("x")]),t._v(" 和 "),s("code",[t._v("z")]),t._v(" 不分大小写。")]),t._v(" "),s("h3",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),s("blockquote",[s("p",[t._v("在程序运行过程中，不能改变的量称为常量 "),s("code",[t._v("constants")]),t._v("。"),s("br"),t._v("\nVerilog HDL中有三类常量：")]),t._v(" "),s("ol",[s("li",[t._v("整型；")]),t._v(" "),s("li",[t._v("实数型；（不重要）")]),t._v(" "),s("li",[t._v("字符串型。（不重要）")])])]),t._v(" "),s("h4",{attrs:{id:"整数常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数常量"}},[t._v("#")]),t._v(" 整数常量")]),t._v(" "),s("p",[t._v("整数型常量可以按如下两种方式描述：")]),t._v(" "),s("p",[t._v("1．简单的十进制格式（不重要）")]),t._v(" "),s("p",[t._v("这种形式的整数定义为带有一个 "),s("code",[t._v("+")]),t._v(" （可省略）或 "),s("code",[t._v("-")]),t._v(" 的数字序列。如：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("32")])]),t._v(" "),s("td",[t._v("十进制数 32")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-15")])]),t._v(" "),s("td",[t._v("十进制数 -15")])])])]),t._v(" "),s("p",[t._v("注意这样描述的整数是 32bit 的，在函数传参时如果将整数 "),s("code",[t._v("0")]),t._v(" 传给了一个 1bit 的位会报错。因此我们更喜欢使用 "),s("code",[t._v("1'b0")]),t._v("。")]),t._v(" "),s("p",[t._v("2．基数表示法（重要）")]),t._v(" "),s("blockquote",[s("p",[t._v("预警：这部分可能会有一点点无聊。")])]),t._v(" "),s("p",[t._v("这种形式的整数格式为："),s("code",[t._v("<size><'base_format><number>")]),t._v("；")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("<size>")]),t._v("：常量的位的长度。")]),t._v(" "),s("li",[s("code",[t._v("<'base_format>")]),t._v("："),s("code",[t._v("'")]),t._v(" 加字母指明基数，如十进制 "),s("code",[t._v("d")]),t._v("、二进制 "),s("code",[t._v("b")]),t._v("、八进制 "),s("code",[t._v("o")]),t._v("、十六进制 "),s("code",[t._v("h")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("<number>")]),t._v("：是基于基数的值的数字序列，可以出现 "),s("code",[t._v("0123456789abcdefxz")]),t._v("。")])]),t._v(" "),s("p",[t._v("注意：三个部分都不区分大小写。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("5'O37")])]),t._v(" "),s("td",[t._v("用 5 位二进制存储的 八进制数 37（即十进制的 31）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("4'D2")])]),t._v(" "),s("td",[t._v("用 4 位二进制存储的 十进制数 2")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("4'd-4")])]),t._v(" "),s("td",[t._v("非法，数值不能为负")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-4'd4")])]),t._v(" "),s("td",[t._v("合法")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("8 'h 2A")])]),t._v(" "),s("td",[t._v("合法，在位长和 "),s("code",[t._v("'")]),t._v(" 之间、基数和数值之间允许出现空格")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("3' b001")])]),t._v(" "),s("td",[t._v("非法，"),s("code",[t._v("'")]),t._v(" 和基数之间不允许出现空格")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(2+3)'b10")])]),t._v(" "),s("td",[t._v("非法，位长不能够为表达式")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("9'o721")])]),t._v(" "),s("td",[t._v("9位二进制显示的八进制数")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("8'hAF")])]),t._v(" "),s("td",[t._v("8位二进制显示的十六进制数")])])])]),t._v(" "),s("p",[t._v("对于一个 "),s("code",[t._v("x")]),t._v(" 和 "),s("code",[t._v("z")]),t._v("，在不同基数的长度也不同：在二进制中长度为 1，八进制中长度为 3，十六进制中长度为 4。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("4'b100x")])]),t._v(" "),s("td",[t._v("即二进制的 "),s("code",[t._v("100x")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("8'h1x")])]),t._v(" "),s("td",[t._v("即二进制的 "),s("code",[t._v("0001xxxx")])])])])]),t._v(" "),s("p",[t._v("当数字序列 "),s("code",[t._v("<number>")]),t._v(" 的长度小于 "),s("code",[t._v("<size>")]),t._v(" 时，就会用 "),s("code",[t._v("0")]),t._v("、"),s("code",[t._v("x")]),t._v("、或"),s("code",[t._v("z")]),t._v(" 来填充。具体用谁填充，取决于最高位是 "),s("code",[t._v("x")]),t._v("、"),s("code",[t._v("z")]),t._v("、还是其他。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("7'Hx")])]),t._v(" "),s("td",[t._v("7位 "),s("code",[t._v("x")]),t._v("，即 "),s("code",[t._v("xxxxxxx")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("4'hZ")])]),t._v(" "),s("td",[t._v("4位 "),s("code",[t._v("z")]),t._v("，即 "),s("code",[t._v("zzzz")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("10'b10")])]),t._v(" "),s("td",[t._v("左边添 "),s("code",[t._v("0")]),t._v(" 占位，即"),s("code",[t._v("0000000010")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("10'bx0x1")])]),t._v(" "),s("td",[t._v("左边添 "),s("code",[t._v("x")]),t._v(" 占位，即 "),s("code",[t._v("xxxxxxx0x1")])])])])]),t._v(" "),s("p",[t._v("当数字序列 "),s("code",[t._v("<number>")]),t._v(" 的长度大于 "),s("code",[t._v("<size>")]),t._v(" 时，就会取 "),s("code",[t._v("<size>")]),t._v(" 的位宽而把 "),s("code",[t._v("<number>")]),t._v(" 的高位截断。")]),t._v(" "),s("p",[s("code",[t._v("3'b10010011")]),t._v(" == "),s("code",[t._v("3'b011")]),s("br"),t._v(" "),s("code",[t._v("5'H0FFF")]),t._v(" == "),s("code",[t._v("5'H1F")])]),t._v(" "),s("blockquote",[s("p",[t._v("无聊的部分结束。")])]),t._v(" "),s("p",[t._v("还有实数、字符串类型，但是不考，故删掉了。")]),t._v(" "),s("h3",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("p",[t._v("**理解 Verilog 数据类型非常重要！！！**因为这是它和 C 等编程语言的区别中最大的一点。")]),t._v(" "),s("p",[t._v("数据类型上，分为 "),s("code",[t._v("net")]),t._v("（线网型）和 "),s("code",[t._v("reg")]),t._v("（寄存器型）。")]),t._v(" "),s("p",[s("code",[t._v("reg")]),t._v(" 类型，是使用寄存器实现，用于存储数据，类似于电脑 CPU 的寄存器、内存等等。")]),t._v(" "),s("blockquote",[s("p",[t._v("寄存器型变量与网络型数据的区别主要在于：寄存器型变量保持最后一次的赋值，而 "),s("code",[t._v("wire")]),t._v(" 型数据需要有连续的驱动。"),s("br"),t._v("\n寄存器型变量只能在 "),s("code",[t._v("initial")]),t._v(" 或 "),s("code",[t._v("always")]),t._v(" 内部被赋值。")])]),t._v(" "),s("p",[t._v("而 "),s("code",[t._v("net")]),t._v(" 分为 "),s("code",[t._v("wire")]),t._v("、"),s("code",[t._v("wand")]),t._v("、"),s("code",[t._v("wor")]),t._v(" 等等，由于 "),s("code",[t._v("wire")]),t._v(" 类型的线网声明最常用，所以 "),s("code",[t._v("net")]),t._v(" 和 "),s("code",[t._v("wire")]),t._v(" 概念经常互换使用。"),s("s",[t._v("就是说 "),s("code",[t._v("wand")]),t._v(" 和 "),s("code",[t._v("wor")]),t._v(" 都不重要")])]),t._v(" "),s("p",[t._v("而 "),s("code",[t._v("wire")]),t._v(" 是什么呢？翻译成 "),s("code",[t._v("连线")]),t._v(" 非常抽象，让人难以理解。其实呢，"),s("code",[t._v("wire")]),t._v(" 是个很常见的东西：")]),t._v(" "),s("p",[t._v("想象一个“与门”，它有两个输入 "),s("code",[t._v("A")]),t._v(" 和 "),s("code",[t._v("B")]),t._v("，输出 "),s("code",[t._v("F")]),t._v("。"),s("br"),t._v("\n在这里 "),s("code",[t._v("A")]),t._v("、"),s("code",[t._v("B")]),t._v("、"),s("code",[t._v("F")]),t._v(" 都是电线，他们也就是所谓的 "),s("code",[t._v("线网")]),t._v(" 或 "),s("code",[t._v("wire")]),t._v("。")]),t._v(" "),s("p",[t._v("合理猜测，对于线网型和寄存器型，将是两种风格的编程；前者是描述各种“门”，后者是类似于 C 语言的赋值、赋值、再赋值的编程。")]),t._v(" "),s("p",[t._v("确实如此。"),s("a",{attrs:{href:"#%E6%A6%82%E8%BF%B0"}},[t._v("概述")]),t._v("的第 5 点提到，")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("行为描述方式")]),t._v("——使用过程化结构建模；\n"),s("strong",[t._v("数据流方式")]),t._v("——使用连续赋值语句方式建模；"),s("br"),t._v(" "),s("strong",[t._v("结构化方式")]),t._v("——使用门和模块实例语句描述建模。")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("行为描述方式")]),t._v("即是使用赋值、寄存器、"),s("code",[t._v("if")]),t._v("、"),s("code",[t._v("for")]),t._v(" 等流程的 C 语言风格。（面向过程编程）")]),t._v(" "),s("li",[s("code",[t._v("结构化")]),t._v("即是描述各个门，使用线网类型的结构化风格（面向门结构编程）。")]),t._v(" "),s("li",[t._v("至于"),s("code",[t._v("数据流")]),t._v("，是使用 "),s("code",[t._v("out=~(A&B)")]),t._v(" 这种赋值形式替代了门结构的描述（面向数据编程），也是使用线网类型编程")])]),t._v(" "),s("p",[t._v("当然也可以混合编程。")]),t._v(" "),s("p",[t._v("等我学完这一章以后再来看看是不是这样。")]),t._v(" "),s("blockquote",[s("p",[t._v("2019.12.4 更新：改掉了不对的地方。。。顺便总结了面向xx编程。")])]),t._v(" "),s("p",[t._v("最后稍微提一下整数 "),s("code",[t._v("integer")]),t._v(" 类型。")]),t._v(" "),s("blockquote",[s("p",[t._v("在算术运算中被视为二进制补码形式的有符号数。整型数据与 32 位的寄存器型数据在实际意义上相同，只是寄存器型数据被当做无符号数来处理。"),s("br"),t._v("\n需要注意的是虽然 "),s("code",[t._v("interger")]),t._v(" 有位宽度的声明，但是 "),s("code",[t._v("integer")]),t._v(" 型变量不能作为位向量访问。"),s("code",[t._v("D[6]")]),t._v(" 和 "),s("code",[t._v("D[16:0]")]),t._v(" 的声明都是非法的。"),s("br"),t._v("\n在综合时，"),s("code",[t._v("integer")]),t._v(" 型变量的初始值是 "),s("code",[t._v("x")])])]),t._v(" "),s("p",[t._v("其实用的不多，毕竟只是很简略的讲一下 Verilog，寄存器已经够入门使用了。")]),t._v(" "),s("p",[t._v("另外还有实数型、时间型变量，用的不多，就这么提一笔就了了。")]),t._v(" "),s("h3",{attrs:{id:"变量声明-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明-2"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),s("p",[t._v("用到变量前需要声明。")]),t._v(" "),s("p",[t._v("顺便再提一遍，要是没有写类型，默认为 "),s("code",[t._v("wire")]),t._v("。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("integer i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreg cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义信号 cout 的数据类型为 reg")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义信号 out 的数据类型为8位 reg")]),t._v("\n\nwire A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("C"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("F"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义信号 A,B,C,D,F 为 wire（连线）型")]),t._v("\nwire "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明一个 8bit 宽的网络型")]),t._v("\n")])])]),s("p",[t._v("示例：寄存器变量的声明及使用")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mult")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A_IN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B_OUT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninput clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("A_IN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\noutput B_OUT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg arb_onebit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("'b0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nalways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posedge clk "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" posedge rst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbegin\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        arb_onebit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("'b1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        arb_onebit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" A_IN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend\n    B_OUT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" arb_onebit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nendmodule\n")])])]),s("p",[t._v("看不懂代码的更多细节，可以暂时放一下。")]),t._v(" "),s("h3",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),s("p",[t._v("类似于 C 语言的 "),s("code",[t._v("#define")]),t._v(" 宏定义。")]),t._v(" "),s("blockquote",[s("p",[t._v("参数不是变量，而是常量。用参数声明一个可变常量，常用于定义延时及宽度等参数。")])]),t._v(" "),s("p",[t._v("参数定义的例子：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("parameter BUS_WIDTH"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BUS_WIDTH"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" my_reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("示例：参数的声明及使用")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" lpm_reg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" en"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    parameter SIZE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" en"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    wire "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("SIZE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    reg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("SIZE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    always @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posedge clk "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" negedge reset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    begin\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("reset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  out"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("'b0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("en"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  out"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("  out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    end\nendmodule\n")])])]),s("h3",{attrs:{id:"向量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量"}},[t._v("#")]),t._v(" 向量")]),t._v(" "),s("p",[t._v("向量 (vector) 就是数组。")]),t._v(" "),s("p",[t._v("向量的声明示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("wire "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("该声明表示一个位宽为 8 的 "),s("code",[t._v("wire")]),t._v(" 型数据，名为 "),s("code",[t._v("data")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("reg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("63")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("该声明表示一个 256*8 的 "),s("code",[t._v("reg")]),t._v(" 型数组，其中的每个数据是 64 位宽度。")])]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("wire "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("该声明表示一个三维的数组，表示 16 个 256*16 的 "),s("code",[t._v("wire")]),t._v(" 型数据，每个数据 8 位宽度。")])]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("wire "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("声明的 "),s("code",[t._v("a")]),t._v(" "),s("code",[t._v("b")]),t._v(" 都是 3bit 的。不过对于入门，建议分行写 "),s("code",[t._v("wire [2:0] a; wire [2:0] b;")]),t._v("，而不用一些易混淆的语法。")])]),t._v(" "),s("p",[t._v("看了几个例子，应该比较懂了。数组用的不多，倒是变量的位数用的比较多。")]),t._v(" "),s("p",[s("strong",[t._v("声明变量位数是从高到0！！！")])]),t._v(" "),s("p",[t._v("向量的赋值的两个示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\ndata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("注意一定要指明对应位。")]),t._v(" "),s("h2",{attrs:{id:"verilog-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verilog-表达式"}},[t._v("#")]),t._v(" Verilog 表达式")]),t._v(" "),s("h3",{attrs:{id:"操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作符"}},[t._v("#")]),t._v(" 操作符")]),t._v(" "),s("blockquote",[s("p",[t._v("Verilog HDL 中的操作符按功能可以分为下述类型：算术操作符、关系操作符、相等操作符、逻辑操作符、按位操作符、归约操作符、移位操作符、条件操作符、连接和复制操作符；"),s("br"),t._v("\n按运算符所带操作数的个数可分为三类：单目操作符、双目操作符和三目操作符。")])]),t._v(" "),s("p",[t._v("太长不看。")]),t._v(" "),s("p",[t._v("操作符从高到低的优先级（太长不看）：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("操作符")]),t._v(" "),s("th",[t._v("名字")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("+")]),t._v("、"),s("code",[t._v("-")])]),t._v(" "),s("td",[t._v("一元加、减")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("!")])]),t._v(" "),s("td",[t._v("一元逻辑非")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("~")])]),t._v(" "),s("td",[t._v("一元按位求反")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("*")]),t._v("、"),s("code",[t._v("/")]),t._v("、"),s("code",[t._v("%")])]),t._v(" "),s("td",[t._v("乘、除、取模")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("+")]),t._v("、"),s("code",[t._v("-")])]),t._v(" "),s("td",[t._v("二元加、二元减")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("<<")]),t._v("、"),s("code",[t._v(">>")])]),t._v(" "),s("td",[t._v("左移、右移")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("<")]),t._v("、"),s("code",[t._v("<=")]),t._v("、"),s("code",[t._v(">")]),t._v("、"),s("code",[t._v(">=")])]),t._v(" "),s("td",[t._v("小于、小于等于、大于、大于等于")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("==")]),t._v("、"),s("code",[t._v("!=")])]),t._v(" "),s("td",[t._v("逻辑相等、逻辑不等")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("===")]),t._v("、"),s("code",[t._v("!==")])]),t._v(" "),s("td",[t._v("全等、非全等")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("&")]),t._v("、"),s("code",[t._v("^")]),t._v("、"),s("code",[t._v("^~")]),t._v(" (或"),s("code",[t._v("~^")]),t._v(")、"),s("code",[t._v("\\|")])]),t._v(" "),s("td",[t._v("按位与、异或、异或非、或")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("&&")]),t._v("、"),s("code",[t._v("\\|\\|")])]),t._v(" "),s("td",[t._v("逻辑与、逻辑或")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("? :")])]),t._v(" "),s("td",[t._v("条件操作符")])])])]),t._v(" "),s("p",[t._v("注意，"),s("code",[t._v("wire")]),t._v(" 和 "),s("code",[t._v("reg")]),t._v(" 之间不能做任何操作（加减、逻辑运算、相等……）。如果需要进行操作，可以新建一个 "),s("code",[t._v("always")]),t._v(" 语句，将 "),s("code",[t._v("wire")]),t._v(" 赋给另一个 "),s("code",[t._v("reg")]),t._v("。如下：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//尝试比较 reg1 和 wire1")]),t._v("\nreg reg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwire wire1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nalways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    reg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wire1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninitial\n    T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//需要比较的地方")]),t._v("\n")])])]),s("h3",{attrs:{id:"延迟表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延迟表达式"}},[t._v("#")]),t._v(" 延迟表达式")]),t._v(" "),s("blockquote",[s("p",[t._v("Verilog HDL 中，延迟表达式的格式为用圆括号括起来的三个表达式，这三个表达式之间用冒号分隔开。"),s("br"),t._v("\n三个表达式一次代表最小、典型、最大延迟时间值。如"),s("br"),t._v(" "),s("code",[t._v("(a:b:c)+(d:e:f)")]),s("br"),t._v("\n表示最小延迟值为 "),s("code",[t._v("a+d")]),t._v(" 的和，典型延迟值为 "),s("code",[t._v("b+e")]),t._v(" 的和，最大延迟值为 "),s("code",[t._v("c+f")]),t._v(" 的和。")])]),t._v(" "),s("p",[t._v("讲完了。有什么用？不知道。")]),t._v(" "),s("h2",{attrs:{id:"verilog-语言模块描述方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verilog-语言模块描述方式"}},[t._v("#")]),t._v(" Verilog 语言模块描述方式")]),t._v(" "),s("p",[t._v("前面是一堆非常无聊的基础。下面开始重点。")]),t._v(" "),s("p",[s("strong",[t._v("Verilog 分为三大流派：行为级建模、结构级建模，数据流级建模。")])]),t._v(" "),s("blockquote",[s("p",[t._v("模块大致可以按以下三类抽象级别来进行描述。")]),t._v(" "),s("ol",[s("li",[t._v("行为级或算法级的描述方式（行为级建模）；")]),t._v(" "),s("li",[t._v("数据流描述方式（数据流级建模）；")]),t._v(" "),s("li",[t._v("门级描述方式（门级建模）；")])])]),t._v(" "),s("p",[t._v("怎么又回到"),s("a",{attrs:{href:"#%E6%A6%82%E8%BF%B0"}},[t._v("概述")]),t._v("第五点了。。。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("行为描述方式")]),t._v("——使用过程化结构建模；\n"),s("strong",[t._v("数据流方式")]),t._v("——使用连续赋值语句方式建模；"),s("br"),t._v(" "),s("strong",[t._v("结构化方式")]),t._v("——使用门和模块实例语句描述建模。")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("行为描述方式")]),t._v("即是使用"),s("code",[t._v("过程语句")]),t._v("、"),s("code",[t._v("赋值")]),t._v("、"),s("code",[t._v("寄存器")]),t._v("、"),s("code",[t._v("if")]),t._v("、"),s("code",[t._v("for")]),t._v(" 等流程的 C 语言风格。（"),s("strong",[t._v("面向过程编程")]),t._v("）")]),t._v(" "),s("li",[s("code",[t._v("结构化")]),t._v("即是描述各个"),s("code",[t._v("门")]),t._v("，使用"),s("code",[t._v("线网")]),t._v("类型的结构化风格（"),s("strong",[t._v("面向（门）结构编程")]),t._v("）。")]),t._v(" "),s("li",[t._v("至于"),s("code",[t._v("数据流")]),t._v("，是使用 "),s("code",[t._v("out=~(A&B)")]),t._v(" 这种"),s("code",[t._v("连续赋值")]),t._v("形式替代了门结构的描述（"),s("strong",[t._v("面向数据编程")]),t._v("），也是使用线网类型编程")])]),t._v(" "),s("p",[t._v("这便是 Verilog 三种不同流派的语法。下面，我们就用三个大标题，分别来聊这三种不同的模块。")]),t._v(" "),s("h2",{attrs:{id:"模块的结构级描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块的结构级描述"}},[t._v("#")]),t._v(" 模块的结构级描述")]),t._v(" "),s("p",[t._v("结构级就相当于把每个"),s("code",[t._v("元件")]),t._v("描述好，具体仿真以后会发生什么，得看元件的搭配。如下面的直接以"),s("code",[t._v("逻辑门")]),t._v("为单位描述。")]),t._v(" "),s("h3",{attrs:{id:"门级赋值语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#门级赋值语句"}},[t._v("#")]),t._v(" 门级赋值语句")]),t._v(" "),s("p",[t._v("门单元赋值的 Verilog HDL 描述像下面这样：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("该语句实现了与非门 "),s("code",[t._v("y=(a·b·c·d)'")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("注意Verilog 门级赋值语句的输出在前面，输入在后面")])]),t._v(" "),s("p",[t._v("Verilog HDL中提供下列内置基本门：")]),t._v(" "),s("ul",[s("li",[t._v("多输入门："),s("code",[t._v("and")]),t._v(","),s("code",[t._v("nand")]),t._v(","),s("code",[t._v("or")]),t._v(","),s("code",[t._v("nor")]),t._v(","),s("code",[t._v("xor")]),t._v(","),s("code",[t._v("xnor")])]),t._v(" "),s("li",[t._v("多输出门："),s("code",[t._v("buf")]),t._v(","),s("code",[t._v("not")]),t._v("（略）")]),t._v(" "),s("li",[t._v("三态门："),s("code",[t._v("bufif0")]),t._v(","),s("code",[t._v("bufif1")]),t._v(","),s("code",[t._v("notif0")]),t._v(","),s("code",[t._v("notif1")]),t._v("（略）")]),t._v(" "),s("li",[t._v("上拉、下拉电阻："),s("code",[t._v("pullup")]),t._v(","),s("code",[t._v("pulldown")]),t._v("（略）")])]),t._v(" "),s("p",[t._v("语法格式如下：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("gate_type "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("instance_name1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("term11"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("term12"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("term1N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n类型 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("命名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("其中 "),s("code",[t._v("命名")]),t._v(" 是可省的。")]),t._v(" "),s("h4",{attrs:{id:"多输入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多输入门"}},[t._v("#")]),t._v(" 多输入门")]),t._v(" "),s("p",[t._v("顾名思义，多输入、一个输出的门。")]),t._v(" "),s("p",[t._v("有 "),s("code",[t._v("and")]),t._v(","),s("code",[t._v("nand")]),t._v(","),s("code",[t._v("or")]),t._v(","),s("code",[t._v("nor")]),t._v(","),s("code",[t._v("xor")]),t._v(","),s("code",[t._v("xnor")]),t._v("。")]),t._v(" "),s("p",[t._v("注意，参数的"),s("strong",[t._v("输出在前，输入在后！！！")])]),t._v(" "),s("p",[t._v("一堆示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("and RBX "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Sty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Rib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Bro"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Qit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Fi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("该门实例语句是四输入与门，单元名为 "),s("code",[t._v("RBX")]),t._v("（可省），输出为 "),s("code",[t._v("Sty")]),t._v("，4 个输入为 "),s("code",[t._v("Rib")]),t._v("、"),s("code",[t._v("Bro")]),t._v("、"),s("code",[t._v("Qit")]),t._v(" 和 "),s("code",[t._v("Fix")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("xor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Bud"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Bud"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Bud"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("该门实例语句是异或门的具体实例，没有单元名。它的输出是 "),s("code",[t._v("Bar")]),t._v("，三个输入分别为 "),s("code",[t._v("Bud[0]")]),t._v("、"),s("code",[t._v("Bud[1]")]),t._v(" 和 "),s("code",[t._v("Bud[2]")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"多输出门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多输出门"}},[t._v("#")]),t._v(" 多输出门")]),t._v(" "),s("p",[t._v("一堆示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("buf B1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Fan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Fan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Fan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Fan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("该门实例语句中，Clk是缓冲门的输入，门B1有4个输出：Fan[0]到Fan[3]。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("not N1 (PhA,PhB,Ready);\n")])])]),s("p",[t._v("该门实例语句中，Ready是非门的唯一输入端口。门N1有两个输出：PhA和PhB。")]),t._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("`include "),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v('"full_add_1.v"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add4_1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    full_add1 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    full_add2 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    full_add3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    full_add4 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cin3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nendmodule\n")])])]),s("p",[t._v("示例：一位半加器：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" halfadd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" C"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output C"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    wire S1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    nand "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NANDA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nand "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NANDB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("S3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nand "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NANDC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("S3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nand "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NANDD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("S1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("S2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    assign C"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("S3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nendmodule\n")])])]),s("h2",{attrs:{id:"模块的数据流级描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块的数据流级描述"}},[t._v("#")]),t._v(" 模块的数据流级描述")]),t._v(" "),s("blockquote",[s("p",[t._v("数据流描述方式，也称为RTL（寄存器传输级）描述方式。"),s("br"),t._v("\n数据流描述方式"),s("strong",[t._v("类似于布尔方程")]),t._v("，它能够比较直观地表达低层逻辑行为。"),s("br"),t._v("\n用数据流描述方式对一个设计建模的最基本的机制就是使用"),s("strong",[t._v("连续赋值语句")]),t._v("。在连续赋值语句中，某个值"),s("strong",[t._v("被指派给网络变量")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"连续赋值语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连续赋值语句"}},[t._v("#")]),t._v(" 连续赋值语句")]),t._v(" "),s("p",[t._v("也可以使用连续赋值语句实现相同的与非功能：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("assign "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("delay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" LHS_net"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RHS_expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nassign y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// y 必须是 wire 型变量")]),t._v("\n")])])]),s("p",[t._v("为什么叫连续赋值语句？")]),t._v(" "),s("blockquote",[s("p",[t._v("该连续赋值语句表示，输出 "),s("code",[t._v("y")]),t._v(" 的变化跟随输入 "),s("code",[t._v("a")]),t._v("、"),s("code",[t._v("b")]),t._v("、"),s("code",[t._v("c")]),t._v("、"),s("code",[t._v("d")]),t._v(" 的变化而变化，反映了信号变化的连续性。"),s("br"),t._v("\n右边表达式使用的操作数无论何时发生变化, "),s("strong",[t._v("左边表达式都重新计算")]),t._v(", 并且在指定的"),s("strong",[t._v("时延后被赋予左边的网络变量")]),t._v("。"),s("br"),t._v("\n时延定义了右边表达式操作数变化与赋值给左边表达式之间的持续时间。如果没有定义时延值, 默认时延为 0。")])]),t._v(" "),s("p",[t._v("不要手滑把 "),s("code",[t._v("assign")]),t._v(" 放在 "),s("code",[t._v("initial")]),t._v(" 或 "),s("code",[t._v("always")]),t._v(" 里。"),s("code",[t._v("assign")]),t._v(" 是门级描述的等价形式。")]),t._v(" "),s("p",[t._v("示例： 2-4 解码器的 Verilog HDL 数据流描述")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("`timescale 1ns"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("1ns\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Decoder2x4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("EN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("EN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    wire Abar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Bbar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    assign #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" Abar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    assign #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" Bbar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    assign #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Abar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Bbar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" EN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    assign #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Abar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" EN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    assign #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Bbar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" EN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    assign #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" Z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" EN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nendmodule\n")])])]),s("blockquote",[s("p",[t._v("以反引号 "),s("code",[t._v("`")]),t._v(" 开始的第一条语句是编译器指令。"),s("br"),t._v("\n编译器指令"),s("code",[t._v("`timescale")]),t._v("将模块中所有时延的单位设置为 1ns，时间精度为 1ns。"),s("br"),t._v("\n例如，在连续赋值语句中时延值 "),s("code",[t._v("#1")]),t._v(" 和 "),s("code",[t._v("#2")]),t._v(" 分别对应时延 1ns 和 2ns。")]),t._v(" "),s("p",[t._v("模块 "),s("code",[t._v("Decoder2x4")]),t._v(" 有 3 个输入端口和 1 个 4 位输出端口。"),s("br"),t._v("\n网络类型说明了两个连线型变量 "),s("code",[t._v("Abar")]),t._v(" 和 "),s("code",[t._v("Bbar")]),t._v(" 。\n此外，模块包含 6 个连续赋值语句。")])]),t._v(" "),s("p",[t._v("示例的详细说明（太长不看）：")]),t._v(" "),s("blockquote",[s("p",[t._v("当EN在第5ns变化时,语句3、4、5和6执行。这是因为EN是这些连续赋值语句中右边表达式的操作数。"),s("br"),t._v("\nZ[0]在第7ns时被赋予新值0。"),s("br"),t._v("\n当A在第15ns变化时, 语句1、5和6执行。"),s("br"),t._v("\n执行语句5和6不影响Z[0]和Z[1]的取值。"),s("br"),t._v("\n执行语句5导致Z[2]值在第17ns变为0。"),s("br"),t._v("\n执行语句1导致Abar在第16ns被重新赋值。"),s("br"),t._v("\n由于Abar的改变，反过来又导致Z[0]值在第18ns变为1。")])]),t._v(" "),s("p",[t._v("更多的关于 "),s("code",[t._v("#t")]),t._v(" 的解释，请看"),s("a",{attrs:{href:"#initial-%E8%AF%AD%E5%8F%A5"}},[t._v("initial 语句")]),t._v("的时延控制部分。")]),t._v(" "),s("h2",{attrs:{id:"模块的行为级描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块的行为级描述"}},[t._v("#")]),t._v(" 模块的行为级描述")]),t._v(" "),s("p",[t._v("先给一个示例：8 位计数器的 Verilog HDL 行为级描述")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module counter8(clk,clr,out);\n    input clk,clr;\n    output reg[7:0] out;\n    always @(posedge clk or posedge clr)\n    begin \n        if(clr) out<=0;\n        else out<=out+1; \n    end\nendmodule\n")])])]),s("h3",{attrs:{id:"语句块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句块"}},[t._v("#")]),t._v(" 语句块")]),t._v(" "),s("blockquote",[s("p",[t._v("语句块提供将两条或更多条语句组合成语法结构上相当于一条语句的机制。在 Verilog HDL 中有两类语句块，即：")]),t._v(" "),s("ol",[s("li",[t._v("顺序语句块 "),s("code",[t._v("begin")]),t._v("..."),s("code",[t._v("end")]),t._v("：语句块中的语句按给定次序顺序执行。")]),t._v(" "),s("li",[t._v("并行语句块 "),s("code",[t._v("fork")]),t._v("..."),s("code",[t._v("join")]),t._v("：语句块中的语句并行执行。（不常用）")])])]),t._v(" "),s("p",[t._v("注意，"),s("code",[t._v("begin")]),t._v("..."),s("code",[t._v("end")]),t._v(" 或 "),s("code",[t._v("fork")]),t._v("..."),s("code",[t._v("join")]),t._v(" 相当于 C 语言的 "),s("code",[t._v("{")]),t._v("..."),s("code",[t._v("}")]),t._v("（毕竟都是叫代码块），他们俩一个是顺序、一个是并行。")]),t._v(" "),s("p",[t._v("示例：顺序语句块的 Verilog HDL 描述")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("begin\n#"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" Stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" Stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" Stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" Stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" Stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" Stream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend\n")])])]),s("blockquote",[s("p",[t._v("假定顺序语句块在第 10 个时间单位开始执行。两个时间单位后第 1 条语句执行，即第 12 个时间单位。"),s("br"),t._v("\n此执行完成后，下 1 条语句在第 17 个时间单位执行（延迟 5 个时间单位）。然后下 1 条语句在第 20 个时间单位执行，以此类推。")])]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("begin\n    Pat"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Mask"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("Mat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    @ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("negedge Clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        FF"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Pat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend\n")])])]),s("blockquote",[s("p",[t._v("在该例中，第 1 条语句首先执行，然后执行第 2 条语句。"),s("br"),t._v("\n当然，第 2 条语句中的赋值只有在 Clk 上出现负沿时才执行。")])]),t._v(" "),s("p",[t._v("这么说来 "),s("code",[t._v("negedge Clk")]),t._v(" 就是在 "),s("code",[t._v("Clk")]),t._v(" 上出现负沿时才执行。相对应的 "),s("code",[t._v("posedge Clk")]),t._v(" 就是在 "),s("code",[t._v("Clk")]),t._v(" 上出现正沿时才执行。")]),t._v(" "),s("h3",{attrs:{id:"过程语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过程语句"}},[t._v("#")]),t._v(" 过程语句")]),t._v(" "),s("blockquote",[s("p",[t._v("Verilog HDL 中的多数过程模块都从属于以下两种过程语句：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("initial")]),t._v(" 语句")]),t._v(" "),s("li",[s("code",[t._v("always")]),t._v(" 语句\n一个模块中可以包含任意多个 "),s("code",[t._v("initial")]),t._v("或 "),s("code",[t._v("always")]),t._v(" 语句。"),s("br"),t._v("\n这些语句相互并行执行，即这些语句的执行顺序与其在模块中的顺序无关。"),s("br"),t._v("\n一个 "),s("code",[t._v("initial")]),t._v(" 语句或 "),s("code",[t._v("always")]),t._v(" 语句的执行产生一个单独的控制流，所有的 "),s("code",[t._v("initial")]),t._v(" 和 "),s("code",[t._v("always")]),t._v(" 语句在 0 时刻开始并行执行。")])])]),t._v(" "),s("p",[t._v("所有语句（除一开始的声明）都必须包含在 "),s("code",[t._v("initial")]),t._v(" 或 "),s("code",[t._v("always")]),t._v(" 里。")]),t._v(" "),s("h4",{attrs:{id:"initial-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initial-语句"}},[t._v("#")]),t._v(" initial 语句")]),t._v(" "),s("p",[t._v("从英文上看也知道，"),s("code",[t._v("initial")]),t._v("（初始化）语句只在最开始执行一次，即在0时刻开始执行。")]),t._v(" "),s("p",[s("code",[t._v("initial")]),t._v(" 语句的语法如下：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("initial \nbegin\n    statement1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//描述语句1")]),t._v("\n    statement2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//描述语句2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\nend\n")])])]),s("p",[t._v("即使像下面这么写， "),s("code",[t._v("a")]),t._v(" 在 0 时刻会被赋值为 2。")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\ninitial\n    a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("当然，"),s("code",[t._v("initial")]),t._v(" 语句也可以带有时延控制：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("reg Curt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\ninitial\n    #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("寄存器变量 "),s("code",[t._v("a")]),t._v(" 在时刻 2 被赋值为 1。"),s("code",[t._v("initial")]),t._v(" 语句在 0 时刻开始执行，在时刻 2 完成执行。")]),t._v(" "),s("p",[t._v("顺便提一句，这里的 "),s("code",[t._v("2")]),t._v(" 可以用变量替代，还可以用"),s("a",{attrs:{href:"#%E5%BB%B6%E8%BF%9F%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[t._v("延迟表达式")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("#t")]),t._v(" 的含义应为：等待 "),s("code",[t._v("t")]),t._v(" 个单位时间以后执行（而不是在 "),s("code",[t._v("t")]),t._v(" 时刻执行）。"),s("br"),t._v("\n也就是说，如果有两个 "),s("code",[t._v("#")]),t._v(" 叠加，后者语句的执行时间应是二者时间的叠加。在"),s("a",{attrs:{href:"#%E8%AF%AD%E5%8F%A5%E5%9D%97"}},[t._v("语句块")]),t._v("里会有一个例子说明。在"),s("a",{attrs:{href:"#%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5"}},[t._v("连续赋值语句")]),t._v("有一个更详细的例子说明。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("initial")]),t._v(" 语句通常用于仿真模块对激励向量的描述，或用于给寄存器变量赋初值，它是面向模拟仿真过程的语句，不能被综合。")])]),t._v(" "),s("p",[t._v("顺便一提，顺序过程 "),s("code",[t._v("begin")]),t._v("、"),s("code",[t._v("end")]),t._v(" 最常使用在进程语句中。")]),t._v(" "),s("p",[t._v("下面是更复杂的、带有顺序过程的 "),s("code",[t._v("initial")]),t._v(" 语句：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("parameter SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nreg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" RAM "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("SIZE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg RibReg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninitial\nbegin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" SEQ_BLK_A\n    integer Index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    RibReg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        RAM "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend\n")])])]),s("p",[t._v("这一 "),s("code",[t._v("initial")]),t._v("语句在执行时将所有的内存初始化为 0。")]),t._v(" "),s("p",[s("code",[t._v("SEQ_BLK_A")]),t._v(" 是顺序过程的标记；如果过程中没有局部说明部分，不要求这一标记。")]),t._v(" "),s("h4",{attrs:{id:"always-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#always-语句"}},[t._v("#")]),t._v(" always 语句")]),t._v(" "),s("blockquote",[s("p",[t._v("与 "),s("code",[t._v("initial")]),t._v(" 语句相反，"),s("code",[t._v("always")]),t._v(" 语句重复执行。")])]),t._v(" "),s("p",[t._v("与 "),s("code",[t._v("initial")]),t._v(" 语句类似，"),s("code",[t._v("always")]),t._v(" 语句语法如下：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("always @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("敏感信号表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbegin\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//过程赋值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//if-else,case语句")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//while,repeat,for循环语句")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//task,function调用")]),t._v("\nend\n")])])]),s("p",[s("code",[t._v("always@(*)")]),t._v(" 在功能上类似于无条件的 "),s("code",[t._v("while(true)")]),t._v("，而 "),s("code",[t._v("always @()")]),t._v(" ；类似于有条件的 "),s("code",[t._v("while")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意，在 testbench （仿真）的过程中，"),s("code",[t._v("always(*)")]),t._v(" 是错误的写法，只能写 "),s("code",[t._v("always")]),t._v("；"),s("br"),t._v("\n而在编程文件中，只能写 "),s("code",[t._v("always(*)")]),t._v("，"),s("code",[t._v("always")]),t._v(" 这样是错误的")])]),t._v(" "),s("p",[s("code",[t._v("always")]),t._v(" 本身只影响到下面的一句话，配合 "),s("code",[t._v("begin")]),t._v("..."),s("code",[t._v("end")]),t._v(" （即代码块）才能够实现装很多句话。")]),t._v(" "),s("p",[t._v("示例："),s("code",[t._v("always")]),t._v(" 过程实现计数器的过程")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("always @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posedge clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbegin\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend\n")])])]),s("p",[t._v("示例："),s("code",[t._v("always")]),t._v(" 实现时钟信号（"),s("a",{attrs:{href:"https://blog.csdn.net/qq_33929689/article/details/51842606",target:"_blank",rel:"noopener noreferrer"}},[t._v("源代码链接"),s("OutboundLink")],1),t._v("）")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output reg clock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在零时刻把clock变量初始化")]),t._v("\ninitial\n    clock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("'b0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//每半个周期把clock信号翻转一次")]),t._v("\nalways\n    #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" clock"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("clock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninitial \n    #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" $finish"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1000个时间单位后，停止仿真")]),t._v("\n\nendmodule\n")])])]),s("blockquote",[s("p",[s("code",[t._v("always")]),t._v(" 语句有一个过程性赋值。因为 "),s("code",[t._v("always")]),t._v(" 语句重复执行，并且在此例中没有时延控制，过程语句将在 0 时刻无限循环。因此，"),s("code",[t._v("always")]),t._v(" 语句的执行必须带有某种时序控制。")])]),t._v(" "),s("p",[t._v("示例："),s("code",[t._v("always")]),t._v(" 语句用于 4 选 1 开关")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" mux4 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\noutput "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nalways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbegin\n    case "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("'b00"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("'b01"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("'b10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        default"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    endcase\nend\nendmodule\n")])])]),s("p",[t._v("这里涉及到了 "),s("a",{attrs:{href:"#case"}},[t._v("case")]),t._v(" 语句。也是和 C 语言比较类似。")]),t._v(" "),s("p",[t._v("示例：敏感信号为时钟沿的 "),s("code",[t._v("always")]),t._v(" 语句的 Verilog HDL 描述")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" EXAMPLE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CLK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" DI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput CLK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\noutput "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" DO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" DO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nalways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posedge CLK "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" posedge RST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RST"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("'b1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        DO"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("'b00000000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        DO"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("DI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nendmodule\n")])])]),s("h3",{attrs:{id:"过程赋值语句-行为级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过程赋值语句-行为级"}},[t._v("#")]),t._v(" 过程赋值语句（行为级）")]),t._v(" "),s("p",[t._v("一段话分了五页 ppt 预警")]),t._v(" "),s("blockquote",[s("p",[t._v("过程赋值语句的硬件实现是：从赋值语句右边提取出的逻辑，用于驱动赋值语句左边的变量（必须是 "),s("code",[t._v("reg")]),t._v("型）。有两种类型的过程赋值语句：")]),t._v(" "),s("ul",[s("li",[t._v("阻塞赋值语句（Blocking Assignment Statement）")]),t._v(" "),s("li",[t._v("非阻塞赋值语句（Non-blocking Assignment Statement）")])])]),t._v(" "),s("h4",{attrs:{id:"阻塞赋值语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞赋值语句"}},[t._v("#")]),t._v(" 阻塞赋值语句")]),t._v(" "),s("blockquote",[s("p",[t._v("以赋值操作符 "),s("code",[t._v("=")]),t._v(" 来标识的赋值的操作称为阻塞型过程赋值语句，阻塞赋值语句可以简述为：在一个 "),s("code",[t._v("always")]),t._v(" 块中，语句是按从上到下顺序执行的。它具有如下特点：")]),t._v(" "),s("ol",[s("li",[t._v("顺序块内的各条阻塞语句以它们在顺序块中的排列先后次序依次得到执行；而并行块中的各条阻塞赋值语句则是同时得到执行。")]),t._v(" "),s("li",[t._v("阻塞赋值语句的执行过程是：首先计算右端赋值表达式的取值，然后立即将计算结果赋值给 "),s("code",[t._v("=")]),t._v(" 左端的被赋值变量。 这种语句更多的用在行为仿真和时序仿真的过程中。")])])]),t._v(" "),s("h4",{attrs:{id:"非阻塞赋值语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞赋值语句"}},[t._v("#")]),t._v(" 非阻塞赋值语句")]),t._v(" "),s("blockquote",[s("p",[t._v("以赋值操作符 "),s("code",[t._v("<=")]),t._v(" 来标识的赋值操作的也是出现在 "),s("code",[t._v("initial")]),t._v(" 和 "),s("code",[t._v("always")]),t._v(" 块语句中，在非阻塞赋值语句中，赋值号 "),s("code",[t._v("<=")]),t._v(" 左边的赋值变量也必须是 "),s("code",[t._v("reg")]),t._v(" 型变量，其值不像在过程赋值语句那样，语句结束时即刻得到，而在该块语句结束才可得到。")]),t._v(" "),s("p",[t._v("非阻塞赋值语句的特点如下：")]),t._v(" "),s("ol",[s("li",[t._v("在 "),s("code",[t._v("begin-end")]),t._v(" 顺序语句块中，一条非阻塞赋值语句块的执行不会阻塞下一条语句的执行，即在本条非阻塞赋值语句对应的赋值操作执行完毕之前，下一条语句才可以开始执行。")]),t._v(" "),s("li",[t._v("仿真过程在遇到非阻塞型赋值语句后，首先计算其右端赋值表达式的值，然后要等到当前仿真时间结束时再将该计算结果赋值给被赋值变量，即非阻塞赋值操作时在同一仿真时刻上的其他普通操作结束之后才得到执行的。"),s("br"),t._v("\n因此非阻塞赋值语句的这个特点是不同于阻塞型赋值语句的执行时序特点的。")])])]),t._v(" "),s("p",[t._v("这写的什么玩意。看不懂看不懂。")]),t._v(" "),s("p",[t._v("例子：非阻塞赋值的 Verilog HDL 描述")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("block")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" output reg a3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nalways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posedge clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbegin\n  a2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  a3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend \nendmodule\n")])])]),s("p",[t._v("例子：阻塞赋值的 Verilog HDL 描述")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("block")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" output reg a3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nalways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posedge clk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbegin\n  a2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  a3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend \nendmodule\n")])])]),s("p",[t._v("只有赋值符号不同。")]),t._v(" "),s("p",[s("s",[t._v("在这里第一次使用了 Xilinx 编程测试")])]),t._v(" "),s("p",[t._v("将上面两段代码分别进行仿真测试，测试代码如下：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("initial begin\n    a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    clk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    clk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend\n")])])]),s("p",[t._v("测试的结果显示：")]),t._v(" "),s("blockquote",[s("p",[t._v("对于非阻塞型的 "),s("code",[t._v("<=")]),t._v("，100ns 后 "),s("code",[t._v("a2")]),t._v(" 变为 1，而 "),s("code",[t._v("a3")]),t._v(" 仍为 "),s("code",[t._v("x")]),t._v("。"),s("br"),t._v("\n阻塞型的 "),s("code",[t._v("=")]),t._v("，100ns 后 "),s("code",[t._v("a2")]),t._v(" 和  "),s("code",[t._v("a3")]),t._v(" 都变为 1。")])]),t._v(" "),s("p",[t._v("这很好的解释了二者的区别，简单的来说就是：")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("<=")]),t._v(" 是并行执行的，"),s("code",[t._v("=")]),t._v(" 是顺序执行的。")])]),t._v(" "),s("p",[t._v("并行的那个是非阻塞，顺序执行的是阻塞。记一下就行。")]),t._v(" "),s("p",[t._v("顺便，"),s("code",[t._v("<=")]),t._v(" 和 "),s("code",[t._v("=")]),t._v(" 这些赋值都是 "),s("code",[t._v("reg")]),t._v(" 的玩意。"),s("code",[t._v("wire")]),t._v(" 没有赋值的概念，只能把他接到某一个门的输出。 "),s("code",[t._v("wire")]),t._v(" 可以使用门，或者数据流 "),s("code",[t._v("assign a = 1'b0;")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"流程控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[t._v("#")]),t._v(" 流程控制")]),t._v(" "),s("h4",{attrs:{id:"if-else"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-else"}},[t._v("#")]),t._v(" if-else")]),t._v(" "),s("p",[t._v("写法和 C++ 一样，只是判断执行标准时，如果是 "),s("code",[t._v("0zx")]),t._v(" 之一，就不执行。")]),t._v(" "),s("p",[t._v("注意，"),s("code",[t._v("reg")]),t._v(" 和 "),s("code",[t._v("wire")]),t._v(" 不能直接作比较。解决方案参考 "),s("a",{attrs:{href:"#%E6%93%8D%E4%BD%9C%E7%AC%A6"}},[t._v("操作符")]),t._v("。")]),t._v(" "),s("p",[t._v("示例：使用 "),s("code",[t._v("if-else")]),t._v(" 实现 D 触发器")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" v_registers_2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("CLR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input C"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CLR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    reg Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    always @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("negedge C "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" posedge CLR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    begin\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  Q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("'b0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("      Q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("D"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    end\nendmodule\n")])])]),s("h4",{attrs:{id:"case"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#case"}},[t._v("#")]),t._v(" case")]),t._v(" "),s("p",[t._v("和 C 语言的写法稍微有点不同，用法一样。不需要 "),s("code",[t._v("break")]),t._v("，有 "),s("code",[t._v("default")]),t._v("。")]),t._v(" "),s("p",[t._v("示例："),s("code",[t._v("case")]),t._v(" 语句实现多路选择器的 Verilog HDL 语句")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" mux4 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tinput "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\toutput reg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\talways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tbegin\n        case "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("'b00"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("'b01"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("'b10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            default"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" outmux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        endcase\n\tend\nendmodule\n")])])]),s("p",[t._v("示例："),s("code",[t._v("case")]),t._v(" 语句实现 3-8 译码器的 Verilog HDL 语句")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" v_decoders_1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    reg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    always @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    begin\n        case "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v("'b000 : res=8'")]),t._v("b00000001"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v("'b001 : res=8'")]),t._v("b00000010"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v("'b010 : res=8'")]),t._v("b00000100"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v("'b011 : res=8'")]),t._v("b00001000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v("'b100 : res=8'")]),t._v("b00010000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v("'b101 : res=8'")]),t._v("b00100000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token string quoted-string"}},[t._v("'b110 : res=8'")]),t._v("b01000000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            default "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("'b10000000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        endcase\n    end\nendmodule\n")])])]),s("p",[s("s",[t._v("居然是枚举。。。")])]),t._v(" "),s("blockquote",[s("p",[t._v("单篇笔记 1000 行纪念。")])]),t._v(" "),s("p",[t._v("对于 "),s("code",[t._v("z")]),t._v(" 和 "),s("code",[t._v("x")]),t._v("，还有 "),s("code",[t._v("casex")]),t._v(" 和 "),s("code",[t._v("casez")]),t._v("。用法和上面一样。示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("casez")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("'b1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("'b01"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("'b001"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("'b0001 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nendcase\n")])])]),s("p",[s("code",[t._v("casez")]),t._v(" 语句表示：")]),t._v(" "),s("ul",[s("li",[t._v("如果 "),s("code",[t._v("Mask")]),t._v(" 的第 1 位是 1（忽略其它位），那么将 "),s("code",[t._v("Dbus[4]")]),t._v(" 赋值为0；")]),t._v(" "),s("li",[t._v("如果 "),s("code",[t._v("Mask")]),t._v(" 的第 1 位是 0 ，并且第 2 位是 1（忽略其它位），那么 "),s("code",[t._v("Dbus[3]")]),t._v(" 被赋值为 0；")]),t._v(" "),s("li",[t._v("依此类推。")])]),t._v(" "),s("p",[s("code",[t._v("casex")]),t._v(" 和 "),s("code",[t._v("casez")]),t._v("的区别在于：")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("casez")]),t._v(" treats all the z values in the case expression as don't cares while "),s("code",[t._v("casex")]),t._v(" treats all the x and z values in the case expression as don't cares.")])]),t._v(" "),s("h4",{attrs:{id:"forever"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#forever"}},[t._v("#")]),t._v(" forever")]),t._v(" "),s("p",[t._v("字如其人。")]),t._v(" "),s("p",[t._v("示例："),s("code",[t._v("forever")]),t._v(" 实现时钟")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("initial begin\n    Clock"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" forever\n        #"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" Clock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("Clock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nend\n")])])]),s("blockquote",[s("p",[t._v("这一实例产生时钟波形：时钟首先初始化为 0 ，并一直保持到第 5 个时间单位。"),s("br"),t._v("\n此后每隔 10 个时间单位，"),s("code",[t._v("Clock")]),t._v(" 反相一次。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意，在过程语句中必须使用某种形式的时序控制（如 "),s("code",[t._v("#10")]),t._v("），否则， "),s("code",[t._v("forever")]),t._v(" 循环将在 0 时后永远死循环下去。")])]),t._v(" "),s("p",[t._v("它和 "),s("code",[t._v("always")]),t._v(" 的区别是，"),s("code",[t._v("always")]),t._v(" 的级别更高，但功能上貌似可以互相替代。")]),t._v(" "),s("h4",{attrs:{id:"repeat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repeat"}},[t._v("#")]),t._v(" repeat")]),t._v(" "),s("p",[t._v("循环的时候直接指定了重复次数。"),s("code",[t._v("xz")]),t._v(" 被视为 0。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("repeat "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrepeat "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Shift By"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    P_Reg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("P_Reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("forever")]),t._v(" 相当于 "),s("code",[t._v("repeat(infinity)")]),t._v("（当然，是没有这种写法的）")]),t._v(" "),s("h4",{attrs:{id:"while"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while"}},[t._v("#")]),t._v(" while")]),t._v(" "),s("p",[t._v("和 C 语言一样。另外，"),s("code",[t._v("xz")]),t._v(" 被视为 0。")]),t._v(" "),s("p",[t._v("示例：（顺序查找 "),s("code",[t._v("0")]),t._v("？）")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("parameter P "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nalways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ID_complete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbegin "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" UNIDENTIFIED\n    integer i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    reg found"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    unidentified"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    found "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    while "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("found "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" P"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    begin\n        found "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ID_complete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        unidentified"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ID_complete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    end\nend\n")])])]),s("h4",{attrs:{id:"for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[t._v("#")]),t._v(" for")]),t._v(" "),s("p",[t._v("和 C 语言一样。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" countzeros "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    input "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    output reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    reg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Count_Aux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    integer i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    always @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    begin\n        Count_Aux "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("'b0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        begin\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Count_Aux "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Count_Aux"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        end\n        Count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Count_Aux"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    end\nendmodule\n")])])]),s("p",[t._v("示例：输入 8bit "),s("code",[t._v("wire")]),t._v(" 类型数据，判断其是否为质数")]),t._v(" "),s("div",{staticClass:"language-v extra-class"},[s("pre",{pre:!0,attrs:{class:"language-v"}},[s("code",[t._v("`timescale 1ns "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 1ps\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hw36")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" F"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninput "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\noutput reg F"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("N_reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\talways @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tbegin\n\t\tN_reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N_reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t\tbegin\n\t\t\tF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" N_reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" F "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N_reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t\tF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tend\n\tend\n\t\t\nendmodule\n")])])]),s("h2",{attrs:{id:"用户自定义基本元件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户自定义基本元件"}},[t._v("#")]),t._v(" 用户自定义基本元件")]),t._v(" "),s("p",[t._v("PPT 第 128-144 页。感觉不会考这么难。")]),t._v(" "),s("h2",{attrs:{id:"verilog-系统任务和函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verilog-系统任务和函数"}},[t._v("#")]),t._v(" Verilog 系统任务和函数")]),t._v(" "),s("p",[t._v("PPT 第 145-147 页。感觉不会考这么难。")]),t._v(" "),s("h2",{attrs:{id:"verilog-用户定义任务和函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verilog-用户定义任务和函数"}},[t._v("#")]),t._v(" Verilog 用户定义任务和函数")]),t._v(" "),s("p",[t._v("PPT 第 148-163 页。感觉不会考这么难。")]),t._v(" "),s("p",[t._v("完结撒花。")])])}),[],!1,null,null,null);s.default=e.exports}}]);