(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{443:function(_,a,t){"use strict";t.r(a);var v=t(3),s=Object(v.a)({},(function(){var _=this,a=_.$createElement,t=_._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"第一章-量化设计与分析基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一章-量化设计与分析基础"}},[_._v("#")]),_._v(" 第一章 量化设计与分析基础")]),_._v(" "),t("h3",{attrs:{id:"引言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[_._v("#")]),_._v(" 引言")]),_._v(" "),t("h4",{attrs:{id:"处理器惊人的性能改进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理器惊人的性能改进"}},[_._v("#")]),_._v(" 处理器惊人的性能改进")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/c41ef765f8191573d0e90137e7fc29f14f38ff83ce79065843de8b497190bc2b.png",alt:"处理器惊人的性能改进"}})]),_._v(" "),t("p",[_._v("分析：")]),_._v(" "),t("ul",[t("li",[_._v("每年 25%（1978-1986）: 性能增长主要依赖实现技术的进步")]),_._v(" "),t("li",[_._v("每年 52%（1986-2003）: 性能增长依赖两方面：\n"),t("ul",[t("li",[_._v("系统结构革新（"),t("strong",[_._v("RISC")]),_._v("，"),t("strong",[_._v("指令级并行")]),_._v(" (ILP) 技术与Cache）；")]),_._v(" "),t("li",[_._v("实现技术的进步")])])]),_._v(" "),t("li",[_._v("每年 22%（2004-2010）: ILP 开发的限制，功耗限制，因此其后性能提升手段出现了以下趋势：\n"),t("ul",[t("li",[_._v("ILP  变为 "),t("strong",[_._v("TLP and DLP")]),_._v("（线程级并行和数据级并行）")]),_._v(" "),t("li",[_._v("更快的单核处理器 变为 "),t("strong",[_._v("单芯片多处理器")]),_._v("（多核）")]),_._v(" "),t("li",[_._v("隐含在编译器和硬件的硬件级并行处理 变为 显示的"),t("strong",[_._v("程序级并行")])])])])]),_._v(" "),t("h3",{attrs:{id:"计算机的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机的分类"}},[_._v("#")]),_._v(" 计算机的分类")]),_._v(" "),t("h4",{attrs:{id:"基于指令流和数据流数量分类-xixd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于指令流和数据流数量分类-xixd"}},[_._v("#")]),_._v(" 基于指令流和数据流数量分类 (XIXD)")]),_._v(" "),t("h4",{attrs:{id:"基于市场分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于市场分类"}},[_._v("#")]),_._v(" 基于市场分类")]),_._v(" "),t("h3",{attrs:{id:"计算机系统结构定义与计算机的设计任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机系统结构定义与计算机的设计任务"}},[_._v("#")]),_._v(" 计算机系统结构定义与计算机的设计任务")]),_._v(" "),t("h4",{attrs:{id:"计算机系统结构-原始定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机系统结构-原始定义"}},[_._v("#")]),_._v(" 计算机系统结构（原始定义）")]),_._v(" "),t("p",[_._v("计算机系统结构的原始慨念：")]),_._v(" "),t("blockquote",[t("p",[_._v("由程序员看见的计算机系统，就是"),t("strong",[_._v("慨念性结构")]),_._v("和"),t("strong",[_._v("功能行为")]),_._v("，以区分数据流动和控制逻辑设计的组成及物理实现。  -- Amdahl, Blaaw, and Brooks, 1964")])]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/e210f27c2af7a036b31d165446e01c6f0da4ffc97fe7f6eae9c7870a1f73fd96.png",alt:"指令系统"}})]),_._v(" "),t("p",[_._v("下面讨论"),t("strong",[_._v("计算机系统结构")]),_._v("、"),t("strong",[_._v("计算机组成")]),_._v("和"),t("strong",[_._v("物理实现")]),_._v("及其关系关系。")]),_._v(" "),t("blockquote",[t("p",[_._v("经典的"),t("strong",[_._v("计算机系统结构")]),_._v("是机器语言程序员所看到的传统机器级所具有的"),t("strong",[_._v("属性")]),_._v("。它确定计算机系统的软、硬件界面。\n"),t("strong",[_._v("计算机组成")]),_._v("指的是计算机系统结构的"),t("strong",[_._v("逻辑实现")]),_._v("，包括五大功能部件组成以及逻辑设计等。它着眼于机器级内各事件的排序方式与控制方式，各部件的功能以及各部件的联系。\n"),t("strong",[_._v("计算机实现")]),_._v("指的是计算机组成的"),t("strong",[_._v("物理实现")]),_._v("，包括处理机、主存等部件的物理结构，器件的集成度和速度功耗，模块、插件、底板的划分与连接，信号传输，电源、冷却及整机装配技术等。它着眼于器件技术和微组装技术，其中器件技术在实现技术中占主导作用。")])]),_._v(" "),t("blockquote",[t("p",[_._v("① 主存容量与编址方式(按位、按字节、按字访问等)的确定属于计算机系统结构。\n② 为达到所定性能价格比，主存速度应多快，在逻辑结构上需采用什么措施(如多体交叉存储等)属于计算机组成。\n③ 主存系统的物理实现，如存储器器件的选定、逻辑电路的设计、微组装技术的选定属于计算机实现。")])]),_._v(" "),t("blockquote",[t("p",[_._v("具有"),t("strong",[_._v("相同计算机系统结构")]),_._v("(指令系统相同)的计算机，因为速度要求不同等因素可以采用"),t("strong",[_._v("不同的计算机组成")]),_._v("。例如，AMD Opteron 64与 Intel Pentium 4的指令系统相同，即两者的系统结构相同；但内部组成不同，流水线和Cache结构是完全不同的，相同的程序在两个机器上的的运行时间可能不同。\n"),t("strong",[_._v("一种计算机组成")]),_._v("可以采用多种"),t("strong",[_._v("不同的计算机实现")]),_._v("。例如，主存器件可以采用SRAM芯片，也可以采用DRAM芯片。")])]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("系列机")]),_._v("（family machine）：是指由一个制造商生产的具有相同的系统结构，但具有不同组成和实现的一系列不同型号的计算机。\n主要缺点：系列机为了保证软件的向后兼容，要求体系结构基本不改变，这无疑又妨碍了计算机体系结构的发展。")])]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("软件兼容性")]),_._v("：同一个软件可以不加修改地运行于系统结构相同的各档机器上，而且运行结果一样，差别只是运行时间不同。\n向"),t("strong",[_._v("后")]),_._v("兼容：在某一时间生产的机器上运行的目标软件能够直接运行于更晚生产的机器上。\n向"),t("strong",[_._v("上")]),_._v("兼容：在低档机器上运行的目标软件能够直接运行于高档机器上。")])]),_._v(" "),t("h4",{attrs:{id:"计算机系统结构-现代定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机系统结构-现代定义"}},[_._v("#")]),_._v(" 计算机系统结构（现代定义）")]),_._v(" "),t("blockquote",[t("p",[_._v("计算机系统结构（现代定义）：是在满足功能、性能和价格目标的条件下，设计、选择和互连硬件部件构成计算机。")])]),_._v(" "),t("p",[_._v("系统结构覆盖了：")]),_._v(" "),t("ul",[t("li",[_._v("指令系统设计")]),_._v(" "),t("li",[_._v("组成（Organization）：计算机设计方面的高层次\n"),t("ul",[t("li",[_._v("CPU内部结构、存储器、I/O系统、多处理器、网络")]),_._v(" "),t("li",[_._v("硬件: 计算机的具体实现技术")]),_._v(" "),t("li",[_._v("详细逻辑设计、封装、冷却系统、板级设计，功耗等")])])])]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/9c121277140d7e947db4dafc4fbe194bbe6240111b553e771bd8b4a3ed553a96.png",alt:"计算机系统结构（单处理器）"}})]),_._v(" "),t("p",[_._v("绿色部分 (ILP) 本课程不讲，只讲黄色部分。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/99f94e94f25e5063eb6023b9342c3649169d261960d030194256612cfccb64ad.png",alt:"计算机系统结构（多处理器）"}})]),_._v(" "),t("h2",{attrs:{id:"第三章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三章"}},[_._v("#")]),_._v(" 第三章")]),_._v(" "),t("h3",{attrs:{id:"结构冒险"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构冒险"}},[_._v("#")]),_._v(" 结构冒险")]),_._v(" "),t("h3",{attrs:{id:"数据冒险"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据冒险"}},[_._v("#")]),_._v(" 数据冒险")]),_._v(" "),t("p",[_._v("解决办法：")]),_._v(" "),t("ol",[t("li",[_._v("软件方法：编译器插入NOP（暂停相关流水线）")]),_._v(" "),t("li",[_._v("硬件方法1：硬件插入 stall（暂停相关流水线）")]),_._v(" "),t("li",[_._v("硬件方法2：内部前推")]),_._v(" "),t("li",[_._v("硬件方法3：stall+内部前推（针对 store 指令）")])]),_._v(" "),t("h4",{attrs:{id:"硬件插入-stall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#硬件插入-stall"}},[_._v("#")]),_._v(" 硬件插入 stall")]),_._v(" "),t("p",[_._v("核心：ID 指令等前面的指令走完 WB （写寄存器）以后再继续（读寄存器）")]),_._v(" "),t("p",[t("strong",[_._v("停顿条件：(ID 级指令 rs1/2 == EXE/MEM 级指令 rd) && (EXE/MEM 级指令要写寄存器) && (ID 级要读寄存器)")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("DEPEN=(ID_rs1==EXE_rd)(EXE_WREG==1)(ID_rs1IsReg)+\n      (ID_rs1==MEM_rd)(MEM_WREG==1)(ID_rs1IsReg)+\n      (ID_rs2==EXE_rd)(EXE_WREG==1)(ID_rs2IsReg)+\n       (ID_rd==EXE_rd)(EXE_WREG==1)(store)+\n      (ID_rs2==MEM_rd)(MEM_WREG==1)(ID_rs2IsReg)+\n       (1D_rd==MEM_rd)(MEM_WREG==1)(store)\n")])])]),t("ul",[t("li",[t("code",[_._v("ID_rs1IsReg")]),_._v(" 条件是为了排除转移指令")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("ID_rs1IsReg=and+andi+or+ori+add+addi+sub+subi+load+store\nID_rs2IsReg=and+or+add+sub（排除立即数运算指令）\n")])])]),t("hr"),_._v(" "),t("p",[_._v("进行简单改写：")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("DEPEN = A_DEPEN + B_DEPEN\nA_DEPEN = EXE_A_DEPEN + MEM_A_DEPEN\nB_DEPEN = EXE_B_DEPEN + MEM_B_DEPEN\n\nEXE_A_DEPEN = (ID_rs1==EXE_rd)(EXE_WREG==1)(ID_rs1IsReg)\nMEM_A_DEPEN = (ID_rs1==MEM_rd)(MEM_WREG==1)(ID_rs1IsReg)\nEXE_B_DEPEN = (ID_rs2==EXE_rd)(EXE_WREG==1)(ID_rs2IsReg) +\n               (ID_rd==EXE_rd)(EXE_WREG==1)(store)\nMEM_B_DEPEN = (ID_rs2==MEM_rd)(MEM_WREG==1)(ID_rs2IsReg)\n               (1D_rd==MEM_rd)(MEM_WREG==1)(store)\n")])])]),t("h4",{attrs:{id:"内部前推-forwading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内部前推-forwading"}},[_._v("#")]),_._v(" 内部前推 forwading")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/544c090f1945ced01ccdaadf6ea9ab5e2191e910329a21859f6a334ca859170e.png",alt:"内部前推 初版"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/0fd1ae059c05b774d2917c4426db53ae4f6fea81d0bd7384cc82ee49585b0556.png",alt:"内部前推 时序图"}})]),_._v(" "),t("p",[t("strong",[_._v("注意时序图里 forwarding 箭头的写法！")])]),_._v(" "),t("p",[_._v("上一个计算结果可以直接从 ALU 里拿出来，至于多路选择哪个值，就是 "),t("code",[_._v("ADEPEN")]),_._v(" 和 "),t("code",[_._v("BDEPEN")]),_._v(" 的事情了。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("MEM_WREG")]),_._v(" "),t("th",[_._v("EXE_rs1=MEM_rd")]),_._v(" "),t("th",[_._v("WB_WREG")]),_._v(" "),t("th",[_._v("EXE_rs1=WB_rd")]),_._v(" "),t("th",[_._v("ADEPEN")]),_._v(" "),t("th",[_._v("ALU 输入选择(A端)")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("x")]),_._v(" "),t("td",[_._v("x")]),_._v(" "),t("td",[_._v("2")]),_._v(" "),t("td",[_._v("MEM_R")])]),_._v(" "),t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("3")]),_._v(" "),t("td",[_._v("WB_C")])]),_._v(" "),t("tr",[t("td",[_._v("0")]),_._v(" "),t("td",[_._v("x")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("3")]),_._v(" "),t("td",[_._v("WB_C")])]),_._v(" "),t("tr",[t("td",[_._v("其他情况")]),_._v(" "),t("td"),_._v(" "),t("td"),_._v(" "),t("td"),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("A")])])])]),_._v(" "),t("p",[_._v("还是比较显然的。")]),_._v(" "),t("p",[_._v("B 端就比 A 端多一个条件：当 "),t("code",[_._v("EXE_rs2IsReg")]),_._v(" 成立时就走立即数 ("),t("code",[_._v("BDEPEN=2")]),_._v(")；其他情况下，按 A 端规则进行判断。")]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("和 stall 不同的是：")]),_._v(" "),t("ol",[t("li",[_._v("forwarding 考虑的是 EXE 指令和 MEM/WB 指令的关系，stall 考虑的是 ID 指令和 EXE/MEM 指令的关系")]),_._v(" "),t("li",[_._v("forwading 不需要考虑转移指令，因为这类指令走不到 EXE 级")])]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("进行改进：将检测数据相关的时间从 EXE 级提前到 ID 级。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/ab09b1e3bea2268297c3226b1629bb925fde236fa25387fecedc877a9eff1a0b.png",alt:"内部前推 改进"}})]),_._v(" "),t("h4",{attrs:{id:"处理-load-指令-stall-forwarding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理-load-指令-stall-forwarding"}},[_._v("#")]),_._v(" 处理 load 指令: stall + forwarding")]),_._v(" "),t("p",[_._v("1 stall + 1 forwading 可以解决 EXE 级 store 和 ID 级 ALU 的数据冲突（称为 "),t("code",[_._v("load 冒险")]),_._v("）。")]),_._v(" "),t("p",[_._v("0 stall + 1 forwading 可以解决 MEM 级 store 和 ID 级 ALU 的数据冲突。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/58622010cfae339191b479b4f6260bc01a94cd25ea7b7e37f1e9fdb21f834bd6.png",alt:"stall + forwarding"}})]),_._v(" "),t("h4",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("指令")]),_._v(" "),t("th",[_._v("stall/nop")]),_._v(" "),t("th",[_._v("forwarding")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("ALU 指令")]),_._v(" "),t("td",[_._v("2 stalls")]),_._v(" "),t("td",[_._v("0 stalls + 1 forwarding")])]),_._v(" "),t("tr",[t("td",[_._v("store 指令")]),_._v(" "),t("td",[_._v("2 stalls")]),_._v(" "),t("td",[_._v("1 stall + 1 forwarding")])])])]),_._v(" "),t("h3",{attrs:{id:"控制冒险"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制冒险"}},[_._v("#")]),_._v(" 控制冒险")]),_._v(" "),t("p",[_._v("三种解决方法")]),_._v(" "),t("ol",[t("li",[_._v("暂停流水线（插 nop 或使用硬件方法）")]),_._v(" "),t("li",[_._v("假定转移不发生（针对条件转移）")])]),_._v(" "),t("h4",{attrs:{id:"暂停流水线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暂停流水线"}},[_._v("#")]),_._v(" 暂停流水线")]),_._v(" "),t("p",[_._v("使用软件方法的话，"),t("code",[_._v("beq")]),_._v(" "),t("code",[_._v("bne")]),_._v("需要前插 1 个 nop，后插一个 nop；"),t("code",[_._v("branch")]),_._v(" 需要后插一个 nop。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/53296300cbab5a770b9e0caef8648ea3533020ee966447cdacfd5456a97dd777.png",alt:"插入 nop"}})]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("使用硬件方法就要麻烦一些了。")]),_._v(" "),t("p",[_._v("首先要终止后面一条指令的执行，不然转移发生的时候，后一条指令已经到 ID 了，还将继续执行。")]),_._v(" "),t("p",[_._v("解决办法和 stall 类似，封锁指令的 WZ、WMEM、WREG。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/e19c3ed2a48466a604bee97c2c86752f2d8c63cac9287a5aa27b12c80af449d4.png",alt:"解决办法"}})]),_._v(" "),t("h4",{attrs:{id:"假定转移不发生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#假定转移不发生"}},[_._v("#")]),_._v(" 假定转移不发生")]),_._v(" "),t("p",[_._v("这个其实很简单，就是在装流水线的时候，假设转移不发生，该咋装咋装。")]),_._v(" "),t("p",[_._v("所以，如果真的没有转移，1 次停顿都不会有；如果真的转移了，此时在流水线的指令全部要停掉（这个时候，其实就是硬件方法暂停流水线）。")]),_._v(" "),t("h5",{attrs:{id:"例题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例题"}},[_._v("#")]),_._v(" 例题")]),_._v(" "),t("blockquote",[t("p",[_._v("假设某机器的流水线，转移目标地址计算需要2个流水段，转移条件形成需要3个流水段，完成一个流水段的操作用一个时钟周期。假定解决控制冒险有三种方法：停顿流水线、转移预测未选中、转移选中。试计算条件转移指令采用这三种方法在转移发生与转移不发生所产生的停顿时钟周期数")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("停顿周期数")]),_._v(" "),t("th",[_._v("条件转移发生")]),_._v(" "),t("th",[_._v("条件转移未发生")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("停顿流水线")]),_._v(" "),t("td",[_._v("2")]),_._v(" "),t("td",[_._v("2")])]),_._v(" "),t("tr",[t("td",[_._v("预测转移未选中")]),_._v(" "),t("td",[_._v("2")]),_._v(" "),t("td",[_._v("0")])]),_._v(" "),t("tr",[t("td",[_._v("预测转移选中")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("2")])])])]),_._v(" "),t("h4",{attrs:{id:"延迟转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#延迟转移"}},[_._v("#")]),_._v(" 延迟转移")]),_._v(" "),t("p",[_._v("注意到 "),t("strong",[_._v("branch/beq/neq 后的代码一定会被执行")]),_._v("。前面的解决办法是在这个位置放一个 nop 或 stall 解决问题禁止它产生效果。但是能不能利用这个特性，让它在这个时候执行一点代码呢？")]),_._v(" "),t("p",[_._v("这个就和没有流水线的 MIPS 有点不一样了：")]),_._v(" "),t("div",{staticClass:"language-nasm extra-class"},[t("pre",{pre:!0,attrs:{class:"language-nasm"}},[t("code",[_._v("Lop： load     "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r1")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("20")]),_._v("("),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r2")]),_._v(")\n      nop\n      addi     "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r3")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r1")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("30")]),_._v("\n      store    "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r3")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("40")]),_._v("("),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r4")]),_._v(")\n      subicc   "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r5")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r5")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),_._v("\n      nop\n      bne      lop   ；如果Z标志为"),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("0")]),_._v("，即"),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r6")]),_._v("的内容不为"),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("0")]),_._v("，则转Lop\n      nop\n")])])]),t("p",[_._v("上面没有优化的代码需要 3 个 nop。（假设除了 "),t("code",[_._v("subicc")]),_._v(" 以外，其他指令不修改标志位，所以 "),t("code",[_._v("subicc")]),_._v(" 不需要放在 "),t("code",[_._v("bne")]),_._v(" 前）优化以后，一个 nop 都不需要！")]),_._v(" "),t("div",{staticClass:"language-nasm extra-class"},[t("pre",{pre:!0,attrs:{class:"language-nasm"}},[t("code",[_._v("Lop： load     "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r1")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("20")]),_._v("("),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r2")]),_._v(")\n      subicc   "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r5")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r5")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),_._v("\n      addi     "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r3")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r1")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("30")]),_._v("\n      bne      lop   ；如果Z标志为"),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("0")]),_._v("，即"),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r6")]),_._v("的内容不为"),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("0")]),_._v("，则转Lop\n      store    "),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r3")]),_._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("40")]),_._v("("),t("span",{pre:!0,attrs:{class:"token register variable"}},[_._v("r4")]),_._v(")\n")])])]),t("p",[_._v("非常神奇的是，"),t("strong",[_._v("store 指令摆在 bne 以后，但每次跳转仍然会被执行")]),_._v("。这是和单周期 CPU 非常不同的一点。")])])}),[],!1,null,null,null);a.default=s.exports}}]);