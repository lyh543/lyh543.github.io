(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{564:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("最近开始用 pytest 写单元测试，发现 pytest 官方教程内容非常多，而且 pytest 里也有很多 unittest 的内容，很容易让人摸不着头脑。pytest 的 example 也很少/很抽象，因此写篇博客记录一下自己的使用。")]),t._v(" "),s("p",[t._v("由于 pytest 和 unittest 用法的变种很多（如 "),s("code",[t._v("Mock.assert_has_calls")]),t._v(" 的多个变种，"),s("code",[t._v("patch")]),t._v(" 的函数形式和装饰器形式），这里不会事无巨细地讲所有用法，只会讲我偏好的用法。")]),t._v(" "),s("p",[t._v("博客对应的代码可以在 "),s("a",{attrs:{href:"https://github.com/lyh543-lab/pytest-mock-example",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),s("OutboundLink")],1),t._v(" 上找到。")]),t._v(" "),s("h2",{attrs:{id:"初始化项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目"}},[t._v("#")]),t._v(" 初始化项目")]),t._v(" "),s("p",[t._v("这篇博客使用的 Python 为 3.10.4，"),s("code",[t._v("pytest")]),t._v(" 和 "),s("code",[t._v("pytest-mock")]),t._v(" 版本为：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("pytest-mock==3.10.0\npytest==7.2.0\n")])])]),s("p",[t._v("为了让 pytest 能够正确按照模块识别路径，记得在项目根目录放一个 "),s("code",[t._v("pytest.ini")]),t._v(" 或 "),s("code",[t._v("pyproject.toml")]),t._v("（"),s("a",{attrs:{href:"https://stackoverflow.com/a/50610630/12208030",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reference"),s("OutboundLink")],1),t._v("）：")]),t._v(" "),s("div",{staticClass:"language-ini extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ini"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pytest.ini")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token section"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("pytest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("pythonpath")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(".")]),t._v("\n")])])]),s("h2",{attrs:{id:"对库函数和类进行-mock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对库函数和类进行-mock"}},[t._v("#")]),t._v(" 对库函数和类进行 mock")]),t._v(" "),s("p",[t._v("这种常见的场景是测试对象会调用库函数，可能是外部的库函数（如 "),s("code",[t._v("os.getlogin()")]),t._v("、"),s("code",[t._v("time.time()")]),t._v("），也可能是项目中编写的库函数。")]),t._v(" "),s("p",[t._v("我们需要 mock 库函数以保证相同的、不依赖外部环境、快速的输出（stub），同时监测库函数被调用的次数、每次调用的参数等（spy）。")]),t._v(" "),s("p",[t._v("这种场景下，我们可以使用 "),s("code",[t._v("unittest.mock.patch")]),t._v(" 装饰器，也可以使用 pytest 提供的 "),s("code",[t._v("mocker.patch")]),t._v(" 方法。")]),t._v(" "),s("h3",{attrs:{id:"对库函数进行-mock-mocker-patch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对库函数进行-mock-mocker-patch"}},[t._v("#")]),t._v(" 对库函数进行 mock (mocker.patch)")]),t._v(" "),s("blockquote",[s("p",[t._v("实际使用中发现 "),s("code",[t._v("mocker.patch.object()")]),t._v(" 也可以 mock 库函数，并且语法更优雅，因此"),s("strong",[t._v("更推荐下面的 "),s("code",[t._v("mocker.patch.object")]),t._v(" 方案")]),t._v("。")])]),t._v(" "),s("p",[t._v("测试对象在 "),s("code",[t._v("app/greetings.py")]),t._v("，测试函数在 "),s("code",[t._v("test/test_mocking_lib_function.py")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# app/greetings.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" os "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" getlogin\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_greeting_string_from_import_function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getlogin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'Greetings, ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test/test_mocking_lib_function.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pytest_mock "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" MockerFixture\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_get_greeting_string_from_import_function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MockerFixture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# you should mock `app.greetings.getlogin` instead of `os.login`")]),t._v("\n    mocked_getlogin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'app.greetings.getlogin'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" get_greeting_string_from_import_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greetings, user'")]),t._v("\n\n    mocked_getlogin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# you can also use assert_called_with")]),t._v("\n    mocked_getlogin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_called_with"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("注：")]),t._v(" "),s("ol",[s("li",[t._v("如果测试对象 "),s("code",[t._v("app.greetings")]),t._v(" 使用的是 "),s("code",[t._v("from x import y")]),t._v(" 的形式 import 需要 mock 的函数，"),s("strong",[s("code",[t._v("mocker.patch('x.y')")]),t._v(" 会失效")]),t._v("，需要 "),s("code",[t._v("mocker.patch('app.greetings.y')")]),t._v(" 才能生效")]),t._v(" "),s("li",[s("code",[t._v("MockerFixture.assert_has_calls()")]),t._v(" 有很多变种，可以根据 IDE 提示选择合适的变种")]),t._v(" "),s("li",[t._v("也可以使用由 "),s("code",[t._v("unittest")]),t._v(" 提供的、装饰器风格的 "),s("code",[t._v("mock.patch")]),t._v("。函数对应的 Mock 会作为第一个参数传入测试函数")])]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" unittest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mock "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" call\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# decorator-style of mocker.patch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@patch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'app.greetings.getlogin'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_get_greeting_string_from_import_function__decorator_style")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocked_get_login"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" get_greeting_string_from_import_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greetings, user'")]),t._v("\n\n    mocked_get_login"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"对库函数进行-mock-mocker-patch-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对库函数进行-mock-mocker-patch-object"}},[t._v("#")]),t._v(" 对库函数进行 mock (mocker.patch.object)")]),t._v(" "),s("p",[t._v("这里使用 "),s("code",[t._v("mocker.patch.object")]),t._v(" 来 mock 库函数，它的用法和 "),s("code",[t._v("mocker.patch")]),t._v(" 类似，只是参数从函数的完整路径变为了 module + 方法名。它的返回值也是类方法对应的 Mock，可以使用 "),s("code",[t._v("assert_has_calls")]),t._v(" 进行断言。")]),t._v(" "),s("p",[t._v("这种写法的优点在于，可以 import 需要 mock 的 module，而不需要将整个 module 的路径作为字符串传给 "),s("code",[t._v("mocker.patch()")]),t._v("。因此在实际使用中，我更偏好这种风格的 mock。")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" os\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pytest_mock "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" MockerFixture\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_get_greeting_string_from_import_function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MockerFixture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mocked_getlogin = mocker.patch('app.greetings.getlogin', return_value='user')")]),t._v("\n    mocked_getlogin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'getlogin'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"对库中的类进行-mock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对库中的类进行-mock"}},[t._v("#")]),t._v(" 对库中的类进行 mock")]),t._v(" "),s("p",[t._v("对库中的类可以使用 "),s("code",[t._v("mocker.patch.object")]),t._v(" 进行 mock，用法也类似，只是参数从函数名变为了类+方法名。它的返回值也是类方法对应的 Mock，可以使用 "),s("code",[t._v("assert_has_calls")]),t._v(" 进行断言。")]),t._v(" "),s("p",[t._v("如果需要对一个类的多个方法进行 mock，对同一个类执行多次 "),s("code",[t._v("patch.object")]),t._v(" 即可。")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# lib/utils.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" os "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" getlogin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" curdir\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HostUtils")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_username "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getlogin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_username\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_current_path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" curdir\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# app/greetings.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" HostUtils\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_greeting_string_from_import_class_method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    host_utils "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HostUtils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" host_utils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'Greetings, ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test/test_mocking_lib_function.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pytest_mock "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" MockerFixture\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" HostUtils\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_get_greeting_string_from_import_class_method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MockerFixture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    mocked_get_username "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HostUtils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get_username'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    mocked_get_current_path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HostUtils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get_current_path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" get_greeting_string_from_import_class_method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greetings, user'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" HostUtils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_current_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qwerty'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v("\n\n    mocked_get_username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    mocked_get_current_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qwerty'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("实际使用中发现 "),s("code",[t._v("mocker.call()")]),t._v(" mypy 类型检查时可能会报错，虽然不影响运行，但是红色下划线比较影响开发体验。可以改为 "),s("code",[t._v("unittest.mock.call()")]),t._v(" 来解决报错。")]),t._v(" "),s("p",[t._v("同样也可以使用 "),s("code",[t._v("unittest")]),t._v(" 提供的、装饰器风格的 "),s("code",[t._v("mock.patch.object")]),t._v("。不过需要注意，由于装饰器的执行顺序是由下至上（最靠近函数的最先执行），方法对应的 Mock 版本的传入顺序是和装饰器执行顺序一致。")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" unittest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mock "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" call\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" HostUtils\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# decorator-style of mocker.patch.object")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HostUtils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get_username'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@patch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HostUtils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get_current_path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" return_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_get_greeting_string_from_import_class_method_decorator_style")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocked_get_current_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mocked_get_username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" get_greeting_string_from_import_class_method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greetings, user'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" HostUtils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_current_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qwerty'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v("\n\n    mocked_get_username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    mocked_get_current_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qwerty'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"对参数中的函数和对象进行-mock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对参数中的函数和对象进行-mock"}},[t._v("#")]),t._v(" 对参数中的函数和对象进行 mock")]),t._v(" "),s("p",[t._v("如果需要 mock 的函数和对象不是由测试对象自己 import 后使用，而是作为参数传入，我们就不需要对库函数进行 mock，只需要构造一个白纸一般的 Mock 对象，然后把它作为参数传入测试对象。")]),t._v(" "),s("p",[t._v("测试对象可以把 Mock 当做一个函数进行调用，也可以当做类访问其属性（属性也是一个 Mock 类型，也就是说可以把属性作为方法调用，或访问属性的属性……）。")]),t._v(" "),s("p",[t._v("需要注意的是，当访问 Mock 的 "),s("code",[t._v("method")]),t._v(" 方法时，"),s("code",[t._v("assert_has_calls")]),t._v(" 断言中的 "),s("code",[t._v("call()")]),t._v(" 也要改为 "),s("code",[t._v("call.method()")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# lib/request_manager.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" time "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sleep\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# request data from network")]),t._v("\n        sleep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("request_ten_times")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_ten_times")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("callable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tests/test_mocking_param.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pytest_mock "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" MockerFixture\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request_manager "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" request_ten_times"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" call_ten_times\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_call_with_mock_function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MockerFixture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    mocked_func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# treat Mock as a function")]),t._v("\n    call_ten_times"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocked_func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    mocked_func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_call_with_mock_object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MockerFixture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    mocked_request "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# treat Mock as an object")]),t._v("\n    request_ten_times"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocked_request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    mocked_request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assert_has_calls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# here you should use `call.get()` instead of `call()` to assert `mock.get()` has been called")]),t._v("\n        mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("可以通过一个简单的测试证明 "),s("code",[t._v("Mock 对象的任意属性也是一个 Mock 对象")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tests/test_mocking_param.py")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_type_of_mock_field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MockerFixture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    mock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unknown_field"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unknown_field"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  mocker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"pylint-和-pytest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pylint-和-pytest"}},[t._v("#")]),t._v(" pylint 和 pytest")]),t._v(" "),s("p",[t._v("TODO")])])}),[],!1,null,null,null);s.default=e.exports}}]);