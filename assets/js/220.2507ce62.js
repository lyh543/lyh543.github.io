(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{611:function(e,a,t){"use strict";t.r(a);var r=t(3),s=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"kubernetes-指标收集拓扑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-指标收集拓扑"}},[e._v("#")]),e._v(" Kubernetes 指标收集拓扑")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/grafana-collect-k8s-metric.png",alt:"Grafana 收集 K8s 指标的拓扑图"}})]),e._v(" "),a("p",[e._v("上图是 Grafana 收集 Kubernetes 指标的拓扑图。")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/google/cadvisor",target:"_blank",rel:"noopener noreferrer"}},[e._v("cAdvisor"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://github.com/kubernetes/kube-state-metrics",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-state-metrics"),a("OutboundLink")],1),e._v(" 会作为 Kubernetes Daemonset 运行在 Kubernetes 的每个 Node 上，通过 Kubernetes API 收集 Node、Pod 等的实时指标，然后转换成 Prometheus 能理解的数据结构，通过 HTTP API 暴露出来。cAdvisor 和 kube-state-metrics 收集的数据有一些互补，所以推荐两个都部署。")]),e._v(" "),a("li",[e._v("Prometheus 会定时拉取 cAdvisor 和 kube-state-metrics 的数据，然后存储到自己的时间序列数据库中。")]),e._v(" "),a("li",[e._v("Grafana 不会持久化 metric 数据，而是持久化图表的配置，然后通过 PromQL 从 Prometheus 查询数据、展示出来。Grafana 也支持通过 SQL 和其它查询语法从 MySQL、PostgreSQL 等数据源查询数据。")])]),e._v(" "),a("h2",{attrs:{id:"prometheus-graph"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prometheus-graph"}},[e._v("#")]),e._v(" Prometheus Graph")]),e._v(" "),a("p",[e._v("Prometheus Graph 是一个 Prometheus Query Playground，在浏览器访问 Prometheus 部署的地址的 "),a("code",[e._v("/graph")]),e._v(" 路径就可以看到。")]),e._v(" "),a("p",[e._v("Prometheus 的每条记录格式为：")]),e._v(" "),a("p",[a("code",[e._v("metric_name{metric_label1=value1, metric_label1=value2, ...} = metric_value")])]),e._v(" "),a("p",[e._v("Prometheus 会定时轮询数据源，因此还有一个隐藏的维度：时间戳。可以通过 "),a("code",[e._v("timestamp(metric > 1)")]),e._v(" 拿到满足 "),a("code",[e._v("metric > 1")]),e._v(" 时的时间序列。")]),e._v(" "),a("p",[e._v("PromQL 的基本查询语法是：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th"),e._v(" "),a("th",[e._v("PromQL")]),e._v(" "),a("th",[e._v("SQL")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("使用 label 筛选")]),e._v(" "),a("td",[a("code",[e._v("metric_name{metric_label1=value1, metric_label2=value2}")])]),e._v(" "),a("td",[a("code",[e._v("SELECT * FROM metric_name")]),a("br"),a("code",[e._v("WHERE metric_label1=value1")]),a("br"),a("code",[e._v("AND metric_label2=value2")])])]),e._v(" "),a("tr",[a("td",[e._v("使用 value 筛选")]),e._v(" "),a("td",[a("code",[e._v("metric_name{metric_label1=value1} > 1")])]),e._v(" "),a("td",[a("code",[e._v("SELECT * FROM metric_name")]),a("br"),a("code",[e._v("WHERE metric_label1=value1")]),a("br"),a("code",[e._v("AND value > 1")])])]),e._v(" "),a("tr",[a("td",[e._v("聚合")]),e._v(" "),a("td",[a("code",[e._v("sum by(metric_label2) (metric_name{metric_label1=value1})")])]),e._v(" "),a("td",[a("code",[e._v("SELECT metric_label2, sum(value)")]),a("br"),a("code",[e._v("FROM metric_name")]),a("br"),a("code",[e._v("WHERE metric_label1=value1")]),a("br"),a("code",[e._v("GROUP BY metric_label2")])])])])]),e._v(" "),a("p",[e._v("此外，可以查询 "),a("code",[e._v("container_cpu_load_average_10s")]),e._v(" 来看到这个 metric_name 有哪些 metric_labels。也可以通过 "),a("code",[e._v('group ({kubernetes_io_hostname="10.240.2.255"}) by (__name__)')]),e._v(" 来获取哪些 metric_names 有这个 metric_label。")]),e._v(" "),a("h2",{attrs:{id:"grafana-筛选器配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grafana-筛选器配置"}},[e._v("#")]),e._v(" Grafana 筛选器配置")]),e._v(" "),a("h3",{attrs:{id:"级联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#级联查询"}},[e._v("#")]),e._v(" 级联查询")]),e._v(" "),a("p",[e._v("位置：Dashboard Detail 页 - Settings - Variables。")]),e._v(" "),a("p",[e._v("Grafana 的筛选器支持级联查询。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/grafana-cascade-filter.png",alt:"Grafana 级联查询"}})]),e._v(" "),a("p",[e._v("在级联查询中，为了让父项全选（All）、多选（Multi-value）时，子项的筛选仍然能用，小项及 Dashboard 里的数据筛选需要使用 "),a("code",[e._v("~=")]),e._v("（正则等于）。上图中，"),a("code",[e._v("node_pool_id")]),e._v("、"),a("code",[e._v("Node")]),e._v("、"),a("code",[e._v("Pod")]),e._v(" 的 Definition 中均使用了 "),a("code",[e._v("~=")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"级联查询的性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#级联查询的性能优化"}},[e._v("#")]),e._v(" 级联查询的性能优化")]),e._v(" "),a("p",[e._v("Grafana 虽然支持级联查询，但级联查询的选项需要在前端拉取数据并计算（而非直接由后端返回）。选项更改时，需要进行多次串行的查询。过大的筛选范围和过多的级联查询会降低性能。下图中，不使用筛选器、5分钟内的数据有 ~160M（压缩后 ~7M），三次级联查询耗时共 ~18s。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/grafana-cascade-filter-performance-1.png",alt:"不使用筛选器、5分钟内的数据有 ~160M（压缩后 ~7M），三次级联查询耗时共 ~18s"}})]),e._v(" "),a("p",[e._v("给筛选器设置默认选项，可以减少每次查询的数据。下图中，筛选 namespace、5分钟内的数据有 ~23M（压缩后 ~1M），三次级联查询耗时共 ~3s。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/grafana-cascade-filter-performance-2.png",alt:"筛选 namespace、5分钟内的数据有 ~23M（压缩后 ~1M），三次级联查询耗时共 ~3s"}})]),e._v(" "),a("p",[e._v("减少级联查询可以减少需要串行的查询次数。但是需要注意每个级联查询的父项都需要有默认选项，否则对应的级联查询仍需要拉取全量数据。下图中，筛选了 namespace，但在查询不受 namespace 约束的 node_id 选项时，仍需要拉取全量数据。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/grafana-cascade-filter-performance-3.png",alt:"筛选 namespace，在查询不受 namespace 约束的 node_id 选项时仍需要拉取全量数据"}})]),e._v(" "),a("h2",{attrs:{id:"grafana-panel-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grafana-panel-配置"}},[e._v("#")]),e._v(" Grafana Panel 配置")]),e._v(" "),a("p",[e._v("在 Grafana 筛选器配置了级联筛选时，Grafana 计算子项的选项时会用父项的筛选进行过滤，所以 UI 上的 "),a("code",[e._v("All")]),e._v(" 选项，实际查询时会转换为 "),a("code",[e._v("(option_1|option_2|option_3)")]),e._v("。在 Panel 里配置筛选条件时，只需要用正则表达式配置子项的筛选即可，不需要再配置父项的筛选。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('metric_xxx{namespace=~"$NameSpace"}\nmetric_xxx{cluster_vke_volcengine_com_machinepool_name=~"$node_pool_id"}\nmetric_xxx{kubernetes_io_hostname=~"^$Node$"}\nmetric_xxx{pod=~"$Pod"}\n\n# no need to add parent filter\nmetric_xxx{namespace=~"$NameSpace"\n           cluster_vke_volcengine_com_machinepool_name=~"$node_pool_id",\n           kubernetes_io_hostname=~"^$Node$",\n           pod=~"$Pod"}\n')])])]),a("h2",{attrs:{id:"prometheus-kubernetes-常见指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prometheus-kubernetes-常见指标"}},[e._v("#")]),e._v(" Prometheus Kubernetes 常见指标")]),e._v(" "),a("p",[e._v("cAdvisor 的指标以 "),a("code",[e._v("container_")]),e._v(" 和 "),a("code",[e._v("machine_")]),e._v(" 开头，kube-state-metric 的指标以 "),a("code",[e._v("kube_pod_")]),e._v(" 开头。")]),e._v(" "),a("h3",{attrs:{id:"node-资源使用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-资源使用率"}},[e._v("#")]),e._v(" Node 资源使用率")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("CPU Request: "),a("code",[e._v('sum(container_spec_cpu_shares{image="",pod!="",kubernetes_io_hostname=~"^$Node$"})/1024')])])]),e._v(" "),a("li",[a("p",[a("s",[e._v("CPU Limit（监控意义不大）")])])]),e._v(" "),a("li",[a("p",[e._v("CPU Usage: "),a("code",[e._v('sum (rate(container_cpu_usage_seconds_total{id="/",kubernetes_io_hostname=~"^$Node$"}[1m]))')])])]),e._v(" "),a("li",[a("p",[e._v("CPU Total: "),a("code",[e._v('machine_cpu_cores{kubernetes_io_hostname=~"^$Node$"}')])])]),e._v(" "),a("li",[a("p",[e._v("Memory Request: "),a("code",[e._v('sum(kube_pod_container_resource_requests{resource="memory", node="^$Node$"} * on (container, pod) (kube_pod_container_status_running == 1)) /1024/1024/1024')])])]),e._v(" "),a("li",[a("p",[a("s",[e._v("Memory Limit（监控意义不大）")]),e._v(": "),a("code",[e._v('sum(container_spec_memory_limit_bytes{kubernetes_io_hostname="^$Node$"}/1024/1024/1024)')])])]),e._v(" "),a("li",[a("p",[e._v("Memory Usage: "),a("code",[e._v('sum(container_memory_working_set_bytes{id="/",kubernetes_io_hostname=~"^$Node$"})')])])]),e._v(" "),a("li",[a("p",[e._v("Memory Total: "),a("code",[e._v('machine_memory_bytes{kubernetes_io_hostname=~"^$Node$"}')])])]),e._v(" "),a("li",[a("p",[e._v("Storage Usage: "),a("code",[e._v('sum (container_fs_usage_bytes{device=~"^/dev/[sv]d[a-z][1-9]$",id="/",kubernetes_io_hostname=~"^$Node$"})')])])]),e._v(" "),a("li",[a("p",[e._v("Storage Total: "),a("code",[e._v('sum(container_fs_limit_bytes{device=~"^/dev/[sv]d[a-z][1-9]$",id="/",kubernetes_io_hostname=~"^$Node$"})')])])])]),e._v(" "),a("h3",{attrs:{id:"pod-资源使用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-资源使用率"}},[e._v("#")]),e._v(" Pod 资源使用率")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("CPU Request："),a("code",[e._v('container_spec_cpu_shares{pod=~"$Pod",image=""} / 1024')])])]),e._v(" "),a("li",[a("p",[e._v("CPU Limit："),a("code",[e._v('container_spec_cpu_quota{pod~="$Pod",image=""}/100000')])])]),e._v(" "),a("li",[a("p",[e._v("CPU Usage: "),a("code",[e._v('rate(container_cpu_usage_seconds_total{pod~="$Pod",image=""}[1m])')])])]),e._v(" "),a("li",[a("p",[e._v("Memory Request: "),a("code",[e._v('sum(kube_pod_container_resource_requests{resource="memory", pod~="$Pod"} * on (container) (kube_pod_container_status_running{pod~="$Pod"} == 1)) / 1024/1024/1024')]),e._v("（为了过滤不是运行状态的 pod，使用 join 操作 "),a("code",[e._v("metric_a * on(container) metric_b")]),e._v("）")])]),e._v(" "),a("li",[a("p",[e._v("Memory Limit: "),a("code",[e._v('container_spec_memory_limit_bytes{pod~="$Pod",image=""}/1024/1024/1024')])])]),e._v(" "),a("li",[a("p",[e._v("Memory Usage: "),a("code",[e._v('container_memory_working_set_bytes{pod~="$Pod",image=""}')])])])]),e._v(" "),a("h3",{attrs:{id:"pod-状态监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-状态监控"}},[e._v("#")]),e._v(" Pod 状态监控")]),e._v(" "),a("ul",[a("li",[e._v("发生过重启的 pod：")])]),e._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    kube_pod_container_status_restarts_total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("~")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$NameSpace"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" @ $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("__to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("seconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("\n    kube_pod_container_status_restarts_total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("~")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$NameSpace"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" @ $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("__from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("seconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n")])])]),a("ul",[a("li",[e._v("Pod 上次重启的时间（此查询性能较差）：")])]),e._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[e._v("last_over_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    timestamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        increase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("kube_pod_container_status_restarts_total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("~")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$NameSpace"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("10m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("$__range"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("10m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" @ $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("__to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("seconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("ul",[a("li",[e._v("Pending 超过半个小时的 pod："),a("code",[e._v('min_over_time(kube_pod_status_phase{phase="Pending", namespace=~"$NameSpace"}[30m:1m]) == 1')])])]),e._v(" "),a("p",[a("code",[e._v("$__range")]),e._v(" 等都是 "),a("a",{attrs:{href:"https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#global-variables",target:"_blank",rel:"noopener noreferrer"}},[e._v("Grafana 变量"),a("OutboundLink")],1),e._v("，"),a("code",[e._v("[a:b] @ c")]),e._v(" 是 Prometheus 的 "),a("a",{attrs:{href:"https://prometheus.io/docs/prometheus/latest/querying/basics/#range-vector-selectors",target:"_blank",rel:"noopener noreferrer"}},[e._v("Range Vector Selectors 语法"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"grafana-alert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grafana-alert"}},[e._v("#")]),e._v(" Grafana Alert")]),e._v(" "),a("p",[a("strong",[e._v("Alert 条件")]),e._v("：Grafana 的 Alert Condition 是：指标超过某范围（如 CPU 占用率超过 80%）。其它场景下需要将指标转化为这种格式（如 "),a("code",[e._v("pod 出现重启")]),e._v(" -> "),a("code",[e._v("Pod 的重启次数 >= 1")]),e._v("）。")]),e._v(" "),a("p",[a("strong",[e._v("Alert 时机")]),e._v("：Grafana 会在 Alert Condition 状态（true <-> false）转换时发出警告，即在 false->true 时会发 "),a("code",[e._v("Firing")]),e._v(" Alert，true->false 时会发 "),a("code",[e._v("Resolved")]),e._v(" Alert。")]),e._v(" "),a("p",[a("strong",[e._v("Alert 合并")]),e._v("：批量查询的指标（如对不同的 Pod 监控的同一指标），同一时间时变为 true，Grafana 会整合为一条消息发送；Alert 也支持通过配置，将一段时间内的 Alert 合并。下图的配置 "),a("code",[e._v("evaluation every 30min for 24h")]),e._v(" 是：每 30 分钟计算一次是否满足 Alert Condition，每 24h 打包发送一次结果。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/grafana-alert-merge.png",alt:"Alert 合并"}})]),e._v(" "),a("p",[a("strong",[e._v("Alert 发送方")]),e._v("：Grafana 把 Alert 的条件和发送解耦，不直接在 Alert Rule 里配置发送方，而是在 Alert Rule 里打 label，然后通过 Notification Policy 基于 label 将对应的 Alert Rule 路由给发送方（Contact points）。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/grafana-alert-notification.png",alt:"Alert 通知"}})])])}),[],!1,null,null,null);a.default=s.exports}}]);