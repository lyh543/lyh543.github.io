(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{583:function(t,e,a){"use strict";a.r(e);var s=a(3),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Docker 像是一个容器一样，能够让应用运行在隔离的环境中。其实很像一个虚拟机，但是其本质和虚拟机是不同的，结构较虚拟机简单的多，因此速度也远快于虚拟机。"),a("br"),t._v("\nDocker 还是跨平台的，可以在 Linux/Windows/MacOS 上运行。"),a("br"),t._v("\n对于 Windows 的 Docker（准确的说是 Docker Desktop），它还提供了 Linux 和 Windows 两种子系统。（也就是说，在 Linux 下能运行的 Docker 容器，完全能够在 Windows 上运行）")]),t._v(" "),a("p",[t._v("而 Docker Compose 可以根据配置文件自动下载镜像、配置、运行 Docker 容器，一气呵成。"),a("br"),t._v("\n下载网上写好的配置文件，然后一行代码 "),a("code",[t._v("docker-compose")]),t._v(" 即可完成配置，搭建好自己的云服务。它同样是跨平台的。这也是 Docker 方便的原因之一。")]),t._v(" "),a("blockquote",[a("p",[t._v("Docker 文档：https://docs.docker.com/install/linux/docker-ce/centos/\nDocker Compose 文档：https://docs.docker.com/compose/install/")])]),t._v(" "),a("p",[t._v("我收集的基于 Docker 的好用的云服务可以见"),a("a",{attrs:{href:"#%E5%B8%B8%E7%94%A8-docker-%E9%95%9C%E5%83%8F"}},[t._v("后面小节")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"在-wsl-1-中使用-docker-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-wsl-1-中使用-docker-cli"}},[t._v("#")]),t._v(" 在 WSL 1 中使用 docker-cli")]),t._v(" "),a("p",[t._v("WSL 2 中集成了 docker-cli，可以直接管理 Windows 的 Docker。在 WSL 1 中输入 "),a("code",[t._v("docker")]),t._v("，可以看到 Docker 推荐你转换为 WSL 2。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("The command 'docker' could not be found in this WSL 1 distro.\nWe recommend to convert this distro to WSL 2 and activate\nthe WSL integration in Docker Desktop settings.\n \nSee https://docs.docker.com/docker-for-windows/wsl/ for details.\n")])])]),a("p",[t._v("然而我并不想转换，可参考 "),a("a",{attrs:{href:"https://blog.csdn.net/esinzhong/article/details/107617284",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows 10 WSL1 的子系统下完美解决docker的命令问题_累积技术 沉淀经验-CSDN博客"),a("OutboundLink")],1),t._v(" 在 WSL1 下安装 "),a("code",[t._v("docker-cli")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"linux-安装-docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-安装-docker-compose"}},[t._v("#")]),t._v(" Linux 安装 Docker Compose")]),t._v(" "),a("p",[t._v("Docker Compose，就可以使用配置文件，一行代码配置 Docker 了。")]),t._v(" "),a("p",[t._v("Docker Desktop 自带 Docker Compose，Linux 需要自行下载。")]),t._v(" "),a("p",[t._v("下载 Docker Compose 最新版，并给予可执行权限：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n")])])]),a("p",[t._v("最后检查一下是否成功安装：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ docker-compose --version\ndocker-compose version 1.25.4, build 8d51620a\n")])])]),a("h2",{attrs:{id:"docker-更换国内源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-更换国内源"}},[t._v("#")]),t._v(" Docker 更换国内源")]),t._v(" "),a("blockquote",[a("p",[t._v("参考链接：https://www.cnblogs.com/wushuaishuai/p/9984228.html#_label0")])]),t._v(" "),a("p",[t._v("和很多东西一样，Docker 镜像也有国内仓库。")]),t._v(" "),a("p",[t._v("国内的 Docker 镜像仓库有：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("http://hub-mirror.c.163.com\nhttps://3laho3y3.mirror.aliyuncs.com\nhttp://f1361db2.m.daocloud.io\nhttps://mirror.ccs.tencentyun.com\nhttps://docker.mirrors.ustc.edu.cn\nhttps://registry.docker-cn.com\n")])])]),a("p",[t._v("这里选 aliyun 的做示范。")]),t._v(" "),a("p",[t._v("创建一个 "),a("code",[t._v("daemon.json")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /etc/docker/daemon.json\n")])])]),a("p",[t._v("按 "),a("code",[t._v("i")]),t._v(" 进入编辑模式，写入以下内容：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"registry-mirrors"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://3laho3y3.mirror.aliyuncs.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("按 "),a("code",[t._v("esc")]),t._v(" 退出编辑模式，按 "),a("code",[t._v(":wq")]),t._v(" 保存。")]),t._v(" "),a("p",[t._v("然后重启 Docker 服务。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo systemctl restart docker\n")])])]),a("p",[t._v("Windows 应到 Docker Desktop 的 Settings 中的 Docker Engine 栏中修改。下面是我修改后的内容。")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"registry-mirrors"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://3laho3y3.mirror.aliyuncs.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"insecure-registries"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"debug"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"experimental"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("验证镜像源可以使用命令 "),a("code",[t._v("docker info")]),t._v("，如果看到有两行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Registry Mirrors:\n  https://3laho3y3.mirror.aliyuncs.com/\n")])])]),a("p",[t._v("就表示成功。")]),t._v(" "),a("p",[t._v("下次拉取镜像的时候就快得多了。")]),t._v(" "),a("h2",{attrs:{id:"在-docker-pull-时使用梯子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-docker-pull-时使用梯子"}},[t._v("#")]),t._v(" 在 Docker Pull 时使用梯子")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/23111631/cannot-download-docker-images-behind-a-proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cannot download Docker images behind a proxy - Stack Overflow"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("创建文件夹和配置文件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo mkdir /etc/systemd/system/docker.service.d\nsudo vim /etc/systemd/system/docker.service.d/http-proxy.conf\n")])])]),a("p",[t._v("写入以下配置：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[Service]\nEnvironment="HTTP_PROXY=http://localhost:17296/"\nEnvironment="HTTPS_PROXY=http://localhost:17296/"\n')])])]),a("p",[t._v("刷新并重启 "),a("code",[t._v("docker")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo systemctl daemon-reload\nsudo systemctl restart docker\n")])])]),a("h2",{attrs:{id:"常用-docker-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-docker-镜像"}},[t._v("#")]),t._v(" 常用 Docker 镜像")]),t._v(" "),a("p",[t._v("个人收集的一些基于 Docker 的云服务。")]),t._v(" "),a("h3",{attrs:{id:"云盘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#云盘"}},[t._v("#")]),t._v(" 云盘")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("镜像")]),t._v(" "),a("th",[t._v("创建命令或 "),a("code",[t._v("docker-compose.yml")]),t._v(" 链接")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("私人云 NextCloud")]),t._v(" "),a("td",[a("a",{attrs:{href:"/linux/build-owncloud-on-server/nextcloud-docker-compose.tar"}},[t._v("nextcloud-docker-compose.tar")])])]),t._v(" "),a("tr",[a("td",[t._v("私人云 "),a("a",{attrs:{href:"https://github.com/HumanBrainProject/seafile-compose/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Seafile"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("a",{attrs:{href:"https://github.com/HumanBrainProject/seafile-compose/blob/master/docker-compose.yaml",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker-compse.yaml"),a("OutboundLink")],1)])]),t._v(" "),a("tr",[a("td",[t._v("WebDAV")]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name webdav -v /srv/dav:/var/lib/dav -e AUTH_TYPE=Digest -e USERNAME=test -e PASSWORD=test -p 80:80 --restart always bytemark/webdav")])])])])]),t._v(" "),a("h3",{attrs:{id:"在线文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在线文档"}},[t._v("#")]),t._v(" 在线文档")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("镜像")]),t._v(" "),a("th",[t._v("创建命令或 "),a("code",[t._v("docker-compose.yml")]),t._v(" 链接")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("在线 Markdown 编辑器 "),a("a",{attrs:{href:"https://github.com/hackmdio/codimd",target:"_blank",rel:"noopener noreferrer"}},[t._v("CodiMD"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("a",{attrs:{href:"https://hackmd.io/c/codimd-documentation/%2Fs%2Fcodimd-docker-deployment#Using-docker-compose-to-setup-CodiMD",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker-compse.yml"),a("OutboundLink")],1)])]),t._v(" "),a("tr",[a("td",[t._v("在线 LaTeX 编辑器 "),a("a",{attrs:{href:"https://github.com/overleaf/overleaf/wiki/Quick-Start-Guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Overleaf"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("a",{attrs:{href:"https://github.com/overleaf/overleaf/blob/master/docker-compose.yml",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker-compose.yml"),a("OutboundLink")],1)])])])]),t._v(" "),a("h3",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("镜像")]),t._v(" "),a("th",[t._v("创建命令或 "),a("code",[t._v("docker-compose.yml")]),t._v(" 链接")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("PostgreSQL")]),t._v(" "),a("td",[a("code",[t._v("docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=test -d postgres")])])]),t._v(" "),a("tr",[a("td",[t._v("MySQL")]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=test --restart always mysql")])])]),t._v(" "),a("tr",[a("td",[t._v("Redis")]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name redis -p 6379:6379 -e REDIS_PASSWORD=test --restart always redis /bin/sh -c 'redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}'")])])]),t._v(" "),a("tr",[a("td",[t._v("Memcached")]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name memcached -p 11211:11211 --restart always memcached")])])]),t._v(" "),a("tr",[a("td",[t._v("Hive")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://github.com/big-data-europe/docker-hive",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker-compose.yml"),a("OutboundLink")],1)])])])]),t._v(" "),a("h3",{attrs:{id:"魔法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#魔法"}},[t._v("#")]),t._v(" 魔法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("镜像")]),t._v(" "),a("th",[t._v("创建命令或 "),a("code",[t._v("docker-compose.yml")]),t._v(" 链接")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("a",{attrs:{href:"https://hub.docker.com/r/oddrationale/docker-shadowsocks",target:"_blank",rel:"noopener noreferrer"}},[t._v("shadowsocks"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("code",[t._v("docker run --name shadowsocks -d -p 54285:54285 --restart always oddrationale/docker-shadowsocks -s 0.0.0.0 -p 54285 -k yourpasswd -m aes-256-cfb")])])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://github.com/pengchujin/v2rayDocker",target:"_blank",rel:"noopener noreferrer"}},[t._v("V2RayA 服务器端"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name v2ray -p 443:443 -p 80:80 -v $HOME/.caddy:/root/.caddy pengchujin/v2ray_ws:0.10 YOURDOMAIN.COM V2RAY_WS && sleep 3s && sudo docker logs v2ray")])])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://hub.docker.com/r/mzz2017/v2raya",target:"_blank",rel:"noopener noreferrer"}},[t._v("V2RayA 客户端 (Linux)"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("code",[t._v("docker run -d --restart=always --privileged --network=host --name v2raya -v /etc/v2raya:/etc/v2raya mzz2017/v2raya")])])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://hub.docker.com/r/mzz2017/v2raya",target:"_blank",rel:"noopener noreferrer"}},[t._v("V2RayA 客户端 (MacOS)"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("code",[t._v("docker run -d -p 2017:2017 -p 20170-20172:20170-20172 --restart=always --name v2raya -v /etc/v2raya:/etc/v2raya mzz2017/v2raya")])])])])]),t._v(" "),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("镜像")]),t._v(" "),a("th",[t._v("创建命令或 "),a("code",[t._v("docker-compose.yml")]),t._v(" 链接")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Docker Web 管理")]),t._v(" "),a("td",[a("code",[t._v("docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce")])])]),t._v(" "),a("tr",[a("td",[t._v("Qbittorrent Enhanced Edition")]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name qbittorrentee -e WEBUIPORT=8081 -e PUID=1026 -e PGID=100 -e TZ=Asia/Shanghai -p 6881:6881 -p 6881:6881/udp -p 8081:8081 -v /media/Downloads:/downloads --restart always superng6/qbittorrentee")])])]),t._v(" "),a("tr",[a("td",[t._v("云 SSH "),a("a",{attrs:{href:"https://hub.docker.com/r/oldiy/docker-webssh2",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSSH2"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name webssh -p 2222:2222 oldiy/docker-webssh2")])])]),t._v(" "),a("tr",[a("td",[t._v("云 Firefox "),a("a",{attrs:{href:"https://hub.docker.com/r/oldiy/firefox-enpass-novnc",target:"_blank",rel:"noopener noreferrer"}},[t._v("firefox-enpass-novnc"),a("OutboundLink")],1)]),t._v(" "),a("td",[a("code",[t._v("docker run -d --name firefox -p 8083:8083 -p 5900:5900 oldiy/firefox-enpass-novnc:latest")])])])])]),t._v(" "),a("h2",{attrs:{id:"docker-基础命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-基础命令"}},[t._v("#")]),t._v(" Docker 基础命令")]),t._v(" "),a("p",[t._v("初次接触 Docker，要记得两个概念：images（镜像） 和 containers（容器）。从网上获取一个镜像，然后每次可以由这个镜像创造一个容器（像是每次由一个系统镜像安装一个系统一样）。")]),t._v(" "),a("p",[t._v("下面是我最先接触到的几条命令，可能比较适合和我一样的新人。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("用途")]),t._v(" "),a("th",[t._v("常用参数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("docker run -dit ubuntu")])]),t._v(" "),a("td",[t._v("从 Ubuntu 镜像创造一个容器并运行")]),t._v(" "),a("td",[t._v("可用 "),a("code",[t._v("--name")]),t._v(" 对容器命名，默认名是随机生成的；在最后可加 "),a("code",[t._v("<command>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker start -i <name>")])]),t._v(" "),a("td",[t._v("运行名为 "),a("code",[t._v("<name>")]),t._v("（也可以是容器的 container ID 值的前几位）的容器")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker images")])]),t._v(" "),a("td",[t._v("查看本地的镜像")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker image prune -af")])]),t._v(" "),a("td",[t._v("删除所有没有使用的镜像（如果有容器使用了某镜像，无论这个容器正在运行/已停止，这个镜像不会被删除）")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker ps")])]),t._v(" "),a("td",[t._v("查看正在运行的容器")]),t._v(" "),a("td",[t._v("加 "),a("code",[t._v("--all")]),t._v(" 或 "),a("code",[t._v("-a")]),t._v(" 查看所有的（包括已停止的镜像）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker container rm <name>")])]),t._v(" "),a("td",[t._v("删除名为 "),a("code",[t._v("<name>")]),t._v("（也可以是容器的 container ID 值的前几位）的容器")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker container prune -af")])]),t._v(" "),a("td",[t._v("删除所有已停止的容器")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker container rename <old_name> <new_name>")])]),t._v(" "),a("td",[t._v("给容器改名")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker exec -it <name> /bin/bash")])]),t._v(" "),a("td",[t._v("在正在运行的 "),a("code",[t._v("<name>")]),t._v(" 容器中运行 bash 命令行")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker update --restart=always <name>")])]),t._v(" "),a("td",[t._v("让 "),a("code",[t._v("<name>")]),t._v(" 容器开机自启、自动重启")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-v ~/downloads:/var/webdav")])]),t._v(" "),a("td",[t._v("将容器外的 "),a("code",[t._v("~/downloads")]),t._v(" 映射到容器内的 "),a("code",[t._v("/var/webdav")])]),t._v(" "),a("td",[t._v("Windows 下将路径中 "),a("code",[t._v("\\")]),t._v(" 改为 "),a("code",[t._v("/")]),t._v(" 即可，如 "),a("code",[t._v("d:/Downloads")])])])])]),t._v(" "),a("h2",{attrs:{id:"docker-compose-基础命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-基础命令"}},[t._v("#")]),t._v(" Docker Compose 基础命令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("命令")]),t._v(" "),a("th",[t._v("用途")]),t._v(" "),a("th",[t._v("常用参数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("docker-compose up")])]),t._v(" "),a("td",[t._v("以当前文件夹下的 "),a("code",[t._v("docker-compose.yml")]),t._v(" 作为配置文件，"),a("code",[t._v("run")]),t._v(" 一个容器")]),t._v(" "),a("td",[a("code",[t._v("-d")]),t._v("可在后台运行")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("docker-compose down -v")])]),t._v(" "),a("td",[t._v("删除当前文件夹下的 "),a("code",[t._v("docker-compose.yml")]),t._v(" 所指的容器")]),t._v(" "),a("td")])])]),t._v(" "),a("h2",{attrs:{id:"docker-空间清理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-空间清理"}},[t._v("#")]),t._v(" Docker 空间清理")]),t._v(" "),a("blockquote",[a("p",[t._v("参考：https://blog.fundebug.com/2018/01/10/how-to-clean-docker-disk/")])]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("docker system df")]),t._v(" 查看 Docker 占了多少空间：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ docker system "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("df")]),t._v("\nTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\nImages              "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("147")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(".204GB             "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(".887GB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),t._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nContainers          "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("104")]),t._v(".8MB             "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("102")]),t._v(".6MB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("97")]),t._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nLocal Volumes       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".421GB             0B "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nBuild Cache                                                 0B                  0B\n")])])]),a("ul",[a("li",[a("code",[t._v("docker system prune")]),t._v(" 命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及 dangling 镜像(即无 tag 的镜像)。")]),t._v(" "),a("li",[a("code",[t._v("docker system prune -a")]),t._v(" 命令清理得更加彻底，可以将没有容器使用 Docker 镜像（包括暂时未用到的容器和镜像）都删掉。")])]),t._v(" "),a("p",[t._v("如果你使用的是基于 Windows WSL 2 的 Docker，上面的操作只会释放 WSL 2 中的空间，WSL 2 占用 Windows 的空间并不会自动缩小。需要在管理员 PowerShell 下手动缩小 "),a("code",[t._v("%LOCALAPPDATA%\\Docker\\wsl\\data\\ext4.vhdx")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭 Docker")]),t._v("\nnet stop com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("service\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Force "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Docker Desktop"')]),t._v("\nwsl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("shutdown\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 缩小磁盘")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Optimize-VHD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Mode Full "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Path "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Env")]),t._v(":LOCALAPPDATA\\Docker\\wsl\\"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data")]),t._v("\\ext4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vhdx\n")])])]),a("h2",{attrs:{id:"常见错误及解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见错误及解决办法"}},[t._v("#")]),t._v(" 常见错误及解决办法")]),t._v(" "),a("h3",{attrs:{id:"在-docker-容器中如何安装软件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-docker-容器中如何安装软件"}},[t._v("#")]),t._v(" 在 Docker 容器中如何安装软件")]),t._v(" "),a("p",[t._v("不少 Docker 容器都是采用的 Alpine Linux，这个 linux 发行版没有 "),a("code",[t._v("sudo")]),t._v("，没有 "),a("code",[t._v("bash")]),t._v("，我猜是为了简洁吧，毕竟要做成镜像，所以把没用的功能尽量都砍了。")]),t._v(" "),a("p",[t._v("Alpine Linux 下安装软件的命令为：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("apk "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("package name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("顺便中科大镜像源也有 Alpine Linux 的软件源，觉得国内网速慢的可以去更换，镜像站也有更换教程。")]),t._v(" "),a("h3",{attrs:{id:"read-only-file-system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-only-file-system"}},[t._v("#")]),t._v(" Read-only file system")]),t._v(" "),a("p",[t._v("可能是 "),a("code",[t._v("docker-compose.yml")]),t._v(" 中指定了目录为只读。这些可能出现在：")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.3'")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("4.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("alpine\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" myoverlay\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("read_only")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定为只读")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("networks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("myoverlay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("web")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./web\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 7070"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - nextcloud:/var/www/html:ro   # ro 为只读 (read-only)")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" nextcloud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/www/html        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可读写的版本")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" app\n")])])]),a("h3",{attrs:{id:"container-is-unhealty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#container-is-unhealty"}},[t._v("#")]),t._v(" Container is unhealty")]),t._v(" "),a("p",[t._v("我在 Windows 下安装 overleaf 时，出现过下面的情况。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" docker-compose up\nCreating network "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"overleaf_default"')]),t._v(" with the default driver\nCreating overleaf_redis "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\nCreating overleaf_mongo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n\nERROR: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" sharelatex  Container "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"233abaae4ea7"')]),t._v(" is unhealthy.\nERROR: Encountered errors "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" bringing up the project.\n")])])]),a("p",[t._v("在配置文件 "),a("code",[t._v("docker-compose.yml")]),t._v(" 中写到，"),a("code",[t._v("sharelatex")]),t._v(" 基于 "),a("code",[t._v("overleaf_redis")]),t._v(" 和 "),a("code",[t._v("overleaf_mongo")]),t._v("，并且要求 "),a("code",[t._v("mongo")]),t._v(" 是 healthy 的。"),a("br"),t._v(" "),a("code",[t._v("233abaae4ea7")]),t._v(" 正是我电脑上的 "),a("code",[t._v("mongo")]),t._v(" 的 Container ID。")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("sharelatex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mongo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("condition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" service_healthy\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("condition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" service_started\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mongo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("healthcheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" echo 'db.stats().ok' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" mongo localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("27017/test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("quiet\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("interval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10s\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("timeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10s\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("retries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("healthy 可以理解为是正常运行。")]),t._v(" "),a("p",[t._v("这里出错就有两种情况了，一是 "),a("code",[t._v("mongo")]),t._v(" 本身不正常了，另一种是 "),a("code",[t._v("mongo")]),t._v(" 检查的太频繁了，导致还没完成启动，就被诊断为 unhealthy 了。")]),t._v(" "),a("p",[t._v("我们检查一下 mongo 的 log。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"233a"')]),t._v('\n233abaae4ea7        mongo                                   "docker-entrypoint.s鈥?   About a minute ago   Restarting '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("47")]),t._v(" seconds ago                            overleaf_mongo\n")])])]),a("p",[t._v("显示 "),a("code",[t._v("mongo")]),t._v(" 正在重启，我估计是在反复不正常-重启，因此就考虑在这方面进行 debug。"),a("br"),t._v("\n最后的问题出在由于我是在 Windows 上运行，文件映射可能不正确，我把配置文件的 "),a("code",[t._v("volumes")]),t._v(" 部分删掉就可以了。")]),t._v(" "),a("p",[t._v("当然，如果是正确的情况，上一行会显示：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" --all "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mongo"')]),t._v('\n194bafd8158f        mongo                                   "docker-entrypoint.s鈥?   '),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" minutes ago      Up "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" minutes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("healthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27017")]),t._v("/tcp                overleaf_mongo\n")])])]),a("p",[t._v("这种情况下，可以考虑把 "),a("code",[t._v("mongo")]),t._v(" 的 "),a("code",[t._v("healthcheck")]),t._v(" 部分的 "),a("code",[t._v("inteval")]),t._v(" 和 "),a("code",[t._v("timeout")]),t._v(" 调大。")])])}),[],!1,null,null,null);e.default=r.exports}}]);