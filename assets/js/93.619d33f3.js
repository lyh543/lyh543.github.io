(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{507:function(t,s,a){"use strict";a.r(s);var e=a(3),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("code",[t._v("C++面向对象编程")]),t._v(" 这一分类只是学校课程的笔记，"),a("code",[t._v("C++语法")]),t._v(" 分类中也会有不少的 C++ 面向对象的知识。")]),t._v(" "),a("p",[a("code",[t._v("C++")]),t._v(" = "),a("code",[t._v("C")]),t._v(" + "),a("code",[t._v("面向对象（对象和类）")]),t._v(" + ...")]),t._v(" "),a("h2",{attrs:{id:"面向过程的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向过程的缺点"}},[t._v("#")]),t._v(" 面向过程的缺点")]),t._v(" "),a("p",[t._v("大型程序中，有很多全局数据和全局函数，这导致了函数和数据之间数目巨大的潜在连接。若全局数据有所改动，可能会导致所有访问这个数据内的全部函数的重写，程序维护困难。")]),t._v(" "),a("h2",{attrs:{id:"面向对象语言特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象语言特点"}},[t._v("#")]),t._v(" 面向对象语言特点")]),t._v(" "),a("p",[a("code",[t._v("抽象")]),t._v("、"),a("code",[t._v("封装")]),t._v("、"),a("code",[t._v("继承")]),t._v("、"),a("code",[t._v("多态")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象"}},[t._v("#")]),t._v(" 抽象")]),t._v(" "),a("p",[a("code",[t._v("抽象")]),t._v("描述了一个对象的基本特征,可以将这个对象与所有其他类型的对象区分开来，因此提供了清晰定义的概念边。可以理解为"),a("code",[t._v("抽象")]),t._v("关注接口，即可观察到的行为；而"),a("code",[t._v("封装")]),t._v("则关注这些行为的实现。")]),t._v(" "),a("p",[t._v("抽象的过程：")]),t._v(" "),a("ol",[a("li",[t._v("注意问题描述、实质；以及其实现过程或细节")]),t._v(" "),a("li",[t._v("数据抽象：共有状态或属性")]),t._v(" "),a("li",[t._v("行为抽象：共有行为特征、功能")])]),t._v(" "),a("p",[a("code",[t._v("封装")]),t._v("是对ADT的具体实现、形成接口与实现的分离、信息隐藏。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("classname")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//public members")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//friend function")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//private members")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("继承")]),t._v("是某类（派生类）对象可以继承另外一类对象（基类）的特征和功能，依靠复制基类的数据和函数。")]),t._v(" "),a("p",[a("code",[t._v("多态")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("F(动物 *P）{ p->run(); }\n//F即为多态函数，当传递狗对象给p时，执行狗.run()\n//传递猫对象给p时，执行猫.run()……\n")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);