(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{621:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("如果你用过 frp，应该知道可以把家里服务器的 80 和 443 端口映射到公网服务器的 80 和 443 端口，再配合 Caddy / Nginx 服务，就可以用域名访问家里服务器上的网站了。")]),t._v(" "),s("p",[t._v("这个方案的优点有：")]),t._v(" "),s("ol",[s("li",[t._v("家里服务器不需要有公网 IP，也不需要暴露 80 和 443 端口（frpc 每次会使用随机端口连接到服务器），因此也没有被运营商封端口的风险")]),t._v(" "),s("li",[t._v("后续 HTTP/HTTPS 服务器的所有配置都在家里服务器配置")]),t._v(" "),s("li",[t._v("公网服务器只需要做 frp 转发，性能要求很低（阿里云的抢占式 t6，0.2c0.5g 足够）")])]),t._v(" "),s("p",[t._v("也有缺点：")]),t._v(" "),s("ol",[s("li",[t._v("公网服务器的 80 和 443 端口被这个服务占用了")]),t._v(" "),s("li",[t._v("每次流量需要做转发。")])]),t._v(" "),s("div",{staticClass:"language-toml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-toml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# frpc.toml")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("serverAddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("serverPort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7000")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("proxies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localIp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localPort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("remotePort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("useEncryption")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("proxies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localIp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localPort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("remotePort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("useEncryption")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("h2",{attrs:{id:"多个服务器共享一个-https-端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多个服务器共享一个-https-端口"}},[t._v("#")]),t._v(" 多个服务器共享一个 HTTPS 端口")]),t._v(" "),s("p",[t._v("让多个 HTTPS 服务共享一个服务器的端口，理论是可行的。HTTPS 协议里有 SNI（Server Name Indication）扩展，可以让客户端在握手时告诉服务器它想访问的域名。服务器根据这个域名来进行分流和 TCP 转发。")]),t._v(" "),s("p",[t._v("因此，我们可以在公网服务器上用 Nginx 的 stream 模块来根据 SNI 分流到不同的服务端口。配置如下：")]),t._v(" "),s("div",{staticClass:"language-conf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 使用 stream 模块需要在 Ubuntu 上安装 `nginx-full` 包\nstream {\n    # 读取TLS SNI信息\n    ssl_preread on;\n\n    # 根据SNI匹配域名分流\n    map $ssl_preread_server_name $backend {\n        docker-proxy.lyh543.cn 127.0.0.1:4999;\n        default 127.0.0.1:10443;\n    }\n\n    server {\n        listen 443;\n        proxy_pass $backend;\n        proxy_timeout 300s;\n    }\n}\n")])])]),s("p",[t._v("这里 Nginx 仅仅是做了 TCP 转发，没有进行 TLS 解密，因此不需要配置证书。证书配置和 TLS 解密仍然是需要在后面的服务器做。")]),t._v(" "),s("p",[t._v("家里服务器的 frpc 配置也需要小改一下 "),s("code",[t._v("remotePort")]),t._v("，其余不变。")]),t._v(" "),s("div",{staticClass:"language-toml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-toml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# frpc.toml")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("serverAddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("serverPort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7000")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("proxies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localIp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localPort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("remotePort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("useEncryption")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("proxies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localIp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("localPort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("remotePort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10443")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务端再用 nginx 做转发")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("useEncryption")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("这样就可以让两个 frp 客户端共享同一个服务器的 443 端口，对外提供 HTTPS 服务了。显然，也支持多个 frp 客户端共享同一个 443 端口，只要在 Nginx 的 map 里添加更多的域名和端口映射即可。")]),t._v(" "),s("hr"),t._v(" "),s("ol",[s("li",[t._v("上面的 Nginx 只转发了 443，没有转发 80。因为 80 端口经由 frp 直接访问家里的 Nginx/Caddy，会自动 HTTP 重定向到 HTTPS URL。客户端使用 HTTPS 再次访问时，就会被 Nginx 正确分流。至于证书的申请，我使用的是 DNS 验证（"),s("a",{attrs:{href:"https://github.com/caddy-dns/dnspod",target:"_blank",rel:"noopener noreferrer"}},[t._v("caddy-dns/dnspod"),s("OutboundLink")],1),t._v("）。当然也可以在 Nginx 层做 80 端口识别 HTTP 域名进行分流。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);