(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{491:function(t,s,n){"use strict";n.r(s);var c=n(3),e=Object(c.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"cv-限定符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cv-限定符"}},[t._v("#")]),t._v(" cv 限定符")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://zh.cppreference.com/w/cpp/language/cv",target:"_blank",rel:"noopener noreferrer"}},[t._v("cv（const 与 volatile）类型限定符 | cppreference.com"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("cv 限定符是 "),n("code",[t._v("const")]),t._v(" 和 "),n("code",[t._v("volatile")]),t._v(" 的合称。")]),t._v(" "),n("p",[n("strong",[t._v("当对象最初被创建")]),t._v("时，所用的 cv 限定符决定对象的常量性或易变性。")]),t._v(" "),n("p",[n("code",[t._v("const")]),t._v(" 大家都懂，就是不能修改的常量 (constant)，直接修改会编译报错，间接修改（如利用 "),n("code",[t._v("const_cast<int&>")]),t._v(" 等手段）为未定义行为。还有一点，就是写为 "),n("code",[t._v("const")]),t._v(" 之后，编译器会进行优化。")]),t._v(" "),n("p",[t._v("而 "),n("code",[t._v("volatile")]),t._v(" 翻译过来是“易变”的，表明该变量可能通过软件甚至硬件方式变化。这会阻止编译器对这个变量进行任何优化，包括但不限于：不会将变量放到寄存器中；不会对 "),n("code",[t._v("const volatile")]),t._v(" 变量当做 "),n("code",[t._v("const")]),t._v(" 进行优化。（不过，CPU 仍可以将变量放入缓存中，因为缓存对程序员是透明的）")]),t._v(" "),n("p",[t._v("代码例子见 "),n("a",{attrs:{href:"../cpp-type-conversion#const-cast"}},[t._v("const_cast")]),t._v(" 部分。")]),t._v(" "),n("h2",{attrs:{id:"c99-的-const"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c99-的-const"}},[t._v("#")]),t._v(" C99 的 const")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("上面的代码不能通过 C99 标准的 C 编译器（以及 C++ 编译器）。\n因为 C99 对 const 的定义为只读的变量（而不是常量）。")]),t._v(" "),n("h2",{attrs:{id:"const-和-constexpr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#const-和-constexpr"}},[t._v("#")]),t._v(" const 和 constexpr")]),t._v(" "),n("p",[t._v("C: "),n("code",[t._v("#define ll long long")]),t._v("\nC++: 'const int k=5;'")]),t._v(" "),n("p",[t._v("const中可以有变量名，但constexpr的表达式中不能有变量（可以有常量），因为：")]),t._v(" "),n("p",[n("strong",[t._v("constexpr 在编译时进行初始化，const 在运行时初始化")]),t._v("！")]),t._v(" "),n("h2",{attrs:{id:"底层const-和顶层-const"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#底层const-和顶层-const"}},[t._v("#")]),t._v(" 底层const 和顶层 const")]),t._v(" "),n("p",[t._v("不是很懂，感觉没用")])])}),[],!1,null,null,null);s.default=e.exports}}]);