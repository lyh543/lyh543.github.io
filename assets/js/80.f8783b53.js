(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{482:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("数学的集合这个概念，可以用 C 的布尔数组实现。然而，使用 "),a("code",[t._v("bool")]),t._v(" 类型，导致每一个元素都会占用一个字节。"),a("br"),t._v("\n实际上，每一个字节理论上能存 8 个元素的状态，可以使用 "),a("code",[t._v("char")]),t._v(" 或 "),a("code",[t._v("int")]),t._v(" 数组来模拟。"),a("br"),t._v("\n而 C++ STL 自带了一种数据结构，"),a("code",[t._v("bitset")]),t._v("，就不用自己手写啦。")]),t._v(" "),a("h2",{attrs:{id:"声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[t._v("#")]),t._v(" 声明")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bitset>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("bitset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"定义和初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义和初始化"}},[t._v("#")]),t._v(" 定义和初始化")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("bitset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//32位，全为0。")]),t._v("\n")])])]),a("p",[t._v("给出的长度值必须是常量表达式。")]),t._v(" "),a("blockquote",[a("p",[t._v("位集合的位置编号从 0 开始，因此，bs 的位序是从 0 到 31。以0位开始的位串是低阶位（low-order bit），以31位结束的位串是高阶位(high-order bit)。")])]),t._v(" "),a("p",[t._v("简单的来说就是，bitset 和数组一样，从 string 的角度看，"),a("strong",[t._v("string 的顺序和 bitset 顺序是相反的")]),t._v("（string 的最后一位被赋给了 bitset 第一位）；从 unsigned long 的角度看，从左往右是从低位到高位。")]),t._v(" "),a("p",[t._v("bitset 有以下构造函数：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("bitset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//b有 n 位，每位都为 0")]),t._v("\nbitset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsighed "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//b是 u 的一个副本")]),t._v("\nbitset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//b是 s 中含有的位串的副本")]),t._v("\nbitset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//b是 s 中从位置 pos 开始的 n 位的副本")]),t._v("\n")])])]),a("p",[t._v("貌似不是很好懂，但只要记住以下形式等价即可：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v('bitset<8> b("11000");')])]),t._v(" "),a("li",[a("code",[t._v("bitset<8> b(24); //24(10) == 00011000(2)")])]),t._v(" "),a("li",[a("code",[t._v("bitset<8> b; b[3] = b[4] = 1;")])])]),t._v(" "),a("p",[t._v("并且记住“过多则忽略高位，过少则置高位为 0” 的原则。")]),t._v(" "),a("h2",{attrs:{id:"访问-bitset-的位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问-bitset-的位"}},[t._v("#")]),t._v(" 访问 bitset 的位")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("b[]")]),t._v(" 即可。")]),t._v(" "),a("h2",{attrs:{id:"bitset-的一堆函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitset-的一堆函数"}},[t._v("#")]),t._v(" bitset 的一堆函数")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数名")]),t._v(" "),a("th",[t._v("函数作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("bool b.all()")])]),t._v(" "),a("td",[t._v("检查 b 中是否全部位被设为 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("bool b.any()")])]),t._v(" "),a("td",[t._v("检查 b 中是否任一位被设为 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("bool b.none()")])]),t._v(" "),a("td",[t._v("检查 b 中是否无位被设为 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("size_t b.count()")])]),t._v(" "),a("td",[t._v("返回设为 1 的位数")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("size_t b.size()")])]),t._v(" "),a("td",[t._v("返回 bitset 的大小，即 bitset 定义参数中的 n")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("bool b.test(pos)")])]),t._v(" "),a("td",[t._v("类似 "),a("code",[t._v("operator[]")]),t._v("，但是进行越界检查，若越界则抛出 "),a("code",[t._v("std::out_of_range")])])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("b.set()")])]),t._v(" "),a("td",[t._v("设置所有位为 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("b.set(size_t pos, bool value = true)")])]),t._v(" "),a("td",[t._v("类似使用 "),a("code",[t._v("b[pos] = value")]),t._v(" 赋值，但是进行越界检查，同上")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("b.reset()")])]),t._v(" "),a("td",[t._v("设置所有位为 0")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("b.reset(size_t pos)")])]),t._v(" "),a("td",[t._v("类似 于"),a("code",[t._v("b[pos] = 0")]),t._v(" 赋值为 0，但是进行越界检查，同上")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("b.flip()")])]),t._v(" "),a("td",[t._v("类似于 "),a("code",[t._v("~b")]),t._v("，但是在原位，不进行 Copy Construction")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("b[0].flip()")])]),t._v(" "),a("td",[t._v("等价于 "),a("code",[t._v("b[0] = ~b[0]")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("b.flip(size_t pos)")])]),t._v(" "),a("td",[t._v("仅翻转 pos 位（翻转 1 和 0），进行越界检查")])])])]),t._v(" "),a("h2",{attrs:{id:"输出-bitset-的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出-bitset-的函数"}},[t._v("#")]),t._v(" 输出 bitset 的函数")]),t._v(" "),a("h3",{attrs:{id:"_1-to-string-char-zero-0-char-one-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-to-string-char-zero-0-char-one-1"}},[t._v("#")]),t._v(" 1. "),a("code",[t._v("to_string(char zero = '0', char one = '1')")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Traits")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("char_traits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("CharT"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Allocator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("allocator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("CharT"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("basic_string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("CharT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Traits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Allocator"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CharT zero "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CharT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CharT one "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CharT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("用 "),a("code",[t._v("zero")]),t._v(" 表示 0，用 "),a("code",[t._v("one")]),t._v(" 表示 1，返回 bitset 的 basic_string （大概是广义的 string？）形式。"),a("br"),t._v("\n默认 "),a("code",[t._v("to_string()")]),t._v(" 就是返回 bitset 的 01 串的 string。")]),t._v(" "),a("h3",{attrs:{id:"_2-to-ullong"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-to-ullong"}},[t._v("#")]),t._v(" 2. "),a("code",[t._v("to_ullong()")])]),t._v(" "),a("p",[a("code",[t._v("unsigned long long bitset::to_ullong()")])]),t._v(" "),a("p",[t._v("转换 bitset 的内容为 unsigned long long 整数。"),a("br"),t._v("\n和构造 bitset 一样，bitset 的首位对应数的最低位，而尾位对应最高位。")]),t._v(" "),a("p",[t._v("如果不能用 unsigned long long 表示，则抛出 "),a("code",[t._v("std::overflow_error")]),t._v("。")]),t._v(" "),a("p",[t._v("（有意思的是，只有 bitset 的这两个函数会抛出 "),a("code",[t._v("std::overflow_error")]),t._v(" 异常）")]),t._v(" "),a("h3",{attrs:{id:"_3-b-to-ulong"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-b-to-ulong"}},[t._v("#")]),t._v(" 3. "),a("code",[t._v("b.to_ulong()")])]),t._v(" "),a("p",[t._v("和上面一样，就是改下数据范围。")]),t._v(" "),a("p",[t._v("为什么介绍这么草率呢？因为 MSVC 的实现是先强转为 unsigned long long 再转为 unsigned long 判越界。貌似也没什么毛病.jpg")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("_NODISCARD "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_ulong")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// convert bitset to unsigned long")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" _Val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_ullong")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" _Ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("_Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" _Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_Xoflo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"题外话-bitset-any-none-all-count-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题外话-bitset-any-none-all-count-的实现"}},[t._v("#")]),t._v(" 题外话：bitset::any(), none(), all(), count() 的实现")]),t._v(" "),a("p",[a("code",[t._v("bitset::any()")]),t._v("，"),a("code",[t._v("bitset::none()")]),t._v("，"),a("code",[t._v("bitset::all()")]),t._v("，"),a("code",[t._v("bitset::count()")]),t._v("，这四个函数都可以通过记录 "),a("code",[t._v("count")]),t._v("，每次修改时记录 "),a("code",[t._v("count")]),t._v(" 的变化，来实现 "),a("code",[t._v("O(1)")]),t._v(" 的时间复杂度，然而 MSVC 2017 和 GCC 4.7.1 的实现是 "),a("code",[t._v("O(n)")]),t._v(" 的。")]),t._v(" "),a("p",[t._v("猜测原因是记录 "),a("code",[t._v("count")]),t._v(" 的变化会在修改 bitset 时花费更多的时间，对于不使用这四个函数的用户，这样会使程序变慢。而对于需要 "),a("code",[t._v("O(1)")]),t._v("时间复杂度的用户，手动实现类似功能是很方便的。")]),t._v(" "),a("p",[t._v("但是平时使用的时候需要注意时间复杂度是 "),a("code",[t._v("O(1)")]),t._v(" 的。")]),t._v(" "),a("p",[t._v("另外，在 "),a("code",[t._v("bitset::count()")]),t._v(" 的实现上，GCC 使用了汇编指令 "),a("code",[t._v("POPCNT")]),t._v("，而 MSVC 使用的是如下的神奇代码：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("_NODISCARD size_t "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("noexcept")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// count number of set bits")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _Bitsperbyte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\0\\1\\1\\2\\1\\2\\2\\3\\1\\2\\2\\3\\2\\3\\3\\4"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\1\\2\\2\\3\\2\\3\\3\\4\\2\\3\\3\\4\\3\\4\\4\\5"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\1\\2\\2\\3\\2\\3\\3\\4\\2\\3\\3\\4\\3\\4\\4\\5"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\2\\3\\3\\4\\3\\4\\4\\5\\3\\4\\4\\5\\4\\5\\5\\6"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\1\\2\\2\\3\\2\\3\\3\\4\\2\\3\\3\\4\\3\\4\\4\\5"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\2\\3\\3\\4\\3\\4\\4\\5\\3\\4\\4\\5\\4\\5\\5\\6"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\2\\3\\3\\4\\3\\4\\4\\5\\3\\4\\4\\5\\4\\5\\5\\6"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\3\\4\\4\\5\\4\\5\\5\\6\\4\\5\\5\\6\\5\\6\\6\\7"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\1\\2\\2\\3\\2\\3\\3\\4\\2\\3\\3\\4\\3\\4\\4\\5"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\2\\3\\3\\4\\3\\4\\4\\5\\3\\4\\4\\5\\4\\5\\5\\6"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\2\\3\\3\\4\\3\\4\\4\\5\\3\\4\\4\\5\\4\\5\\5\\6"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\3\\4\\4\\5\\4\\5\\5\\6\\4\\5\\5\\6\\5\\6\\6\\7"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\2\\3\\3\\4\\3\\4\\4\\5\\3\\4\\4\\5\\4\\5\\5\\6"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\3\\4\\4\\5\\4\\5\\5\\6\\4\\5\\5\\6\\5\\6\\6\\7"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\3\\4\\4\\5\\4\\5\\5\\6\\4\\5\\5\\6\\5\\6\\6\\7"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\4\\5\\5\\6\\5\\6\\6\\7\\5\\6\\6\\7\\6\\7\\7\\x8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_Ptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reinterpret_cast")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _End "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _Ptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    size_t _Val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" _Ptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" _End"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("_Ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        _Val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" _Bitsperbyte"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_Ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其实就是把每个 byte 的 256 种情况对应的 1 的数量打了个表。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/48394450/why-does-msvc-not-use-popcnt-in-its-implementation-for-stdbitsetcount",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stack Overflow"),a("OutboundLink")],1),t._v(" 上有人提到为什么 MSVC 不使用 "),a("code",[t._v("POPCNT")]),t._v("实现，"),a("code",[t._v("POPCNT")]),t._v(" 比这样实现更快。")]),t._v(" "),a("p",[t._v("回答是 "),a("code",[t._v("POPCNT")]),t._v(" 在部分 CPU 架构上的结果是不可预测的，而 MSVC 更想要跨架构的通用解决方案。")]),t._v(" "),a("p",[t._v("这篇"),a("a",{attrs:{href:"https://www.cnblogs.com/zyl910/archive/2012/11/02/testpopcnt.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客"),a("OutboundLink")],1),t._v("的测试中显示， "),a("code",[t._v("POPCNT")]),t._v(" 比打表形式快了约 2.7 倍。")])])}),[],!1,null,null,null);s.default=e.exports}}]);