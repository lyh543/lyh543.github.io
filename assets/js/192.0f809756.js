(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{583:function(t,a,s){"use strict";s.r(a);var v=s(3),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"系列目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系列目录"}},[t._v("#")]),t._v(" 系列目录")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/posts/2021-07-21-database-concurrency-control/1-transactions.html"}},[t._v("数据库并发控制 (1) -- 事务")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/posts/2021-07-21-database-concurrency-control/2-innodb-mvcc.html"}},[t._v("数据库并发控制 (2) -- InnoDB 并发控制")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/posts/2021-07-21-database-concurrency-control/3-innodb-locks.html"}},[t._v("数据库并发控制 (3) -- InnoDB 锁")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/posts/2021-07-21-database-concurrency-control/4-distributed-locks-design.html"}},[t._v("数据库并发控制 (4) -- 分布式锁的设计")])],1)]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://tech.meituan.com/2014/08/20/innodb-lock.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Innodb中的事务隔离级别和锁的关系 - 美团技术团队"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"innodb-锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-锁"}},[t._v("#")]),t._v(" InnoDB 锁")]),t._v(" "),a("p",[t._v("数据库遵循的是"),a("strong",[t._v("两段锁协议")]),t._v("，将事务分成两个阶段，加锁阶段和解锁阶段（所以叫两段锁）")]),t._v(" "),a("ul",[a("li",[t._v("加锁阶段：在该阶段可以进行加锁操作。加锁不成功，则事务进入等待状态，直到加锁成功才继续执行。")]),t._v(" "),a("li",[t._v("解锁阶段：当事务释放了一个封锁以后，事务进入解锁阶段，在该阶段只能进行解锁操作不能再进行加锁操作。")])]),t._v(" "),a("p",[t._v("这种方式虽然"),a("strong",[t._v("无法避免死锁")]),t._v("，但是两段锁协议"),a("strong",[t._v("可以保证事务的并发调度是串行化")]),t._v("（串行化很重要，尤其是在数据恢复和备份的时候）的。")]),t._v(" "),a("h2",{attrs:{id:"行锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行锁"}},[t._v("#")]),t._v(" 行锁")]),t._v(" "),a("p",[t._v("InnoDB 实现了两种类型的行级锁：")]),t._v(" "),a("ul",[a("li",[t._v("共享锁 (S)：在对任何数据进行读操作之前要申请并获得 S 锁。其它事务可以继续加共享锁，但不能加排它锁；")]),t._v(" "),a("li",[t._v("独占锁 (X)：在进行写操作之前要申请并获得 X 锁。其它事务不能再获得任何锁；")])]),t._v(" "),a("h2",{attrs:{id:"表锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表锁"}},[t._v("#")]),t._v(" 表锁")]),t._v(" "),a("p",[t._v("InnoDB 支持多粒度锁，因此 S 和 X 锁还可以锁表（如使用 "),a("code",[t._v("ALTER TABLE")]),t._v(" 等语句会给表上 X 锁）。")]),t._v(" "),a("p",[t._v("另外还设计了两个意向锁，注意"),a("strong",[t._v("意向锁都是表级的")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("意向共享锁 (IS)：表明事务即将给表中的行设置 S 锁。事务给行加 S 锁前必须获得该表的 IS 锁。")]),t._v(" "),a("li",[t._v("意向排它锁 (IX)：表明事务即将给表中的行设置 X 锁。事务给行加 X 锁前必须获得该表的 IX 锁。")])]),t._v(" "),a("p",[t._v("综上，MySQL 支持两种行锁和四种表锁。")]),t._v(" "),a("p",[t._v("四种表锁的兼容表如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("锁类型")]),t._v(" "),a("th",[t._v("X")]),t._v(" "),a("th",[t._v("IX")]),t._v(" "),a("th",[t._v("S")]),t._v(" "),a("th",[t._v("IS")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("X")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("冲突")])]),t._v(" "),a("tr",[a("td",[t._v("IX")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("兼容")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("兼容")])]),t._v(" "),a("tr",[a("td",[t._v("S")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("兼容")]),t._v(" "),a("td",[t._v("兼容")])]),t._v(" "),a("tr",[a("td",[t._v("IS")]),t._v(" "),a("td",[t._v("冲突")]),t._v(" "),a("td",[t._v("兼容")]),t._v(" "),a("td",[t._v("兼容")]),t._v(" "),a("td",[t._v("兼容")])])])]),t._v(" "),a("p",[t._v("总结一下就是：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("意向锁")]),t._v("之间相互不冲突")]),t._v(" "),a("li",[a("code",[t._v("互斥锁")]),t._v("和所有锁都冲突")]),t._v(" "),a("li",[a("code",[t._v("共享锁")]),t._v("和"),a("code",[t._v("互斥意向锁")]),t._v("冲突")])]),t._v(" "),a("h2",{attrs:{id:"行锁的算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行锁的算法"}},[t._v("#")]),t._v(" 行锁的算法")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-next-key-locks",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL :: MySQL 8.0 Reference Manual :: 15.7.1 InnoDB Locking"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("Record Locks：锁（单条）记录")]),t._v(" "),a("li",[t._v("Gap Locks：间隙锁，锁定一个开区间范围，但不包括记录本身。间隙指的是索引键值之间的间隙，如下面例子的 "),a("code",[t._v("(-∞, 0)")]),t._v("、"),a("code",[t._v("(10, 15)")]),t._v("。")]),t._v(" "),a("li",[t._v("Next-Key Locks：锁定一个非开区间范围，包括记录本身")])]),t._v(" "),a("p",[t._v("假设表中 id 为主键，且有值："),a("code",[t._v("0, 5, 10, 15, 20, 25")])]),t._v(" "),a("p",[t._v("主键等值查询且数据存在时，会添加 Record Locks，锁住 "),a("code",[t._v("10")]),t._v(" 这个记录：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("主键等值查询且数据不存在时，会添加 Gap Locks，锁住 "),a("code",[t._v("(10, 15)")]),t._v(" 的范围，防止幻读：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("主键范围查询时，会添加 Next-Key Locks，锁住 "),a("code",[t._v("(10, 15]")]),t._v(" 的范围，防止幻读：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("MySQL 官网上有提到锁的是"),a("strong",[t._v("前开后闭")]),t._v("区间，但是网上测试不同版本的 MySQL 的表现还不一样，所以就记"),a("strong",[t._v("非开区间")]),t._v("吧。")]),t._v(" "),a("h2",{attrs:{id:"实际演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际演示"}},[t._v("#")]),t._v(" 实际演示")]),t._v(" "),a("h3",{attrs:{id:"两个事务先后-update-但不提交-后更新的被卡住"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两个事务先后-update-但不提交-后更新的被卡住"}},[t._v("#")]),t._v(" 两个事务先后 update 但不提交 -> 后更新的被卡住")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/592c61f1108fc3346e10679b2a6f882477a9a8c1d2862f72fdd53b7e433a9913.png",alt:"picture 1"}})]),t._v(" "),a("p",[t._v("说明"),a("strong",[t._v("可重复读时进行更新也会加锁")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"两个事务都-lock-in-share-mode-然后一个事务-update-该事务被卡住"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两个事务都-lock-in-share-mode-然后一个事务-update-该事务被卡住"}},[t._v("#")]),t._v(" 两个事务都 lock in share mode，然后一个事务 update -> 该事务被卡住")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/07a8794ae482ad7132398cac8ab0085eb5d9c355535ceccbae1750404ed86f6c.jpg",alt:"picture 2"}})]),t._v(" "),a("p",[t._v("也是说明"),a("strong",[t._v("可重复读时进行更新也会加锁")]),t._v("，但是这次加独占锁失败了。")]),t._v(" "),a("h3",{attrs:{id:"innodb-通过加锁回避幻读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-通过加锁回避幻读"}},[t._v("#")]),t._v(" InnoDB 通过加锁回避幻读")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/89d50dce3a86ddf8781ceba795d290541965e80243005f5415c14ae1b83d0b5e.png",alt:"picture 3"}})]),t._v(" "),a("p",[t._v("如果在可重复读下进行了 "),a("code",[t._v("SELECT ... FOR UPDATE")]),t._v(" 或 "),a("code",[t._v("UPDATE")]),t._v(" 或 "),a("code",[t._v("DELETE")]),t._v("，InnoDB 会"),a("strong",[t._v("锁住当前最新已提交的数据")]),t._v("（而不是当前事务开始前已提交的数据），并在查询、更新、删除过程中使用最新已提交的数据。")]),t._v(" "),a("p",[t._v("代价是，加锁后读的值和加锁前读的值不同，即不可重复读。")]),t._v(" "),a("p",[t._v("-- "),a("a",{attrs:{href:"https://stackoverflow.com/questions/68443220/how-mvcc-works-with-lock-in-mysql",target:"_blank",rel:"noopener noreferrer"}},[t._v("locking - How MVCC works with Lock in MySql? - Stack Overflow"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);